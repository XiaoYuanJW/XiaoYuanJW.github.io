<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>1985-10-26T08:15:00.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YuanJW</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/20/hello-world/"/>
    <id>http://example.com/2023/03/20/hello-world/</id>
    <published>2023-03-20T12:37:55.000Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/03/17/%E9%AB%98%E7%BA%A7RabbitMq/"/>
    <id>http://example.com/2023/03/17/%E9%AB%98%E7%BA%A7RabbitMq/</id>
    <published>2023-03-17T12:20:22.000Z</published>
    <updated>2023-03-26T16:12:44.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高级MQ"><a href="#高级MQ" class="headerlink" title="高级MQ"></a>高级MQ</h1><h2 id="MQ一些常见问题"><a href="#MQ一些常见问题" class="headerlink" title="MQ一些常见问题"></a>MQ一些常见问题</h2><p><img src="https://s2.loli.net/2023/03/13/wRjaG5FupUkTWJd.png" alt="image-20230313113621472"></p><p>消息可靠性问题：如何确保发送的消息至少被消费一次</p><p>延迟消息问题：如何实现消息的延迟投递</p><p>消息堆积问题：如何解决数百万消息堆积无法及时消费的问题</p><p>高可用问题：如何避免单点的MQ故障而导致的不可用问题</p><h2 id="消息可靠性"><a href="#消息可靠性" class="headerlink" title="消息可靠性"></a>消息可靠性</h2><blockquote><p>消费者将消息投递给exchange（交换机），exchange再将消息路由到queue（队列），queue最后将消息投递到consumer（消费者）。</p></blockquote><p><img src="https://s2.loli.net/2023/03/16/xOjIubAQSiFLYMR.png" alt="image-20230316095145275"></p><ul><li>发送时丢失<ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li>MQ基于内存存储消息，MQ宕机后，queue里的消息将会丢失</li><li>consumer接收到消息后未消费就宕机</li></ul><h3 id="生产者消息确认机制"><a href="#生产者消息确认机制" class="headerlink" title="生产者消息确认机制"></a>生产者消息确认机制</h3><blockquote><p>RabbitMQ提供了publiser confirm机制来避免消息发送到MQ过程中丢失的问题。</p><p>消息发送到MQ之后，会返回一个结果给发送者，表示消息是否处理成功。</p></blockquote><p><img src="https://s2.loli.net/2023/03/16/iSc6M5x3oFL8Jn1.png" alt="image-20230316101233374"></p><ul><li>publisher-confirm：发送者确认<ul><li>消息成功投递到交换机，返回ack</li><li>消息未投递到交换机，返回nack</li></ul></li><li>publisher-return：发送者回执<ul><li>消息投递到交换机，但没有路由到队列，返回ack以及路由失败原因</li></ul></li></ul><blockquote><p>注意：确认机制发送消息时，需要给每个消息设置一个全局唯一id，以区分不同消息，避免ack冲突。</p></blockquote><h4 id="SpringAMQP实现生产者确认"><a href="#SpringAMQP实现生产者确认" class="headerlink" title="SpringAMQP实现生产者确认"></a>SpringAMQP实现生产者确认</h4><h5 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span> <span class="comment"># 消息确认机制使用异步回调</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span>  <span class="comment"># 开启pusblier-return功能</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span> <span class="comment"># 定义消息路由失败时的策略：true-调用returnCallback, false-直接丢弃消息</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/16/MZvVXfgoxdTt4qL.png" alt="image-20230316102359628"></p><h5 id="RabbitTemplate配置ReturnCallback"><a href="#RabbitTemplate配置ReturnCallback" class="headerlink" title="RabbitTemplate配置ReturnCallback"></a>RabbitTemplate配置ReturnCallback</h5><p><img src="https://s2.loli.net/2023/03/16/LVNFy3dBPbuenEp.png" alt="image-20230316104127492"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 获取RabbitTemplate</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> applicationContext.getBean(RabbitTemplate.class);</span><br><span class="line">        <span class="comment">// 设置ReturnCallback</span></span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt;</span><br><span class="line">                log.info(<span class="string">&quot;消息发送失败, 应答码：&#123;&#125;，原因：&#123;&#125;，交换机：&#123;&#125;，路由机：&#123;&#125;，消息：&#123;&#125;&quot;</span>,</span><br><span class="line">                        replyCode, replyText, exchange, routingKey, message.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="发送消息指定消息ConfirmCallback"><a href="#发送消息指定消息ConfirmCallback" class="headerlink" title="发送消息指定消息ConfirmCallback"></a>发送消息指定消息ConfirmCallback</h5><p><img src="https://s2.loli.net/2023/03/16/1bInPe3QmwdHgaj.png" alt="image-20230316152945204"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">messgae</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息ID</span></span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString());</span><br><span class="line">    <span class="comment">// 添加callback</span></span><br><span class="line">    correlationData</span><br><span class="line">            .getFuture()</span><br><span class="line">            .addCallback(result -&gt; &#123;</span><br><span class="line">                        <span class="comment">// ack：消息成功</span></span><br><span class="line">                        <span class="keyword">if</span> (result.isAck()) &#123;</span><br><span class="line">                            log.debug(<span class="string">&quot;消息发送成功，ID：&#123;&#125;&quot;</span>, correlationData.getId());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// nack：消息失败</span></span><br><span class="line">                            log.error(<span class="string">&quot;消息发送失败，ID：&#123;&#125;，原因：&#123;&#125;&quot;</span>, correlationData.getId(), result.getReason());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ex-&gt; log.error(<span class="string">&quot;消息发送异常，ID：&#123;&#125;，原因：&#123;&#125;&quot;</span>, correlationData.getId(), ex.getMessage()));</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(directExchange, key, message);</span><br><span class="line">    log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="https://s2.loli.net/2023/03/16/LmpIijeT34hF9AC.png" alt="image-20230316154443781"></p><p>SpringAMQP中消息确认的几种情况</p><ul><li>publisher-confirm<ul><li>消息成功发送到达exchange，返回ack</li><li>消息发送失败没有到达exchange，返回nack</li><li>消息发送过程中出现异常，没有收到回执</li></ul></li><li>publisher-return<ul><li>消息成功发送到exchange，但没有路由到队列中</li></ul></li></ul><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><blockquote><p>MQ默认是内存存储消息，开启持久化功能可以确保缓存在MQ中的消息不丢失</p></blockquote><h4 id="交换机持久化"><a href="#交换机持久化" class="headerlink" title="交换机持久化"></a>交换机持久化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (DirectExchange) ExchangeBuilder</span><br><span class="line">            .directExchange(<span class="string">&quot;direct.exchange&quot;</span>)</span><br><span class="line">            .durable(<span class="literal">true</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/16/nO6d4tVYqwFyp5b.png" alt="image-20230316162006288"></p><h4 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">            .durable(<span class="string">&quot;direct.queue&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息持久化-1"><a href="#消息持久化-1" class="headerlink" title="消息持久化"></a>消息持久化</h4><blockquote><p>SpringAMQP中的消息默认是持久的，可以通过MessageProperties中的DeliveryMode来指定的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 消息准备</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder.withBody(<span class="string">&quot;hello world&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">        <span class="comment">// 消息持久化</span></span><br><span class="line">        .setDeliveryMode(MessageDeliveryMode.PERSISTENT)</span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(directExchange,message);</span><br></pre></td></tr></table></figure><h3 id="消费者消息确认机制"><a href="#消费者消息确认机制" class="headerlink" title="消费者消息确认机制"></a>消费者消息确认机制</h3><p><img src="https://s2.loli.net/2023/03/17/Q7UXTF6Aqc2tGHy.png" alt="image-20230317124327738"></p><blockquote><p>RabbitMQ支持消费者确认机制，即消费者处理消息后可以向MQ发送ack回执，MQ收到ack回执后才删除该消息。</p></blockquote><h4 id="SpringAMQP允许三种确认模式"><a href="#SpringAMQP允许三种确认模式" class="headerlink" title="SpringAMQP允许三种确认模式"></a>SpringAMQP允许三种确认模式</h4><ul><li>manual：手动ack，需要在业务代码结束后，调用api发送ack</li><li>auto：自动ack，由spring监测listener代码是否出现异常，没有异常返回ack，抛出异常则返回nack</li><li>none：关闭ack，MQ假定消费者获取消息后成功处理，因此消费投递后立即被删除</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 允许预取消息次数</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># manual：手动ack auto：自动ack none：关闭ack</span></span><br></pre></td></tr></table></figure><h3 id="消费失败重试机制"><a href="#消费失败重试机制" class="headerlink" title="消费失败重试机制"></a>消费失败重试机制</h3><h4 id="消费者失败重试"><a href="#消费者失败重试" class="headerlink" title="消费者失败重试"></a>消费者失败重试</h4><blockquote><p>当消费者出现异常后，消息会不断的requeue（重新入列）到队列，再重新发送给消费者，然后再次异常，再次requeue，无线循环，导致mq的消息处理飙升，带来不必要的压力。</p></blockquote><p><img src="https://s2.loli.net/2023/03/17/iXbc6LYFSH8tsEZ.png" alt="image-20230317140751315"></p><blockquote><p>利用Spring的retry机制，在消费者出现异常时，利用本地重试，而不是无限制的requeue（重新入列）到mq队列。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 允许预取消息次数</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span> <span class="comment"># auto：自动ack</span></span><br><span class="line">        <span class="attr">retry:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启消费者失败重试</span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="number">1000</span> <span class="comment"># 初始等待失败时长1秒</span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">1</span> <span class="comment"># 下次失败的等待时长倍数</span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">3</span> <span class="comment"># 最大重试次数</span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="number">10</span> <span class="comment"># 最大等待时长</span></span><br><span class="line">          <span class="attr">stateless:</span> <span class="literal">true</span> <span class="comment"># 是否为无状态 一般如果业务中包含事</span></span><br><span class="line">          <span class="string">务，这里默认为false</span></span><br></pre></td></tr></table></figure><h4 id="消费者失败消息处理策略"><a href="#消费者失败消息处理策略" class="headerlink" title="消费者失败消息处理策略"></a>消费者失败消息处理策略</h4><blockquote><p>在开启重试模式后，重试次数耗尽，如果消息依旧失败，则需要MessageRecoverer接口来处理。</p></blockquote><p>MessageRecover包含三种不同的实现</p><ul><li>RejectAndDontRequeueRecoverer（默认方式）：重试耗尽后，直接reject，丢弃消息。</li><li>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</li><li>RepublishMessageRecoverer：重试耗尽吧，将失败消息投递到指定的交换机</li></ul><p><img src="https://s2.loli.net/2023/03/17/QkXeKjYg3Fan7OB.png" alt="image-20230317171250693"></p><p><img src="https://s2.loli.net/2023/03/17/uQlDkiwV7Od1C5F.png" alt="image-20230317151556679"></p><h4 id="消消费者失败消息处理策略"><a href="#消消费者失败消息处理策略" class="headerlink" title="消消费者失败消息处理策略"></a>消消费者失败消息处理策略</h4><p><img src="https://s2.loli.net/2023/03/17/pGygNkdxW8F5hMY.png" alt="image-20230317172149376"></p><h5 id="定义绑定失败消息的交换机、队列以及绑定关系"><a href="#定义绑定失败消息的交换机、队列以及绑定关系" class="headerlink" title="定义绑定失败消息的交换机、队列以及绑定关系"></a>定义绑定失败消息的交换机、队列以及绑定关系</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 失败消息配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">errorExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (FanoutExchange) ExchangeBuilder</span><br><span class="line">                .directExchange(<span class="string">&quot;error.exchange&quot;</span>)</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(<span class="string">&quot;error.queue&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding</span><span class="params">(FanoutExchange errorExchange, Queue errorQueue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(errorQueue)</span><br><span class="line">                .to(errorExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定于RepulishMessageRecoverer"><a href="#定于RepulishMessageRecoverer" class="headerlink" title="定于RepulishMessageRecoverer"></a>定于RepulishMessageRecoverer</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageRecoverer <span class="title function_">republisherReceiver</span><span class="params">(RabbitTemplate rabbirTemplate)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbirTemplate, <span class="string">&quot;error.exchange&quot;</span>, <span class="string">&quot;error.queue&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h4 id="确保RabbitMQ消息的可靠性"><a href="#确保RabbitMQ消息的可靠性" class="headerlink" title="确保RabbitMQ消息的可靠性"></a>确保RabbitMQ消息的可靠性</h4><ul><li>开启生产者确认机制，确保生产者的消息能到队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，有spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置MessgeRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul><p><img src="https://s2.loli.net/2023/03/17/FRWapuyHbPtJQX4.png" alt="image-20230317173221929"></p><h2 id="死信交换机"><a href="#死信交换机" class="headerlink" title="死信交换机"></a>死信交换机</h2><h3 id="死信"><a href="#死信" class="headerlink" title="死信"></a>死信</h3><p>当一个队列中的消息满足下列情况之一，可以成为死信（dead letter）:</p><ul><li>消费者使用basic.reject或者basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>被投递的队列消息堆积满了，最早的消息可能成功死信</li></ul><p>如果该队列配置了dead-letter-exchage属性，指定一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，简称DLX）</p><p><img src="https://s2.loli.net/2023/03/21/TKPhptLX8BUaNwx.png" alt="image-20230321095223640"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><h4 id="什么消息会成为死信"><a href="#什么消息会成为死信" class="headerlink" title="什么消息会成为死信"></a>什么消息会成为死信</h4><ul><li>消息被消费者reject或者返回nack</li><li>消息超时未消费</li><li>队列满了</li></ul><h4 id="如何给队列绑定死信交换机"><a href="#如何给队列绑定死信交换机" class="headerlink" title="如何给队列绑定死信交换机"></a>如何给队列绑定死信交换机</h4><ul><li>给队列设置dead-letter-exchange属性，指定一个交换机</li><li>给队列设置dead-letter-routing-key属性，设置死信交换机与死信队列的RoutingKey</li></ul><p><img src="https://s2.loli.net/2023/03/21/tuq2mL5DAXJ91yP.png" alt="image-20230321095638710"></p><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><blockquote><p>TTL即Time-To-Live，如果一个队列中的消息TTL结束仍未被消费，则会变成死信</p></blockquote><p>TTL超时分为两种情况：</p><ul><li>消息所在队列设置了存活时间</li><li>消息本身设置了存活时间</li></ul><p><img src="https://s2.loli.net/2023/03/21/7vJjKZsrGCuPb94.png" alt="image-20230321123001146"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="声明交互机和队列"><a href="#声明交互机和队列" class="headerlink" title="声明交互机和队列"></a>声明交互机和队列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ttl消息队列配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">dlExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (DirectExchange) ExchangeBuilder</span><br><span class="line">                .directExchange(RabbitEnum.QUEUE.getExchange())</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directTtlExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (DirectExchange) ExchangeBuilder</span><br><span class="line">                .directExchange(RabbitEnum.QUEUE_TTL.getExchange())</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">dlQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(RabbitEnum.QUEUE.getName())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directTtlQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(RabbitEnum.QUEUE_TTL.getName())</span><br><span class="line">                .deadLetterExchange(RabbitEnum.QUEUE.getExchange())</span><br><span class="line">                .deadLetterRoutingKey(RabbitEnum.QUEUE.getRouteKey())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">messageBinding</span><span class="params">(DirectExchange dlExchange, Queue dlQueue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(dlQueue)</span><br><span class="line">                .to(dlExchange)</span><br><span class="line">                .with(RabbitEnum.QUEUE.getRouteKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directTtlBinding</span><span class="params">(DirectExchange directTtlExchange, Queue directTtlQueue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(directTtlQueue)</span><br><span class="line">                .to(directTtlExchange)</span><br><span class="line">                .with(RabbitEnum.QUEUE_TTL.getRouteKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="给队列设置超时时间并指定路由"><a href="#给队列设置超时时间并指定路由" class="headerlink" title="给队列设置超时时间并指定路由"></a>给队列设置超时时间并指定路由</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">directTtlQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder</span><br><span class="line">            .durable(RabbitEnum.QUEUE_TTL.getName())</span><br><span class="line">            .deadLetterExchange(RabbitEnum.QUEUE.getExchange())</span><br><span class="line">            .deadLetterRoutingKey(RabbitEnum.QUEUE.getRouteKey())</span><br><span class="line">            .ttl(<span class="number">10000</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlSender</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        Message message = MessageBuilder</span></span><br><span class="line"><span class="comment">//                // 设置消息内容</span></span><br><span class="line"><span class="comment">//                .withBody(&quot;hello, world&quot;.getBytes(StandardCharsets.UTF_8))</span></span><br><span class="line"><span class="comment">//                // 设置消息过期时间</span></span><br><span class="line"><span class="comment">//                .setExpiration(&quot;5000&quot;)</span></span><br><span class="line"><span class="comment">//                .build();</span></span><br><span class="line"><span class="comment">//        rabbitTemplate.convertAndSend(</span></span><br><span class="line"><span class="comment">//                RabbitEnum.QUEUE_TTL.getExchange(),</span></span><br><span class="line"><span class="comment">//                RabbitEnum.QUEUE_TTL.getRouteKey(),</span></span><br><span class="line"><span class="comment">//                message</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line"><span class="comment">//        log.info(&quot;发送消息：&#123;&#125;&quot;, new String(message.getBody()));</span></span><br><span class="line">        rabbitTemplate.convertAndSend(</span><br><span class="line">                RabbitEnum.QUEUE_TTL.getExchange(),</span><br><span class="line">                RabbitEnum.QUEUE_TTL.getRouteKey(),</span><br><span class="line">                message,</span><br><span class="line">                message -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 设置消息过期时间</span></span><br><span class="line">                    message.getMessageProperties().setExpiration(String.valueOf(<span class="number">1000</span> * <span class="number">10</span>));</span><br><span class="line">                    <span class="keyword">return</span> message;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.dl.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;接受消息：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><h5 id="消息超时的两种方式"><a href="#消息超时的两种方式" class="headerlink" title="消息超时的两种方式"></a>消息超时的两种方式</h5><ul><li>给队列设置ttl属性，进入队列后超过ttl时间的消息会会变成死信</li><li>给消息设置ttl属性，队列接受到消息超过ttl时间后变成死信</li><li>两者共存时，以时间短的ttl为准备</li></ul><p><img src="https://s2.loli.net/2023/03/21/i1l7jgcnEXCubfe.png" alt="image-20230321191537702"></p><p><img src="https://s2.loli.net/2023/03/21/hPYCeWNIai7lG3Q.png" alt="image-20230321201920474"></p><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><p><img src="https://s2.loli.net/2023/03/21/1dFWsGkTeix8AQl.png" alt="image-20230321202735890"></p><h4 id="DelayExchange插件"><a href="#DelayExchange插件" class="headerlink" title="DelayExchange插件"></a>DelayExchange插件</h4><p>官方插件地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="https://s2.loli.net/2023/03/22/xqWoFnJpju9aSIG.png" alt="image-20230322093852957"></p><h5 id="将文件放到挂载目录"><a href="#将文件放到挂载目录" class="headerlink" title="将文件放到挂载目录"></a>将文件放到挂载目录</h5><p><img src="https://s2.loli.net/2023/03/22/2iVyrnHWSEeFjDC.png" alt="image-20230322173707410"></p><h5 id="进入容器启动插件"><a href="#进入容器启动插件" class="headerlink" title="进入容器启动插件"></a>进入容器启动插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it rabbitmq /bin/bash</span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/22/zHKWwkgJEQuOynh.png" alt="image-20230322173540945"></p><p><img src="https://s2.loli.net/2023/03/23/mbjUfNKzwR7QH5p.png" alt="image-20230323093756654"></p><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>DelayExchange插件的原理是对官方原生的Exchange做了功能的升级：</p><ul><li>将DelayExchange接受的消息暂存在内存中</li><li>在DelayExchange中计时，超时后投递到队列中</li></ul><blockquote><p>延迟交换机插件只负责延迟，消息路由依然是官方提供的三种模式。</p><p>我们需要添加延迟交换机插件时，指定路由方式，指定x-delay-type，可选类型有fanout，direct，topic。</p></blockquote><h5 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h5><p><img src="https://s2.loli.net/2023/03/23/WnSq1e7xkghjtLw.png" alt="image-20230323095102283"></p><h5 id="发送消息-1"><a href="#发送消息-1" class="headerlink" title="发送消息"></a>发送消息</h5><blockquote><p>消息的延迟时间要在发送消息时指定</p></blockquote><p><img src="https://s2.loli.net/2023/03/23/XBW2nxZC4Ofhw7Y.png" alt="image-20230323095549548"></p><h5 id="SpringAMQP使用延迟队列插件"><a href="#SpringAMQP使用延迟队列插件" class="headerlink" title="SpringAMQP使用延迟队列插件"></a>SpringAMQP使用延迟队列插件</h5><blockquote><p>DelayExchange的本质是官方的三种交换机，只是添加了延迟功能。因此使用时只需要声明一个交换机。交换机的类型可以是任意类型，只要设定delayed属性为true即可。</p></blockquote><h6 id="使用注解声明"><a href="#使用注解声明" class="headerlink" title="使用注解声明"></a>使用注解声明</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;delay.queue&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;delay.direct&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        key = &quot;delay&quot;)</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/23/EtVARQDwkr2PysY.png" alt="image-20230323102126560"></p><h6 id="使用bean声明"><a href="#使用bean声明" class="headerlink" title="使用bean声明"></a>使用bean声明</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">delayExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (DirectExchange) ExchangeBuilder</span><br><span class="line">                .directExchange(<span class="string">&quot;delay.exchange&quot;</span>)</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .delayed()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(<span class="string">&quot;delay.queue&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayBinding</span><span class="params">(DirectExchange delayExchange, Queue delayQueue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(delayQueue)</span><br><span class="line">                .to(delayExchange)</span><br><span class="line">                .with(<span class="string">&quot;delay&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/23/8Iw5WSzGeRkXKA2.png" alt="image-20230323102447618"></p><h5 id="发送消息-2"><a href="#发送消息-2" class="headerlink" title="发送消息"></a>发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelaySender</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(</span><br><span class="line">                <span class="string">&quot;delay.exchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;delay&quot;</span>,</span><br><span class="line">                <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">                message -&gt; &#123;</span><br><span class="line">                    message.getMessageProperties().setHeader(<span class="string">&quot;x-delay&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">                    <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;发送消息：&#123;&#125;&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h5><p><img src="https://s2.loli.net/2023/03/23/RWLKT8eOtZ92vmh.png" alt="image-20230323111734045"></p><p>延迟队列插件使用步骤</p><ul><li>声明一个交换机，添加delayed属性为true</li><li>发送消息时，添加x-delay头，值为超时时间</li></ul><h2 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h2><h3 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h3><blockquote><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限，较早进入队列的消息，可能会成为死信会被丢弃，导致消息堆积问题。</p><p>队列过长的话会占用系统较多内存，如果超过预定设置的占比，RabbitMQ为了释放内存，会将队列消息转储到硬盘中，这个过程称之为page out，page out操作会消耗较长的时间，page out的过程中队列不能被处理消息。</p></blockquote><p>解决消息堆积的三种思路</p><ul><li>增加更多消费者，提高消费速度</li><li>消费者内开启线程池加快消息处理速度</li><li>扩大队列容积，提供堆积上限</li></ul><p><img src="https://s2.loli.net/2023/03/23/kyOBbRdV8QMwes1.png" alt="image-20230323112355158"></p><h3 id="惰性队列-1"><a href="#惰性队列-1" class="headerlink" title="惰性队列"></a>惰性队列</h3><blockquote><p>从RabbitMQ的3.6.0版本开始，RabbitMQ增加了Lazy Queues的概念，也就是惰性队列。</p></blockquote><h4 id="惰性队列的特征"><a href="#惰性队列的特征" class="headerlink" title="惰性队列的特征"></a>惰性队列的特征</h4><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者消费消息要从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><p><img src="https://s2.loli.net/2023/03/23/bidgHMq2DuL7Cnt.png" alt="image-20230323113534493"></p><p><img src="https://s2.loli.net/2023/03/23/5IZPXFNJMpbL2m7.png" alt="image-20230323114359719"></p><h4 id="使用SpringAMQP声明惰性队列"><a href="#使用SpringAMQP声明惰性队列" class="headerlink" title="使用SpringAMQP声明惰性队列"></a>使用SpringAMQP声明惰性队列</h4><ul><li>基于bean方式声明</li></ul><p><img src="https://s2.loli.net/2023/03/23/7dFAhUIwVcDqzLm.png" alt="image-20230323115830962"></p><ul><li>基于注解方式声明</li></ul><p><img src="https://s2.loli.net/2023/03/23/vo59bIfFqtXlpwu.png" alt="image-20230323120130654"></p><h5 id="发送消息-3"><a href="#发送消息-3" class="headerlink" title="发送消息"></a>发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySender</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            amqpTemplate.convertAndSend(<span class="string">&quot;lazy.exchange&quot;</span>, <span class="string">&quot;lazy&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/23/pfaxcY2PD9nemkB.png" alt="image-20230323120612180"></p><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><h5 id="惰性队列的优点"><a href="#惰性队列的优点" class="headerlink" title="惰性队列的优点"></a>惰性队列的优点</h5><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page out，性能比较稳定</li></ul><h5 id="惰性队列的缺点"><a href="#惰性队列的缺点" class="headerlink" title="惰性队列的缺点"></a>惰性队列的缺点</h5><ul><li>基于磁盘存储，消息处理存在时延，消息时效性会降低</li><li>性能受限于磁盘IO</li></ul><p><img src="https://s2.loli.net/2023/03/24/Jl8j4fhcDMbit6Y.png" alt="image-20230324093715376"></p><h2 id="MQ集群"><a href="#MQ集群" class="headerlink" title="MQ集群"></a>MQ集群</h2><h3 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h3><blockquote><p>RabbitMQ是基于Erlang语言编写的，而Erlang是面向并发的语言，天然支持集群模式。</p></blockquote><p>RabbitMQ的集群有两种模式：</p><ul><li>普通集群：一种分布式集群，将队列分散到集群的各个节点，提高整个集群的并发能力</li><li>镜像集群：一种主从集群，普通部署的基础上，添加了主从备份功能，提高集群的数据可用性</li></ul><blockquote><p>镜像集群虽然支持主从，但是主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在RabbitMQ在3.8版本以后，推出了新的功能：仲裁队列来代替镜像集群，底层采用Raft协议确保主从的数据一致性。</p></blockquote><h3 id="普通集群"><a href="#普通集群" class="headerlink" title="普通集群"></a>普通集群</h3><blockquote><p>普通集群即标准集群（classic cluster）</p></blockquote><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul><li>在集群的各个节点间恭共享部分数据，包括交换机、队列元信息，但不包括队列中的消息</li><li>访问集群某个节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回（引用传递），当队列所在节点宕机时，队列中的消息将会丢失</li></ul><p><img src="https://s2.loli.net/2023/03/27/aPc9o2OrmAHdFXS.png" alt="image-20230327000955017"></p><h3 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h3><h3 id="仲裁集群"><a href="#仲裁集群" class="headerlink" title="仲裁集群"></a>仲裁集群</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高级MQ&quot;&gt;&lt;a href=&quot;#高级MQ&quot; class=&quot;headerlink&quot; title=&quot;高级MQ&quot;&gt;&lt;/a&gt;高级MQ&lt;/h1&gt;&lt;h2 id=&quot;MQ一些常见问题&quot;&gt;&lt;a href=&quot;#MQ一些常见问题&quot; class=&quot;headerlink&quot; title=&quot;M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL运维</title>
    <link href="http://example.com/2023/02/27/MySQL%E8%BF%90%E7%BB%B4/"/>
    <id>http://example.com/2023/02/27/MySQL%E8%BF%90%E7%BB%B4/</id>
    <published>2023-02-27T05:39:22.000Z</published>
    <updated>2023-04-05T14:11:25.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL运维"><a href="#MySQL运维" class="headerlink" title="MySQL运维"></a>MySQL运维</h1><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><blockquote><p>错误日志是MySQL中最重要的日志之一，它记录了当mysqlId启动、停止以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，查看此日志。</p></blockquote><blockquote><p>该日志时默认开启的，默认存放目录/var/log/，默认的日志文件名为mysqld.log。</p></blockquote><h4 id="日志变量"><a href="#日志变量" class="headerlink" title="日志变量"></a>日志变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看日志位置</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_error%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/RZILuGEQ9lvzM76.png" alt="image-20230227160452905"></p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -50f ./xxx.err</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/JsgUKjL6kflcpMB.png" alt="image-20230227160802360"></p><h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><blockquote><p>二进制日志（BINLOG）记录了所有的DDL（数据定义语言）语句和DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句。</p></blockquote><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>灾难数据恢复</li><li>MySQL主从复制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%log_bin%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/zUeNlIXvWH4iBfF.png" alt="image-20230227161951389"></p><p><img src="https://s2.loli.net/2023/02/27/uOAEV7Rjs8NrocK.png" alt="image-20230227162219636"></p><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><blockquote><p>MySQL服务器中提供了多种格式来记录二进制日志</p></blockquote><table><thead><tr><th>日志格式</th><th>含义</th></tr></thead><tbody><tr><td>STATEMENT</td><td>基于SQL语句的日志记录，记录的SQL语句，对于数据进行修改的SQL都将记录在日志文件中</td></tr><tr><td>ROW（default）</td><td>基于行的日志记录，记录的是每一行的数据变更</td></tr><tr><td>MIXED</td><td>综合了STATEMENT和ROW两种格式，默认采用STATEMENT，在某些特殊的情况下会自动切换为ROW进行记录</td></tr></tbody></table><h4 id="日志变量-1"><a href="#日志变量-1" class="headerlink" title="日志变量"></a>日志变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%binlog_format%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/yvpzUamlkr76V1Z.png" alt="image-20230227162726006"></p><h4 id="查看日志-1"><a href="#查看日志-1" class="headerlink" title="查看日志"></a>查看日志</h4><blockquote><p>二进制日志由二进制的方式存储，不能直接读取，需要通过二进制日志查询工具<code>mysqlbinlog</code>来查看。</p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [options] log_filename</span><br></pre></td></tr></table></figure><h5 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-d # 指定数据库名称，列出指定的数据库相关操作</span><br><span class="line">-o # 忽略日志的前n行命令</span><br><span class="line">-v # 将行事件（数据变更）重构为SQL语句</span><br><span class="line">-w # 将行事件（数据变更）重构为SQL语句并输出注释信息</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/swElOmr6Sbg2chH.png" alt="image-20230227165854111"></p><h4 id="删除日志"><a href="#删除日志" class="headerlink" title="删除日志"></a>删除日志</h4><blockquote><p>对于比较繁忙的业务系统，每天生成的binlog数据较多，长时间不清理，将占用大量的磁盘空间。</p></blockquote><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>reset master</td><td>删除全部binlog日志，删除后将日志编号从binlog.000001重新开始</td></tr><tr><td>purge master logs to ‘binlog.***’</td><td>删除***编号之前的所有日志</td></tr><tr><td>purge master logs before ‘yyyy-mm-dd hh24:mi:ss’</td><td>删除日志为’yyyy-mm-dd hh24:mi:ss’之前产生的所有日志</td></tr></tbody></table><blockquote><p>MySQL配置文件中配置二进制日志的过期时间，设置后二进制日志过期会自动删除</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%binlog_expire_logs_seconds%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/lLZdrGQS64KkwzP.png" alt="image-20230227170902710"></p><h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><blockquote><p>查询日志中记录客户端所有操作语句，而二进制日志不包含查询数据的SQL语句，默认情况下，查询日志是未开启的。</p></blockquote><h4 id="日志变量-2"><a href="#日志变量-2" class="headerlink" title="日志变量"></a>日志变量</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/G7xp8RHTUPlbMyn.png" alt="image-20230227171226909"></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># /etc/my.cnf配置文件</span><br><span class="line"># 设置查询日志是否开启：0-&gt;关闭 1-&gt;开启</span><br><span class="line">general_log = 1</span><br><span class="line"># 设置日志的文件名，如果没有指定，默认的文件名为hos    t_name.log</span><br><span class="line">general_log_file=mysql_query.log</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/27/ViOkgx1c7dPQZSb.png" alt="image-20230227171943243"></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><blockquote><p>慢查询日志记录了所有执行时间超过参数long_query_time设置值并且扫描记录数不小于min_examined_row_limit的所有的SQL语句的日志。默认未开启。long_query_time默认为10秒，最小为0秒，精度可以到微秒。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置慢查询日志是否开启</span></span><br><span class="line">slow_query_log = 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置执行时间参数（单位：秒）</span></span><br><span class="line">long_query_time = 2</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，慢查询日志不会记录管理语句和不使用索引进行查找的查询。可以使用log_show_admin_statements和log_queries_not_using_indexes。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记录执行较慢的管理语句</span></span><br><span class="line">log_show_admin_statements = 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记录执行较慢的未使用索引的语句</span></span><br><span class="line">log_queries_not_using_indexes = 1</span><br></pre></td></tr></table></figure><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>主从复制是指将主数据库的DDL和DML操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（日志重做）。使得从库和主库的数据保持同步。</p><p>MySQL支持一台主库同时向多台从库进行复制，从库同时可以作为其他服务器的主库，实现链状复制。</p></blockquote><p><img src="https://s2.loli.net/2023/02/28/FugdmB9iInkMhYo.png" alt="image-20230228142608267"></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>主库出现问题，可以快速切换到从库提供服务</p></li><li><p>实现读写分离，降低主库的访问压力，另外从服务器可以使用MyISAM，提升查询性能以及节约系统的开销</p></li><li><p>主从服务器负责各自的读和写，极大程度缓解了锁的争用</p><blockquote><p>从库中执行备份（添加全局锁），避免备份期间影响主库服务</p></blockquote></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>MySQL主从复制主要涉及三种线程：<code>binlog线程</code>、<code>I/O线程</code>和<code>SQL线程</code></p><ul><li>binlog线程：负责将主服务器上的数据更改写入二进制日志(binary log)中</li><li>I/O线程：负责从主服务器上读取二进制日志(binary log)，并写入从服务器的中继日志(relay log)中</li><li>SQL线程：负责读取中继日志(relay log)并重放其中的SQL语句</li></ul><p><img src="https://pdai.tech/images/mysql/master-slave.png" alt="img"></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>主库在提交事务时，binlog线程会将数据变更记录在二进制日志文件binary log中</li><li>从库I/O线程从主库读取二进制文件binary log，并写入从库的中继日志relay log中</li><li>从库SQL线程读取中继日志relay log并重放其中的SQL语句</li></ul><p><img src="https://s2.loli.net/2023/02/28/olPcbE3eOfHgapu.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://s2.loli.net/2023/02/28/xecUrpG8YDVqnBu.png" alt="img"></p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL运维&quot;&gt;&lt;a href=&quot;#MySQL运维&quot; class=&quot;headerlink&quot; title=&quot;MySQL运维&quot;&gt;&lt;/a&gt;MySQL运维&lt;/h1&gt;&lt;h2 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://example.com/2023/01/23/SpringCloud/"/>
    <id>http://example.com/2023/01/23/SpringCloud/</id>
    <published>2023-01-23T02:31:22.000Z</published>
    <updated>2023-04-05T07:15:49.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p><img src="https://s2.loli.net/2023/02/10/KbCqjypxIeQ8W6P.png" alt="image-20230210111413170"></p><p><img src="https://s2.loli.net/2023/02/10/lSaqRn58HA6BYTp.png" alt="image-20230210111437287"></p><p><img src="https://s2.loli.net/2023/02/10/MsWpCvPV9N6tjn8.png" alt="image-20230210111840848"></p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><h3 id="服务架构演变"><a href="#服务架构演变" class="headerlink" title="服务架构演变"></a>服务架构演变</h3><h4 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h4><blockquote><p>将业务的所有功能集中在一个项目中开发并打包部署</p></blockquote><ul><li>优点：架构简单、部署成本低</li><li>缺点：耦合度高</li></ul><p><img src="https://s2.loli.net/2023/02/10/PjWzDSX46LJM59V.png" alt="image-20230210112345474"></p><h4 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h4><blockquote><p>根据业务功能对系统进行拆分，每个业务模块作为一个独立项目开发</p></blockquote><ul><li>优点：降低服务耦合，利于服务升级拓展</li></ul><p><img src="https://s2.loli.net/2023/02/10/CBD5Fz7QNutyelL.png" alt="image-20230210112702501"></p><ul><li><p>问题</p><p><img src="https://s2.loli.net/2023/02/10/QXM4ritw6DK2gSG.png" alt="image-20230210112951592"></p><ul><li>服务拆分的粒度</li><li>服务地址的维护</li><li>服务远程的调用</li><li>服务状态的感知</li></ul></li></ul><h4 id="微服务-1"><a href="#微服务-1" class="headerlink" title="微服务"></a>微服务</h4><blockquote><p><code>微服务</code>是一种经过良好架构设计的<code>分布式</code>架构设计方案。</p></blockquote><p><img src="https://s2.loli.net/2023/02/10/2xdC6XhEISfoYia.png" alt="image-20230210113807145"></p><p>微服务架构的特征：</p><ul><li>单一职责：微服务拆分粒度更小，每个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发</li><li>面向服务：每个微服务对外暴露业务接口</li><li>独立自治：开发独立，技术独立，数据独立，部署独立</li><li>级联隔离：服务调用要做好隔离、容错、降级，避免出现级联问题</li></ul><p>微服务的优缺点：</p><ul><li>优点：拆分粒度更小，服务更加独立，耦合度更低</li><li>缺点：架构非常复杂，运维、监控、部署难度高</li></ul><p>微服务技术对比：</p><p><img src="https://s2.loli.net/2023/02/10/1uQSlvFI6q8mWUs.png" alt="image-20230210125543588"></p><h3 id="SpringCloud-1"><a href="#SpringCloud-1" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p><img src="https://s2.loli.net/2023/02/10/TtDJy2CdKEFVu9l.png" alt="image-20230210130124308"></p><p><img src="https://s2.loli.net/2023/02/10/SKRbUQLP9uaCfrt.png" alt="image-20230210130153060"></p><blockquote><p>SpringCloud集成了各种微服务组件，并基于SpringBoot实现组件的自动装配，从而提供开箱即用的体验</p></blockquote><p><img src="https://s2.loli.net/2023/02/10/rkfSqhmcG3YKiQW.png" alt="image-20230210130814678"></p><h4 id="SpringCloud和SpringBoot版本对应关系"><a href="#SpringCloud和SpringBoot版本对应关系" class="headerlink" title="SpringCloud和SpringBoot版本对应关系"></a>SpringCloud和SpringBoot版本对应关系</h4><p><img src="https://s2.loli.net/2023/02/11/8U9VTFXuJfCn7Wb.png" alt="image-20230211180656324"></p><h3 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h3><ul><li>不同微服务单一职责，不会重复开发相同的业务</li><li>不同微服务数据独立，不会访问其他服务的数据库</li><li>微服务将业务暴露为接口，供其他微服务调用</li></ul><h3 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h3><h4 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h4><blockquote><p>基于RestTemplate发起的http请求实现的远程调用与语言就无关，只要请求的ip地址、端口、接口路径以及请求参数即可。</p></blockquote><h5 id="导入Ribbon依赖"><a href="#导入Ribbon依赖" class="headerlink" title="导入Ribbon依赖"></a>导入Ribbon依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注册RestTemplate"><a href="#注册RestTemplate" class="headerlink" title="注册RestTemplate"></a>注册RestTemplate</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册RestTemplate对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="使用RestTemplate发送http请求"><a href="#使用RestTemplate发送http请求" class="headerlink" title="使用RestTemplate发送http请求"></a>使用RestTemplate发送http请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用RestTemplate发送http请求</span></span><br><span class="line"><span class="type">UmsMember</span> <span class="variable">umsMember</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8001/member/&quot;</span> + omsOrder.getMemberId(), UmsMember.class);</span><br></pre></td></tr></table></figure><h4 id="提供者与消费者"><a href="#提供者与消费者" class="headerlink" title="提供者与消费者"></a>提供者与消费者</h4><p><img src="https://s2.loli.net/2023/02/15/ZahAUtpTeELfFln.png" alt="image-20230215174602110"></p><ul><li>服务提供者：暴露接口给其他微服务调用</li><li>服务消费者：调用其他微服务提供的接口</li><li>提供者与消费者角色是相对的</li></ul><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="RestTemplate调用出现的问题"><a href="#RestTemplate调用出现的问题" class="headerlink" title="RestTemplate调用出现的问题"></a>RestTemplate调用出现的问题</h3><ul><li>硬编码方式不易于修改请求地址</li><li>集群环境不能获取地址和负载均衡</li><li>不能监测服务提供者的健康状态</li></ul><h3 id="Eureka的作用"><a href="#Eureka的作用" class="headerlink" title="Eureka的作用"></a>Eureka的作用</h3><blockquote><p>Spring Cloud Eureka是Spring Cloud Netflix 子项目的核心组件之一，主要用于微服务架构中的服务治理。本文将对搭建Eureka注册中心，搭建Eureka客户端，搭建Eureka集群及给Eureka注册中心添加登录认证进行介绍。</p><p>在微服务架构中往往会有一个注册中心，每个微服务都会向注册中心去注册自己的地址及端口信息，注册中心维护着服务名称与服务实例的对应关系。每个微服务都会定时从注册中心获取服务列表，同时汇报自己的运行情况，这样当有的服务需要调用其他服务时，就可以从自己获取到的服务列表中获取实例地址进行调用，Eureka实现了这套服务注册与发现机制。</p></blockquote><p><img src="https://s2.loli.net/2023/02/15/87JUVjlEoKmeOTy.png" alt="image-20230215180145676"></p><p><img src="https://s2.loli.net/2023/02/15/Ynx9WDKX5Svp7J1.png" alt="image-20230215180245207"></p><p><img src="https://s2.loli.net/2023/02/15/JAIYLQZ4slRSahM.png" alt="image-20230215180306986"></p><h3 id="搭建Eureka服务端"><a href="#搭建Eureka服务端" class="headerlink" title="搭建Eureka服务端"></a>搭建Eureka服务端</h3><h4 id="父工程引入spring-cloud依赖"><a href="#父工程引入spring-cloud依赖" class="headerlink" title="父工程引入spring-cloud依赖"></a>父工程引入spring-cloud依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud 相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建子工程"><a href="#创建子工程" class="headerlink" title="创建子工程"></a>创建子工程</h4><p><img src="https://s2.loli.net/2023/02/16/qjMW3dRhFSK94oy.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类添加-EnableEurekaServer启用Eureka注册中心"><a href="#启动类添加-EnableEurekaServer启用Eureka注册中心" class="headerlink" title="启动类添加@EnableEurekaServer启用Eureka注册中心"></a>启动类添加@EnableEurekaServer启用Eureka注册中心</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置注册中心"><a href="#配置注册中心" class="headerlink" title="配置注册中心"></a>配置注册中心</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment"># 指定运行端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 指定服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># 指定主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 指定是否要从注册中心获取服务（注册中心不需要开启）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 指定是否要注册到注册中心（注册中心不需要开启）</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭保护模式</span></span><br></pre></td></tr></table></figure><h4 id="运行并访问http-localhost-7001"><a href="#运行并访问http-localhost-7001" class="headerlink" title="运行并访问http://localhost:7001/"></a>运行并访问<a href="http://localhost:7001/">http://localhost:7001/</a></h4><p><img src="https://s2.loli.net/2023/02/16/RVfMKgCQNZ5BDUH.png" alt="image-20230216110000487"></p><h3 id="搭建Eureka客户端"><a href="#搭建Eureka客户端" class="headerlink" title="搭建Eureka客户端"></a>搭建Eureka客户端</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类添加-EnableDiscoveryClient启用Eureka服务发现"><a href="#启动类添加-EnableDiscoveryClient启用Eureka服务发现" class="headerlink" title="启动类添加@EnableDiscoveryClient启用Eureka服务发现"></a>启动类添加@EnableDiscoveryClient启用Eureka服务发现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置编辑"><a href="#配置编辑" class="headerlink" title="配置编辑"></a>配置编辑</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eureka 服务注册与发现配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 注册到Eureka的注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 获取注册实例列表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span> <span class="comment"># 配置注册中心地址</span></span><br></pre></td></tr></table></figure><h4 id="查看注册信息"><a href="#查看注册信息" class="headerlink" title="查看注册信息"></a>查看注册信息</h4><p><img src="https://s2.loli.net/2023/02/16/deObycaHXRw24tr.png" alt="image-20230216111133843"></p><h4 id="多实例部署"><a href="#多实例部署" class="headerlink" title="多实例部署"></a>多实例部署</h4><blockquote><p>多实例部署，修改端口设置，避免端口冲突</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=8002</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/16/aBvgxYftEJp3jLX.png" alt="image-20230216144158442"></p><p><img src="https://s2.loli.net/2023/02/16/wlORaD8gNcYzTS3.png" alt="image-20230216145444136"></p><h4 id="拉取服务"><a href="#拉取服务" class="headerlink" title="拉取服务"></a>拉取服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用RestTemplate发送http请求</span></span><br><span class="line">           <span class="type">CommonResult</span> <span class="variable">commonResult</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://demo-user/member/&quot;</span> + omsOrder.getMemberId(), CommonResult.class);</span><br></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Eureka集群搭建"><a href="#Eureka集群搭建" class="headerlink" title="Eureka集群搭建"></a>Eureka集群搭建</h3><blockquote><p>由于所有服务都会注册到注册中心去，服务之间的调用都是通过从注册中心获取的服务列表来调用，注册中心一旦宕机，所有服务调用都会出现问题。所以我们需要多个注册中心组成集群来提供服务，下面将搭建一个双节点的注册中心集群。</p><p>通过多个注册中心互相注册，搭建了注册中心的多节点集群。</p></blockquote><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span> <span class="comment">#指定运行端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">#指定服务名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#指定主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7002/eureka/,</span> <span class="string">http://localhost:7003/eureka/</span> <span class="comment">#注册到另一个Eureka注册中心</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#指定是否要从注册中心获取服务</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#指定是否要注册到注册中心</span></span><br></pre></td></tr></table></figure><ul><li>application-replica1.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,</span> <span class="string">http://localhost:7003/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>application-replica2.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/,</span> <span class="string">http://localhost:7002/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="复制运行配置"><a href="#复制运行配置" class="headerlink" title="复制运行配置"></a>复制运行配置</h4><p><img src="https://s2.loli.net/2023/02/16/wHS8K3OjWYCz1m7.png" alt="image-20230216173000337"></p><h4 id="编辑配置文件-1"><a href="#编辑配置文件-1" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p><img src="https://s2.loli.net/2023/02/16/T3yxBG9eEAw7vbq.png" alt="image-20230216172820478"></p><p><img src="https://s2.loli.net/2023/02/16/kVXUGZth9b3vPeA.png"></p><h3 id="Eureka添加认证"><a href="#Eureka添加认证" class="headerlink" title="Eureka添加认证"></a>Eureka添加认证</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="配置WebSecurityConfig"><a href="#配置WebSecurityConfig" class="headerlink" title="配置WebSecurityConfig"></a>配置WebSecurityConfig</h4><blockquote><p>默认情况下添加SpringSecurity依赖的应用每个请求都需要添加CSRF token才能访问，Eureka客户端注册时并不会添加，所以需要配置/eureka/**路径不需要CSRF token。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().ignoringAntMatchers(&quot;/eureka/**&quot;);</span><br><span class="line">        super.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编辑配置文件-2"><a href="#编辑配置文件-2" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><blockquote><p>配置文件中需要修改注册中心地址格式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://$&#123;username&#125;:$&#123;password&#125;@$&#123;hostname&#125;:$&#123;port&#125;/eureka/</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:123456@localhost:7001/eureka/,</span> <span class="string">http://admin:123456@localhost:7002/eureka/</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/16/qkMYtihmrVleN7p.png" alt="image-20230216174959224"></p><p><img src="https://s2.loli.net/2023/02/16/sSqdQbefr7ELXAW.png" alt="image-20230216175016142"></p><h3 id="Eureka常见配置"><a href="#Eureka常见配置" class="headerlink" title="Eureka常见配置"></a>Eureka常见配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#eureka客户端配置</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#是否将自己注册到eureka服务端上去</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#是否获取eureka服务端上注册的服务列表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka/</span> <span class="comment"># 指定注册中心地址</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 启用eureka客户端</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span> <span class="comment">#定义去eureka服务端获取服务列表的时间间隔</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#eureka客户端实例配置</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment">#定义服务多久去注册中心续约</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment">#定义服务多久不去续约认为服务失效</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">zone:</span> <span class="string">jiangsu</span> <span class="comment">#所在区域</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span> <span class="comment">#是否优先使用ip来作为主机名</span></span><br><span class="line">  <span class="attr">server:</span> <span class="comment">#eureka服务端配置</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭eureka服务端的保护机制</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="搭建Eureka服务端-1"><a href="#搭建Eureka服务端-1" class="headerlink" title="搭建Eureka服务端"></a>搭建Eureka服务端</h4><ul><li>引入eureka-server依赖</li><li>添加@EnableEurekaServer注解</li><li>在application.yml配置eureka地址</li></ul><h4 id="搭建Eureka服务端-2"><a href="#搭建Eureka服务端-2" class="headerlink" title="搭建Eureka服务端"></a>搭建Eureka服务端</h4><ul><li>引入eureka-client依赖</li><li>添加@EnableDiscoveryClient注解</li><li>在application.yml配置eureka地址</li></ul><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><ul><li>RestTemplate添加@LoadBalanced注解</li><li>用服务提供者的服务名称远程调用</li></ul><p><img src="https://s2.loli.net/2023/02/16/srZ4Gmf2CTbpgdX.png" alt="image-20230216171238673"></p><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><blockquote><p>Spring Cloud Ribbon 是Spring Cloud Netflix 子项目的核心组件之一，主要给服务间调用及API网关转发提供负载均衡的功能。</p><p>在微服务架构中，很多服务都会部署多个，其他服务去调用该服务的时候，如何保证负载均衡是个不得不去考虑的问题。负载均衡可以增加系统的可用性和扩展性，当我们使用RestTemplate来调用其他服务时，Ribbon可以很方便的实现负载均衡功能。</p></blockquote><p><img src="https://s2.loli.net/2023/02/16/Oix1LDRZes5w792.png" alt="image-20230216175448616"></p><p><img src="https://s2.loli.net/2023/02/17/O8bn6cCASMT1p35.png" alt="image-20230217102436638"></p><h3 id="负载均衡流程"><a href="#负载均衡流程" class="headerlink" title="负载均衡流程"></a>负载均衡流程</h3><p><img src="https://s2.loli.net/2023/02/17/Tg2KGeDWxaOip5h.png" alt="image-20230217104237779"></p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><p><img src="https://s2.loli.net/2023/02/17/1Czovl4iq9mDLxu.png" alt="image-20230217104059033"></p><blockquote><p>Ribbon的负载均衡规则由一个IRule的接口定义，每一个接口都是一种规则</p></blockquote><p><img src="https://s2.loli.net/2023/02/17/oxiVTnMmIuapXkF.png" alt="image-20230217105006354"></p><p><img src="https://s2.loli.net/2023/02/17/zNAYcX63nQgBkuO.png" alt="image-20230217105159529"></p><blockquote><p>所谓的负载均衡策略，就是当A服务调用B服务时，此时B服务有多个实例，这时A服务以何种方式来选择调用的B实例，ribbon可以选择以下几种负载均衡策略。</p></blockquote><ul><li>com.netflix.loadbalancer.RandomRule：从提供服务的实例中以随机的方式；</li><li>com.netflix.loadbalancer.RoundRobinRule：以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过；</li><li>com.netflix.loadbalancer.RetryRule：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例；</li><li>com.netflix.loadbalancer.WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择；</li><li>com.netflix.loadbalancer.BestAvailableRule：选择并发较小的实例；</li><li>com.netflix.loadbalancer.AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例；</li><li>com.netflix.loadbalancer.ZoneAwareLoadBalancer：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例。</li></ul><h3 id="Ribbon常用配置"><a href="#Ribbon常用配置" class="headerlink" title="Ribbon常用配置"></a>Ribbon常用配置</h3><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment">#服务请求连接超时时间（毫秒）</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment">#服务请求处理超时时间（毫秒）</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment">#对超时请求启用重试机制</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#切换重试实例的最大个数</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 切换实例后重试最大次数</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#修改负载均衡算法</span></span><br></pre></td></tr></table></figure><h4 id="指定服务配置"><a href="#指定服务配置" class="headerlink" title="指定服务配置"></a>指定服务配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment">#服务请求连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment">#服务请求处理超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span> <span class="comment">#对超时请求启用重试机制</span></span><br><span class="line">    <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment">#切换重试实例的最大个数</span></span><br><span class="line">    <span class="attr">MaxAutoRetries:</span> <span class="number">1</span> <span class="comment"># 切换实例后重试最大次数</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#修改负载均衡算法</span></span><br></pre></td></tr></table></figure><h3 id="修改负载均衡算法"><a href="#修改负载均衡算法" class="headerlink" title="修改负载均衡算法"></a>修改负载均衡算法</h3><h4 id="定义新IRule并注入Bean"><a href="#定义新IRule并注入Bean" class="headerlink" title="定义新IRule并注入Bean"></a>定义新IRule并注入Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#修改负载均衡算法</span></span><br></pre></td></tr></table></figure><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><blockquote><p>Ribbon默认是采用懒加载，即第一次访问时才会创建LoadBalanceClient负载均衡客户端，请求时间会较长。</p><p>饥饿加载会在项目启动时创建，降低第一次访问的耗时。</p></blockquote><h4 id="开启饥饿加载"><a href="#开启饥饿加载" class="headerlink" title="开启饥饿加载"></a>开启饥饿加载</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span> <span class="comment"># 指定饥饿加载的服务</span></span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2023/02/17/LOja9GlQinVNcfu.png" alt="image-20230217141915851"></p><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h3><blockquote><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案，Nacos 作为其核心组件之一，可以作为<code>注册中心</code>和<code>配置中心</code>使用，本文将对其用法进行详细介绍。</p></blockquote><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 具有如下特性:</p><ul><li>服务发现和服务健康监测：支持基于<code>DNS</code>和基于<code>RPC</code>的服务发现，支持对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求；</li><li>动态配置服务：动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置；</li><li>动态 DNS 服务：动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务；</li><li>服务及其元数据管理：支持从微服务平台建设的视角管理数据中心的所有服务及元数据。</li></ul><h3 id="Nacos安装"><a href="#Nacos安装" class="headerlink" title="Nacos安装"></a>Nacos安装</h3><h4 id="拉取Nacos镜像"><a href="#拉取Nacos镜像" class="headerlink" title="拉取Nacos镜像"></a>拉取Nacos镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><h4 id="运行Nacos容器"><a href="#运行Nacos容器" class="headerlink" title="运行Nacos容器"></a>运行Nacos容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-server</span><br></pre></td></tr></table></figure><h4 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h4><blockquote><p><a href="http://xx.xx.xx.xxx:8848/nacos/">http://xx.xx.xx.xxx:8848/nacos/</a></p><p>初始账号和密码：nacos/nacos</p></blockquote><p><img src="https://s2.loli.net/2023/02/17/awotvjCDUHZI39J.png"></p><h3 id="应用注册"><a href="#应用注册" class="headerlink" title="应用注册"></a>应用注册</h3><h4 id="添加SpringCloudAlibaba依赖"><a href="#添加SpringCloudAlibaba依赖" class="headerlink" title="添加SpringCloudAlibaba依赖"></a>添加SpringCloudAlibaba依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring Cloud Alibaba 相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加Nacos服务发现依赖"><a href="#添加Nacos服务发现依赖" class="headerlink" title="添加Nacos服务发现依赖"></a>添加Nacos服务发现依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br></pre></td></tr></table></figure><h3 id="服务分级存储模型"><a href="#服务分级存储模型" class="headerlink" title="服务分级存储模型"></a>服务分级存储模型</h3><blockquote><p>服务调用尽量选择本地集群的服务，跨地域集群调用延迟较高。</p><p>使用服务分级存储模型，当本地集群不可访问时，再去访问其他集群。</p></blockquote><p><img src="https://s2.loli.net/2023/02/17/IQBnGyRtp2XYZod.png" alt="image-20230217173645935"></p><h4 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><blockquote><p>添加spring.cloud.nacos.discovery.cluster-name属性</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">JIANGSU</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><h4 id="复制运行配置-1"><a href="#复制运行配置-1" class="headerlink" title="复制运行配置"></a>复制运行配置</h4><p><img src="https://s2.loli.net/2023/02/17/7gQMo5Tx12WHXcl.png" alt="image-20230217175125981"></p><p><img src="https://s2.loli.net/2023/02/17/Ju2NIDPRKlaLtvz.png" alt="image-20230217174723828"></p><h3 id="集群负载均衡"><a href="#集群负载均衡" class="headerlink" title="集群负载均衡"></a>集群负载均衡</h3><h4 id="设置负载均衡IRule为NacosRule"><a href="#设置负载均衡IRule为NacosRule" class="headerlink" title="设置负载均衡IRule为NacosRule"></a>设置负载均衡IRule为NacosRule</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span></span><br></pre></td></tr></table></figure><h4 id="NacosRule负载均衡策略"><a href="#NacosRule负载均衡策略" class="headerlink" title="NacosRule负载均衡策略"></a>NacosRule负载均衡策略</h4><ul><li>优先选择同集群服务实例列表</li><li>本地集群无法找到服务提供者，才去其他集群寻找并报告警告</li><li>确定可用实例列表，采用随机负载均衡策略挑选实例</li></ul><h3 id="权重负载均衡"><a href="#权重负载均衡" class="headerlink" title="权重负载均衡"></a>权重负载均衡</h3><p>由于服务器设备性能存在差异，部分实例所在机器性能较好，需要承担更多的用户请求。</p><p>Nacos提供了权重配置来控制访问频率，权重越大，访问频率越高。</p><p><img src="https://s2.loli.net/2023/02/20/Hc1UAd2hjTmgWvO.png" alt="image-20230220134417692"></p><h4 id="实例权重控制"><a href="#实例权重控制" class="headerlink" title="实例权重控制"></a>实例权重控制</h4><ul><li>Nacos控制台可以设置实例的权重值（0-1之间）</li><li>同集群内的多个实例，权重越高被访问的频率越高</li><li>权重设置为0，则完全不会被访问</li></ul><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>Nacos中服务存储和数据存储的最外层是namespace，用来最外层隔离，隔离不同环境。</p><p><img src="https://s2.loli.net/2023/02/20/YEMlnS7ywCvtejx.png" alt="image-20230220134903522"></p><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><p><img src="https://s2.loli.net/2023/02/20/dz9jGWXh5nkV3tT.png" alt="image-20230220135549579"></p><p><img src="https://s2.loli.net/2023/02/20/GK4bLCBFMNIxAya.png" alt="image-20230220135606369"></p><h4 id="修改配置文件-3"><a href="#修改配置文件-3" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">3c30a7da-2359-490d-90f3-c67f0f64d477</span> <span class="comment"># namespace 命名空间ID</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/20/prSX4TbhMZU35DN.png" alt="image-20230220140152505"></p><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><img src="https://s2.loli.net/2023/02/20/tac1PzhXJnLIZFM.png" alt="image-20230220140325330"></p><h3 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h3><h3 id="Nacos和Eureka的区别"><a href="#Nacos和Eureka的区别" class="headerlink" title="Nacos和Eureka的区别"></a>Nacos和Eureka的区别</h3><p><img src="https://s2.loli.net/2023/02/20/ClPo6IyF5dzNDg7.png" alt="image-20230220141231444"></p><h4 id="临时实例和非临时实例"><a href="#临时实例和非临时实例" class="headerlink" title="临时实例和非临时实例"></a>临时实例和非临时实例</h4><h5 id="配置非临时实例"><a href="#配置非临时实例" class="headerlink" title="配置非临时实例"></a>配置非临时实例</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置是否为临时实例</span></span><br></pre></td></tr></table></figure><blockquote><p>临时实例宕机时，从nacos的服务列表中剔除，而非实例则不会</p></blockquote><p><img src="https://s2.loli.net/2023/02/20/Vxh8pJBLN93WAjz.png" alt="image-20230220155502822"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2023/02/20/xDFbShicjInzULN.png" alt="image-20230220142706896"></p><h5 id="Nacos与Eureka的共同点"><a href="#Nacos与Eureka的共同点" class="headerlink" title="Nacos与Eureka的共同点"></a>Nacos与Eureka的共同点</h5><ul><li>支持服务注册和服务拉取</li><li>支持服务提供者以心跳方式做健康检测</li></ul><h5 id="Nacos与Eureka的区别点"><a href="#Nacos与Eureka的区别点" class="headerlink" title="Nacos与Eureka的区别点"></a>Nacos与Eureka的区别点</h5><ul><li>Nacos支持服务端主动检测提供者状态：<code>临时实例</code>采用<code>心跳</code>模式，<code>非临时实例</code>采用<code>主动检测</code>模式</li><li>临时实例心跳不正常会被剔除，非临时实例不正常时不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><h4 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h4><p><img src="https://s2.loli.net/2023/02/20/3WPvVk8dxKHrcmS.png" alt="image-20230220163338981"></p><h5 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h5><blockquote><p>Nacos的dataid的组成格式以及springboot配置文件中属性对应关系</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务名称-配置版本.文件格式</span></span><br><span class="line"><span class="variable">$&#123;spring.application.name&#125;</span>-<span class="variable">$&#123;spring.profiles.active&#125;</span>.<span class="variable">$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/21/QpcWTDwigRZBKAu.png"></p><p><img src="https://s2.loli.net/2023/02/20/PkN72jMyJrz1h9d.png" alt="image-20230220164853919"></p><h5 id="获取配置步骤"><a href="#获取配置步骤" class="headerlink" title="获取配置步骤"></a>获取配置步骤</h5><p><img src="https://s2.loli.net/2023/02/20/5tFs3jlNR7Cg8oa.png" alt="image-20230220170309580"></p><h6 id="引入Nacos配置管理客户端"><a href="#引入Nacos配置管理客户端" class="headerlink" title="引入Nacos配置管理客户端"></a>引入Nacos配置管理客户端</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Nacos Discovery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Nacos Config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="添加配置文件bootstrap-yml"><a href="#添加配置文件bootstrap-yml" class="headerlink" title="添加配置文件bootstrap.yml"></a>添加配置文件bootstrap.yml</h6><blockquote><p>bootstrap.yml文件是引导文件，优先级高于application.yml，主要对Nacos的作为配置中心的功能进行配置</p></blockquote><p><img src="https://s2.loli.net/2023/02/20/dUuxwMkqXmZLo3D.png" alt="image-20230220171219558"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">demo-order</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 开发环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8848</span> <span class="comment"># Nacos 地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 获取的yaml格式的配置</span></span><br></pre></td></tr></table></figure><h6 id="创建ConfigClientController从Nacos配置中心获取配置信息"><a href="#创建ConfigClientController从Nacos配置中心获取配置信息" class="headerlink" title="创建ConfigClientController从Nacos配置中心获取配置信息"></a>创建ConfigClientController从Nacos配置中心获取配置信息</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/21/8w6TLmPn5xgZ7yK.png" alt="image-20230221135527778"></p><p><img src="https://s2.loli.net/2023/02/21/r8JeAbhCkXNUo6g.png" alt="image-20230221132156988"></p><h4 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h4><blockquote><p>Nacos中的配置文件变更后，微服务无需重启就可以感知</p></blockquote><ul><li>方式一：在<code>@Value</code>注入变量所在类上添加注解<code>@RefreshScope</code></li></ul><p><img src="https://s2.loli.net/2023/02/21/fSQVxLueBgalm8t.png"></p><p><img src="https://s2.loli.net/2023/02/21/1saMEFjSeQTxbCY.png" alt="image-20230221140434067"></p><ul><li>方式二：使用<code>@ConfigurationProperties</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String info;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ConfigInfoProperties configInfoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfoProperties.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/21/zptCNncbefXAuw3.png" alt="image-20230221141822603"></p><h4 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h4><blockquote><p>项目启动时会从Nacos读取多个配置文件，无论profile如何变化，[spring.application.name].[spring.cloud.nacos.config.file-extension]一定会被加载</p></blockquote><ul><li>```yml<br>${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  $&#123;spring.application.name&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://s2.loli.net/2023/02/21/Ph1wIfpRumavdjn.png" alt="image-20230221142231467"></p><p><img src="https://s2.loli.net/2023/02/21/M5UHgs8bvYf49ry.png" alt="image-20230221142933061"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigInfoProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="keyword">private</span> String shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/shared&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shared</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfoProperties.getShared();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/21/VEqmB4zNZrF9AUI.png" alt="image-20230221144050665"></p><p><img src="https://s2.loli.net/2023/02/21/pWBKm6hRC9Z1zY8.png" alt="image-20230221143743961"></p><h5 id="多种配置的优先级"><a href="#多种配置的优先级" class="headerlink" title="多种配置的优先级"></a>多种配置的优先级</h5><ul><li>服务名称-profile.yaml &gt; 服务名称.yaml &gt; 本地配置</li></ul><p><img src="https://s2.loli.net/2023/02/21/SGeJTLmg7aQRydh.png" alt="image-20230221144537596"></p><p><img src="https://s2.loli.net/2023/02/21/AxvcLIFaNMSn7DX.png" alt="image-20230221145027139"></p><h4 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h4><p><img src="https://s2.loli.net/2023/02/21/2uhMaBKvOqH4x9P.webp" alt="img"></p><p><img src="https://s2.loli.net/2023/02/21/kKjWLzgR8rCPd9n.png" alt="image-20230221145236903"></p><h5 id="Nacos节点"><a href="#Nacos节点" class="headerlink" title="Nacos节点"></a>Nacos节点</h5><table><thead><tr><th>节点</th><th>ip地址</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>1.117.34.49</td><td>8845</td></tr><tr><td>nacos2</td><td>1.117.34.49</td><td>8846</td></tr><tr><td>nacos3</td><td>1.117.34.49</td><td>8847</td></tr></tbody></table><h5 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h5><ul><li>搭建数据库</li></ul><p><img src="https://s2.loli.net/2023/02/21/vi6LNhrX2W3pfbA.png" alt="image-20230221151411726"></p><ul><li>容器启动Nacos集群</li></ul><blockquote><p>docker-compose.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span> </span><br><span class="line"><span class="attr">services:</span>  </span><br><span class="line">  <span class="attr">docker-nacos-server-1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos-server-1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8845:8848&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9555:9555&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_PLATFORM:</span> <span class="string">mysql</span> </span><br><span class="line">      <span class="attr">NACOS_SERVERS:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8845</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8846</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8847</span></span><br><span class="line">      <span class="attr">NACOS_APPLICATION_PORT:</span> <span class="number">8845</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_HOST:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_DB_NAME:</span> <span class="string">nacos_config</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">JVM_XMS:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMX:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMN:</span> <span class="string">256m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/nacos-cluster/nacos1/logs:/home/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/nacos-cluster/nacos1/init.d/custom.properties:/home/nacos/init.d/custom.properties</span></span><br><span class="line">  <span class="attr">docker-nacos-server-2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos-server-2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8846:8848&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_PLATFORM:</span> <span class="string">mysql</span> </span><br><span class="line">      <span class="attr">NACOS_SERVERS:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8845</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8846</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8847</span></span><br><span class="line">      <span class="attr">NACOS_APPLICATION_PORT:</span> <span class="number">8845</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_HOST:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_DB_NAME:</span> <span class="string">nacos_config</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">JVM_XMS:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMX:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMN:</span> <span class="string">256m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/nacos-cluster/nacos2/logs:/home/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/nacos-cluster/nacos2/init.d/custom.properties:/home/nacos/init.d/custom.properties</span></span><br><span class="line">  <span class="attr">docker-nacos-server-3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos-server-3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8847:8848&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_PLATFORM:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">NACOS_SERVERS:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8845</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8846</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8847</span></span><br><span class="line">      <span class="attr">NACOS_APPLICATION_PORT:</span> <span class="number">8845</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_HOST:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_DB_NAME:</span> <span class="string">nacos_config</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_SERVICE_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">JVM_XMS:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMX:</span> <span class="string">256m</span></span><br><span class="line">      <span class="attr">JVM_XMN:</span> <span class="string">256m</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/nacos-cluster/nacos3/logs:/home/nacos/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/nacos-cluster/nacos3/init.d/custom.properties:/home/nacos/init.d/custom.properties</span></span><br></pre></td></tr></table></figure><ul><li>nginx反向代理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">upstream nacos-cluster &#123;</span><br><span class="line">    server 1.117.34.49:8845;</span><br><span class="line">    server 1.117.34.49:8846;</span><br><span class="line">    server 1.117.34.49:8847;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    location /nacos &#123;</span><br><span class="line">      proxy_pass http://nacos-cluster</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/21/GzSVUvZg6HqWLfi.png" alt="image-20230221161910758"></p><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="远程调用-1"><a href="#远程调用-1" class="headerlink" title="远程调用"></a>远程调用</h3><h4 id="RestTemplate调用存在的问题"><a href="#RestTemplate调用存在的问题" class="headerlink" title="RestTemplate调用存在的问题"></a>RestTemplate调用存在的问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CommonResult</span> <span class="variable">commonResult</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://demo-user/member/&quot;</span> + omsOrder.getMemberId(), CommonResult.class);</span><br><span class="line"><span class="type">UmsMember</span> <span class="variable">umsMember</span> <span class="operator">=</span> BeanUtil.toBean(commonResult.getData(), UmsMember.class);</span><br></pre></td></tr></table></figure><ul><li>代码可读性和编程体验性差</li><li>URL和参数难以维护</li></ul><h4 id="Fegin介绍"><a href="#Fegin介绍" class="headerlink" title="Fegin介绍"></a>Fegin介绍</h4><blockquote><p>Spring Cloud OpenFeign 是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能。</p><p>Feign是声明式的服务调用工具，我们只需创建一个接口并用注解的方式来配置它，就可以实现对某个服务接口的调用，简化了直接使用RestTemplate来调用服务接口的开发量。Feign具备可插拔的注解支持，同时支持Feign注解、JAX-RS注解及SpringMVC注解。当使用Feign时，Spring Cloud集成了Ribbon和Eureka以提供负载均衡的服务调用及基于Hystrix的服务容错保护功能。</p></blockquote><h5 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="启动类添加-EnableFeignClients来启动Feign客户端功能"><a href="#启动类添加-EnableFeignClients来启动Feign客户端功能" class="headerlink" title="启动类添加@EnableFeignClients来启动Feign客户端功能"></a>启动类添加@EnableFeignClients来启动Feign客户端功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加UserService接口完成服务接口绑定"><a href="#添加UserService接口完成服务接口绑定" class="headerlink" title="添加UserService接口完成服务接口绑定"></a>添加UserService接口完成服务接口绑定</h5><blockquote><p>我们通过@FeignClient注解实现了一个Feign客户端，其中的value为user-service表示这是对demo-user服务的接口调用客户端。我们可以回想下user-service中的UserController，只需将其改为接口，保留原来的SpringMvc注释即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;demo-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/member/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">detail</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用UserService实现服务调用"><a href="#调用UserService实现服务调用" class="headerlink" title="调用UserService实现服务调用"></a>调用UserService实现服务调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CommonResult</span> <span class="variable">commonResult</span> <span class="operator">=</span> userService.detail(omsOrder.getMemberId());</span><br><span class="line"><span class="type">UmsMember</span> <span class="variable">umsMember</span> <span class="operator">=</span> BeanUtil.toBean(commonResult.getData(), UmsMember.class);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/21/JS6rptiAMsmvnWX.png" alt="image-20230221174553914"></p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><blockquote><p>Feign自定义配置覆盖默认配置</p></blockquote><p><img src="https://s2.loli.net/2023/02/21/GqdhyA4TX2gcZPC.png" alt="image-20230221203110311"></p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>feign.Logger.Level</td><td>修改日志级别</td><td>四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>解析HTTP远程调用的返回结果</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>编码HTTP远程调用的请求参数</td></tr><tr><td>feign.Contract</td><td>支持的注解格式</td><td>默认是SpringMVC注解</td></tr><tr><td>feign.Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认没有，使用Ribbon的重试机制</td></tr></tbody></table><h4 id="Feign自定义配置"><a href="#Feign自定义配置" class="headerlink" title="Feign自定义配置"></a>Feign自定义配置</h4><h5 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h5><ul><li>全局配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">client:</span><br><span class="line">config:</span><br><span class="line">default:# 用default是全局配置，用服务名称是局部服务配置</span><br><span class="line">loggerLevel: FULL # 日志级别</span><br></pre></td></tr></table></figure><ul><li>局部配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">client:</span><br><span class="line">config:</span><br><span class="line">demo-user:# 用default是全局配置，用服务名称是局部服务配置</span><br><span class="line">loggerLevel: FULL # 日志级别</span><br></pre></td></tr></table></figure><h5 id="Bean方式"><a href="#Bean方式" class="headerlink" title="Bean方式"></a>Bean方式</h5><blockquote><p>配置类声明一个Bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignClientConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>全局配置，启动类@EnableFeignClient注解中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class)</span></span><br></pre></td></tr></table></figure><ul><li>局部配置，绑定接口@FeignClient注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;demo-user&quot;, configuration = FeignClientConfiguration.class)</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/22/PdqQRjZI6HcA1Yf.png" alt="image-20230222112112606"></p><p><img src="https://s2.loli.net/2023/02/22/qIc8lVYPDHfZXTw.png" alt="image-20230222113524115"></p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="Feign底层客户端实现"><a href="#Feign底层客户端实现" class="headerlink" title="Feign底层客户端实现"></a>Feign底层客户端实现</h4><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>优化Feign的性能主要包括</p><ul><li>使用<code>连接池</code>代替默认的URLConnection</li><li>日志级别，最好使用basic或none</li></ul><h4 id="添加HttpClient的支持"><a href="#添加HttpClient的支持" class="headerlink" title="添加HttpClient的支持"></a>添加HttpClient的支持</h4><h5 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HttpClient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置连接池"><a href="#配置连接池" class="headerlink" title="配置连接池"></a>配置连接池</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span>  <span class="comment"># 最大连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>方式一-继承：给消费者的FeignClient和提供者的Controller定义统一的父接口作为标准</li></ul><p><img src="https://s2.loli.net/2023/02/22/adLFU7yGViRo6uv.png" alt="image-20230222141439427"></p><ul><li>方式二-抽取：将FeignClient抽取为独立通用模块，默认的Feign都放到这个模块中提供给消费者使用</li></ul><p><img src="https://s2.loli.net/2023/02/22/PvsKTfq24VgGx1d.png" alt="image-20230222141736918"></p><p><img src="https://s2.loli.net/2023/02/22/elXqt1Cud7RH452.png" alt="image-20230222142305225"></p><p><img src="https://s2.loli.net/2023/02/22/qzRisBby6jwVfYP.png" alt="image-20230222141906745"></p><blockquote><p>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用</p></blockquote><ul><li>方法一：指定FeignClient所在包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.example.demo.feign&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>方法二：指定FeignClient字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients=&#123;UserService.class&#125;)</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/22/IyKXMYvHZTamoWl.png" alt="image-20230222143607565"></p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><blockquote><p>Feign中的服务降级只需要Feign客户端定义的接口添加一个服务降级处理的实现类即可</p></blockquote><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Sentinel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加服务降级实现类UserFallbackService"><a href="#添加服务降级实现类UserFallbackService" class="headerlink" title="添加服务降级实现类UserFallbackService"></a>添加服务降级实现类UserFallbackService</h4><blockquote><p>继承接口并对接口中的每个实现方法进行了服务降级逻辑的实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFallbackService</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">detail</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">UmsMember</span> <span class="variable">defaultMember</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsMember</span>();</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(defaultMember);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置服务降级处理类为UserFallbackService"><a href="#设置服务降级处理类为UserFallbackService" class="headerlink" title="设置服务降级处理类为UserFallbackService"></a>设置服务降级处理类为UserFallbackService</h4><blockquote><p>修改@FeignClient注解中的参数，设置fallback为UserFallbackService.class即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;demo-user&quot;, fallback = UserFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/member/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">detail</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改配置文件-4"><a href="#修改配置文件-4" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#在Feign中开启Hystrixs</span></span><br></pre></td></tr></table></figure><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><blockquote><p>Spring Cloud Gateway 为 SpringBoot 应用提供了API网关支持，具有强大的智能路由与过滤器功能。</p></blockquote><h3 id="Gateway简介"><a href="#Gateway简介" class="headerlink" title="Gateway简介"></a>Gateway简介</h3><blockquote><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等。</p></blockquote><h4 id="网关功能"><a href="#网关功能" class="headerlink" title="网关功能"></a>网关功能</h4><ul><li>身份认证和权限校验</li><li>服务路由和负载均衡</li><li>请求限流和服务熔断</li></ul><p><img src="https://s2.loli.net/2023/02/22/cnSv739yWdBMhjZ.png" alt="image-20230222165747255"></p><p>Spring Cloud Gateway 具有如下特性：</p><ul><li>基于Spring Framework 5, Project Reactor 和 Spring Boot 2.0 进行构建；</li><li>动态路由：能够匹配任何请求属性；</li><li>可以对路由指定 Predicate（断言）和 Filter（过滤器）；</li><li>集成Hystrix的断路器功能；</li><li>集成 Spring Cloud 服务发现功能；</li><li>易于编写的 Predicate（断言）和 Filter（过滤器）；</li><li>请求限流功能；</li><li>支持路径重写。</li></ul><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li>Route（路由）：路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由；</li><li>Predicate（断言）：指的是Java 8 的 Function Predicate。 输入类型是Spring框架中的ServerWebExchange。 这使开发人员可以匹配HTTP请求中的所有内容，例如请求头或请求参数。如果请求与断言相匹配，则进行路由；</li><li>Filter（过滤器）：指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前后对请求进行修改。</li></ul><h3 id="搭建网关模块"><a href="#搭建网关模块" class="headerlink" title="搭建网关模块"></a>搭建网关模块</h3><h4 id="添加依赖-2"><a href="#添加依赖-2" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Nacos Discovery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Gateway --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Loadbalancer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加路由配置"><a href="#添加路由配置" class="headerlink" title="添加路由配置"></a>添加路由配置</h4><blockquote><p>Gateway提供了两种不同的方式用于配置路由，一种是通过yml文件来配置，另一种通过Java Bean来配置。</p></blockquote><ul><li>使用配置文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span> <span class="comment"># 网关端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-service</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">demo-user</span> <span class="comment"># 自定义路由id</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://demo-user</span> <span class="comment"># 路由目标地址 lb是loadbalance的缩写 后面紧跟服务名称(lb需要引入loadbalance依赖)</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言：判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/member/**</span> <span class="comment"># 按照路径匹配</span></span><br></pre></td></tr></table></figure><ul><li>使用Java Bean配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customizeRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> routeLocatorBuilder.routes()</span><br><span class="line">                .route(<span class="string">&quot;demo-order&quot;</span>,</span><br><span class="line">                        r -&gt; r.path(<span class="string">&quot;/order/**&quot;</span>)</span><br><span class="line">                                .uri(<span class="string">&quot;lb://demo-order&quot;</span>)</span><br><span class="line">                ).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/23/JGPphIOc5vbF4SL.png" alt="image-20230223103617526"></p><p><img src="https://s2.loli.net/2023/02/23/kuM4KzOCF65eAJP.png" alt="image-20230223103659518"></p><h5 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h5><ul><li>路由id：路由唯一标识</li><li>uri：路由目的地，支持lb和http两种</li><li>predicates：路由断言，判断请求是否符合要求，符合则转发到路由目的地</li><li>filters：路由过滤器，处理请求或响应</li></ul><h3 id="路由断言工厂"><a href="#路由断言工厂" class="headerlink" title="路由断言工厂"></a>路由断言工厂</h3><p><img src="https://s2.loli.net/2023/02/23/oe2jTSkc3DJyYAN.png" alt="image-20230223122712339"></p><blockquote><p>配置文件的断言规则是字符串，这些字符串是被Predicate Factory读取并处理，转变为路由判断的条件。</p><p>Path按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理。</p><p><code>PredicateFacrtory</code>的作用是：读取用户定义的断言条件，对于请求做出判断。</p></blockquote><h4 id="Route-Predicate的使用"><a href="#Route-Predicate的使用" class="headerlink" title="Route Predicate的使用"></a>Route Predicate的使用</h4><blockquote><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。 Spring Cloud Gateway包括许多内置的Route Predicate工厂。 所有这些Predicate都与HTTP请求的不同属性匹配。 多个Route Predicate工厂可以进行组合，下面我们来介绍下一些常用的Route Predicate。    </p></blockquote><p><img src="https://s2.loli.net/2023/02/23/CrBKex9LJUaZy3Y.png" alt="image-20230223133936751"></p><h5 id="After-Route-Predicate"><a href="#After-Route-Predicate" class="headerlink" title="After Route Predicate"></a>After Route Predicate</h5><blockquote><p>在指定时间之后的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">After=2019-09-24T16:30:00+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><h5 id="Before-Route-Predicate"><a href="#Before-Route-Predicate" class="headerlink" title="Before Route Predicate"></a>Before Route Predicate</h5><blockquote><p>在指定时间之前的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">Before=2019-09-24T16:30:00+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><h5 id="Between-Route-Predicate"><a href="#Between-Route-Predicate" class="headerlink" title="Between Route Predicate"></a>Between Route Predicate</h5><blockquote><p>在指定时间区间内请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">Between=2019-09-24T16:30:00+08:00[Asia/Shanghai],</span> <span class="number">2019-09-25T16:30:00+08:00</span>[<span class="string">Asia/Shanghai</span>]</span><br></pre></td></tr></table></figure><h5 id="Cookie-Route-Predicate"><a href="#Cookie-Route-Predicate" class="headerlink" title="Cookie Route Predicate"></a>Cookie Route Predicate</h5><blockquote><p>带有指定Cookie的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Cookie=username,user</span> <span class="comment"># 使用curl工具发送带有cookie为username=user的请求可以匹配该路由</span></span><br></pre></td></tr></table></figure><h5 id="Header-Route-Predicate"><a href="#Header-Route-Predicate" class="headerlink" title="Header Route Predicate"></a>Header Route Predicate</h5><blockquote><p>带有指定请求头的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span> <span class="comment"># 使用curl工具发送带有请求头为X-Request-Id:123的请求可以匹配该路由</span></span><br></pre></td></tr></table></figure><h5 id="Host-Route-Predicate"><a href="#Host-Route-Predicate" class="headerlink" title="Host Route Predicate"></a>Host Route Predicate</h5><blockquote><p>带有指定Host的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Host=**.somehost.com</span> <span class="comment">#使用curl工具发送带有请求头为Host:www.macrozheng.com的请求可以匹配该路由</span></span><br></pre></td></tr></table></figure><h5 id="Method-Route-Predicate"><a href="#Method-Route-Predicate" class="headerlink" title="Method Route Predicate"></a>Method Route Predicate</h5><blockquote><p>发送指定方法的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Method=Get</span> <span class="comment"># 使用curl工具发送GET请求可以匹配该路由</span></span><br></pre></td></tr></table></figure><h5 id="Path-Route-Predicate"><a href="#Path-Route-Predicate" class="headerlink" title="Path Route Predicate"></a>Path Route Predicate</h5><blockquote><p>发送指定路径的请求会匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 使用curl工具发送/user/**路径请求可以匹配该路由</span></span><br></pre></td></tr></table></figure><h5 id="Query-Route-Predicate"><a href="#Query-Route-Predicate" class="headerlink" title="Query Route Predicate"></a>Query Route Predicate</h5><blockquote><p>带指定查询参数的请求可以匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Query=username</span> <span class="comment"># 使用curl工具发送带username=?查询参数的请求可以匹配该路由</span></span><br></pre></td></tr></table></figure><h5 id="RemoteAddr-Route-Predicate"><a href="#RemoteAddr-Route-Predicate" class="headerlink" title="RemoteAddr Route Predicate"></a>RemoteAddr Route Predicate</h5><blockquote><p>从指定远程地址发起的请求可以匹配该路由</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure><h5 id="Weight-Route-Predicate"><a href="#Weight-Route-Predicate" class="headerlink" title="Weight Route Predicate"></a>Weight Route Predicate</h5><blockquote><p>使用权重来路由相应请求，以下表示有80%的请求会被路由到localhost:8201，20%会被路由到localhost:8202。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">gateway:</span></span><br><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://localhost:8201</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://localhost:8202</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h3><blockquote><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理。</p><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生。</p></blockquote><p><img src="https://s2.loli.net/2023/02/23/Pb48FxHzZyoJltp.png" alt="image-20230223142303381"></p><p><img src="https://s2.loli.net/2023/02/23/doKPxCQm4JLgSUI.png" alt="image-20230223150554554"></p><h4 id="配置方式-1"><a href="#配置方式-1" class="headerlink" title="配置方式"></a>配置方式</h4><ul><li>局部配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"> <span class="attr">gateway:</span></span><br><span class="line">        <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">demo-user</span> <span class="comment"># 自定义路由id</span></span><br><span class="line">         <span class="attr">uri:</span> <span class="string">lb://demo-user</span> <span class="comment"># 路由目标地址 lb是loadbalance的缩写 后面紧跟服务名称</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器配置</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=username,</span> <span class="string">user</span> <span class="comment"># 请求添加参数, &#x27;,&#x27;前面为key,后面为value</span></span><br></pre></td></tr></table></figure><ul><li>全局配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default-filters:</span> <span class="comment"># 全局配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">AddRequestParameter=username,</span> <span class="string">user</span> <span class="comment"># 请求添加参数, &#x27;,&#x27;前面为key,后面为value</span></span><br></pre></td></tr></table></figure><h4 id="AddRequestParameter-GatewayFilter"><a href="#AddRequestParameter-GatewayFilter" class="headerlink" title="AddRequestParameter GatewayFilter"></a>AddRequestParameter GatewayFilter</h4><blockquote><p>给请求添加参数的过滤器</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">demo-user</span> <span class="comment"># 自定义路由id</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://demo-user</span> <span class="comment"># 路由目标地址 lb是loadbalance的缩写 后面紧跟服务名称</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 过滤器配置</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=username,</span> <span class="string">user</span> <span class="comment"># 请求添加参数, &#x27;,&#x27;前面为key,后面为value</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言：判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/member/**</span> <span class="comment"># 按照路径匹配</span></span><br></pre></td></tr></table></figure><h4 id="AddRequestHeader-GatewayFilter"><a href="#AddRequestHeader-GatewayFilter" class="headerlink" title="AddRequestHeader GatewayFilter"></a>AddRequestHeader GatewayFilter</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span> <span class="comment"># 过滤器配置</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">AddRequestParameter=username,</span> <span class="string">user</span> <span class="comment"># 请求添加参数, &#x27;,&#x27;前面为key,后面为value</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/23/IcMxYOdrKqTNn3G.png" alt="image-20230223150417933"></p><h4 id="StripPrefix-GatewayFilter"><a href="#StripPrefix-GatewayFilter" class="headerlink" title="StripPrefix GatewayFilter"></a>StripPrefix GatewayFilter</h4><blockquote><p>对指定数量的路径前缀进行去除的过滤器</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">StripPrefix=2</span> <span class="comment"># 将以/demo-user/开头的请求路径去除两位，即curl http://localhost:9201/demo-user/a/user/1相当于请求curl http://localhost:9201/user/1</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/23/WuAjyOrqbPF4NSi.png" alt="image-20230223144515350"></p><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><blockquote><p>全局过滤器的作用是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用。区别在于GatewayFilter通过配置定义，处理逻辑是固定的。定义方式是实现GlobalFilter接口。</p></blockquote><p><img src="https://s2.loli.net/2023/02/23/RrhyGW6xCXdPkOj.png" alt="image-20230223154041790"></p><h4 id="简单拦截认证"><a href="#简单拦截认证" class="headerlink" title="简单拦截认证"></a>简单拦截认证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理当前请求，必要的话将GatewayFilterChain将请求交给下个过滤器处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，用于获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 过滤器链，用于将请求委托给下一个过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回标识当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求ServerHttpRequest对象</span></span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();</span><br><span class="line">        <span class="comment">// 获取请求参数中的 authorization 参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> queryParams.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拦截</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/23/yXPQwjCaufYivI2.png" alt="image-20230223160704698"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><ul><li><p>全局过滤器的作用</p><blockquote><p>对所有路由生效的过滤器并可以自定义处理逻辑</p></blockquote></li><li><p>实现全局过滤器的步骤</p><ul><li>继承GlobalFilter接口并实现方法自定义处理逻辑</li><li>添加@Order注解或实现Ordered接口说明过滤链顺序</li></ul></li></ul><p><img src="https://s2.loli.net/2023/02/23/LgGtPThVB9q7DuE.png" alt="image-20230223160948210"></p><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><blockquote><p>请求进入网关会遇到三种类型的路由器：当前路由的过滤器、DefaultFilter以及GlobalFilter。</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter合并到一个过滤器链（集合）中，排序后依次执行每个过滤器。</p></blockquote><p><img src="https://s2.loli.net/2023/02/23/eM2kjxNB9pVlQoY.png" alt="image-20230223174035138"></p><h4 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h4><ul><li>每个过滤器必须指定一个int类型的order值，ordre值越小，优先级越高，执行顺序越靠前</li><li>GlobalFilter通过实现ordered接口或者添加@Order注解来指定order值</li><li>路由过滤器和defaultFilter的order由spring指定，默认是按照声明顺序从1递增</li><li>当过滤器的order值一样时，会按照defaultFilter &gt; 路由过滤器 &gt; GlobaFilter的顺序执行</li></ul><p><img src="https://s2.loli.net/2023/02/23/GTLbgsZHfVjBvQ5.png" alt="image-20230223174222332"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><ul><li>order值越小，优先级越高</li><li>当order值一样时，顺序是defaultFilter最先，然后是局部路由过滤器，最后是全局过滤器</li></ul><p><img src="https://s2.loli.net/2023/02/23/Qwrh5clUjXO7JiD.png" alt="image-20230223174238394"></p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><blockquote><p>跨域问题：协议、主机以及端口任一不同，浏览器禁止请求的发起者和服务端发生跨域请求。请求被浏览器拦截的问题。</p></blockquote><h4 id="跨越问题处理"><a href="#跨越问题处理" class="headerlink" title="跨越问题处理"></a>跨越问题处理</h4><p><img src="https://s2.loli.net/2023/02/23/YfyFOVi245GTdse.png" alt="image-20230223175700001"></p><blockquote><p>网关处理跨域同样采用CORS方案，只需简单的配置即可实现</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求（浏览器询问服务端是否允许跨域的请求）被拦截问题</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://1.117.34.49:9001&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><h4 id="网关跨域配置核心参数"><a href="#网关跨域配置核心参数" class="headerlink" title="网关跨域配置核心参数"></a>网关跨域配置核心参数</h4><p><img src="https://s2.loli.net/2023/02/23/DIUpCibNgozQqrB.png" alt="image-20230223180424312"></p><ul><li>允许跨域的域名</li><li>允许跨域的请求头</li><li>允许跨域的请求方式</li><li>是否允许使用cookie</li><li>跨域的有效期</li></ul><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><blockquote><p>Seata是Alibaba开源的一款分布式解决方案，致力于提供高性能和简单易用的分布式事务服务。</p><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/5EPZ2XUbJmkSut9.png" alt="image"></p><h3 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h3><h4 id="事务ACID原则"><a href="#事务ACID原则" class="headerlink" title="事务ACID原则"></a>事务ACID原则</h4><p><img src="https://s2.loli.net/2023/03/27/DmWGZSpebiEgIAq.png" alt="image-20230327092539294"></p><blockquote><p>在微服务架构中由于全局数据一致性没法保证产生的问题就是分布式事务问题。简单来说，在分布式系统下，一次业务操作需要操作多个数据源或需要进行远程调用，每个服务是一个分支事务，要保证所有分支事务最终状态一致性，就会产生分布式事务问题。</p></blockquote><ul><li><h4 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h4></li></ul><blockquote><p>单体应用中，一个业务操作需要调用三个模块完成，此时数据的一致性由<code>本地事务</code>保证。</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/xMHeGCagJIt6Vzw.png" alt="img"></p><ul><li><h4 id="微服务应用"><a href="#微服务应用" class="headerlink" title="微服务应用"></a>微服务应用</h4></li></ul><blockquote><p>随着业务需求的变化，单体应用被拆分为微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用独立的数据源，业务操作需要调用三个服务完成。此时每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题无法保证。</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/Y1BUIq7VTfuKS8z.png" alt="img"></p><blockquote><p>微服务下单业务中，下单时会调用订单服务，创建订单并写入数据库。然后订单服务调用账户服务和库存服务：</p><ul><li>账户服务负责扣减用户余额</li><li>库存服务负责扣减商品库存</li></ul></blockquote><p><img src="https://s2.loli.net/2023/03/27/uG8VFdHsxyS5NeR.png" alt="image-20230327092727554"></p><h3 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h3><h4 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h4><blockquote><p>1998年，加州大学的计算机科学家Eric Brewer提出，分布式系统有三个指标：</p><ul><li>Consistency（一致性）</li><li>Availiability（可用性）</li><li>Partition tolerance（分区容错性）</li></ul><p>分布式系统无法同时满足这三个指标，这个结论即CAP定理</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/ZQtPFubOGRv68xh.png" alt="image-20230327094538067"></p><h5 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h5><blockquote><p>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须是一致的。</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/ZqhUgIuEaMStRJC.png" alt="image-20230327094955301"></p><h5 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h5><blockquote><p>Availablility（可用性）：用户访问集群中的任意健康节点，必须得到响应，而不是超时或者拒绝</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/JykObT5gZjpm69M.png" alt="image-20230327095433945"></p><h5 id="Partition-tolerance"><a href="#Partition-tolerance" class="headerlink" title="Partition tolerance"></a>Partition tolerance</h5><blockquote><p>Partion（分区）：因为网络故障或者其他原因导致分布式系统中的部分节点与其他节点失去连接，形成独立分区。</p><p>Tolerance（容错）：在集群出现分区时，整个系统要持续对外提供服务。</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/896uDjmScyWv5lh.png" alt="image-20230327100041330"></p><h5 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h5><h6 id="CAP定理内容"><a href="#CAP定理内容" class="headerlink" title="CAP定理内容"></a>CAP定理内容</h6><ul><li><p>分布式系统节点通过网络连接，一定会出现分区问题</p></li><li><p>当分区出现时，系统的一致性和可用性无法同时满足</p></li></ul><h6 id="思考：ElasticSearch集群时CP还是AP"><a href="#思考：ElasticSearch集群时CP还是AP" class="headerlink" title="思考：ElasticSearch集群时CP还是AP"></a>思考：ElasticSearch集群时CP还是AP</h6><blockquote><p>ElasticSearch集群出现分区时，故障节点会被剔除集群，数据分配会重新分配到其他节点，保证数据一致。因此是低可用性，高一致性，属于CP</p></blockquote><h4 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h4><p>Base理论是对CAP的一种解决思路，包含三个思想：</p><ul><li>Basically Available（基本可用）：分布式系统中出现故障时，允许损失部分可用性，即保证核心可用</li><li>Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态</li><li>Eventually Consistent（最终一致性）：虽然无法保证一致性，但是在软状态结束后，最终达到数据一致</li></ul><p>分布式事务最大的问题是各个子事务的一致性问题，可以借鉴CAP定理和BASE理论：</p><ul><li>AP模式：各个事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致</li><li>CP模式：各个子事务执行后相互等待，同时提交，同时回滚，达成强一致，但事务等待过程中，处于弱可用状态</li></ul><p><img src="https://s2.loli.net/2023/03/27/sxw3IiluczBbdnU.png" alt="image-20230327101729889"></p><h5 id="分布式事务模型"><a href="#分布式事务模型" class="headerlink" title="分布式事务模型"></a>分布式事务模型</h5><blockquote><p>解决分布式事务，各个子系统之间必须可以感知到彼此的事务状态，才能保证状态一致，因此需要一个事务协调者来协调每一个事务的参与者（即子系统事务，称为分支事务，有关联的各个分支事务一起称为全局事务）。</p></blockquote><p><img src="https://s2.loli.net/2023/03/27/sduFmnzDyhH5fcO.png" alt="image-20230327102852559"></p><h5 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h5><h6 id="BASE理论的三个思想："><a href="#BASE理论的三个思想：" class="headerlink" title="BASE理论的三个思想："></a>BASE理论的三个思想：</h6><ul><li>基本可用</li><li>软状态</li><li>最终一致</li></ul><h6 id="解决分布式事务的思想和模型："><a href="#解决分布式事务的思想和模型：" class="headerlink" title="解决分布式事务的思想和模型："></a>解决分布式事务的思想和模型：</h6><ul><li>全局事务：整个分布式事务</li><li>分支事务：分布式事务中包含的每个子系统的事务</li><li>最终一致思想：各分支事务分别执行并提交，如果有不一致的情况，再采用弥补措施恢复数据，实现最终一致</li><li>强一致思想：各分支事务执行完业务不要提交，等待彼此结果后统一提交或回滚</li></ul><p><img src="https://s2.loli.net/2023/03/27/7xMgzkZeXG4BR5P.png" alt="image-20230327103420713"></p><h3 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h3><h4 id="二阶段提交-2PC"><a href="#二阶段提交-2PC" class="headerlink" title="二阶段提交-2PC"></a>二阶段提交-2PC</h4><p>2PC(2 prepare-commit)通过引入一个<code>事务协调器</code>来协调各个本地事务即<code>数据参与者</code>的提交和回滚。</p><h5 id="第一阶段-准备阶段："><a href="#第一阶段-准备阶段：" class="headerlink" title="第一阶段-准备阶段："></a>第一阶段-准备阶段：</h5><blockquote><p>事务协调器会向每个事务参与者发起一个开启事务的命令，每个事务参与者执行准备操作，然后再向事务协调者回复是否准备完成。此阶段不会提交本地事务，但是资源会被锁住。</p></blockquote><h5 id="第二阶段-提交阶段："><a href="#第二阶段-提交阶段：" class="headerlink" title="第二阶段-提交阶段："></a>第二阶段-提交阶段：</h5><blockquote><p>事务协调器收到每个事务参与者的回复后，统计每个参与者的回复，如果每个参与者都回复可以提交，那么事务协调器会发送提交命令，参与者正式提交本地事务，释放所有资源，结束全局事务。如果有一个参与者拒绝提交，那么事务协调器发送回滚命令，所有参与者回滚本地事务，待全部回滚完成，释放资源，取消全局事务。</p></blockquote><h6 id="事务提交流程"><a href="#事务提交流程" class="headerlink" title="事务提交流程"></a>事务提交流程</h6><p><img src="https://s2.loli.net/2023/03/27/IFgbSlZPjLBEAwG.webp" alt="img03.png"></p><h6 id="事务回滚流程"><a href="#事务回滚流程" class="headerlink" title="事务回滚流程"></a>事务回滚流程</h6><p><img src="https://s2.loli.net/2023/03/27/rKzPyFsvbZ3Xmcj.webp" alt="img04.png"></p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul><li><code>同步阻塞</code>会消耗性能</li><li><code>协调者故障问题</code>，一旦协调器发生故障，所有参与者处理资源锁定状态，那么所有参与者处理资源锁定状态，所有参与者都会被阻塞</li><li><code>网络问题</code>导致命令没有收到，导致某些事务执行者没有提交</li></ul><h4 id="三阶段提交-3PC"><a href="#三阶段提交-3PC" class="headerlink" title="三阶段提交-3PC"></a>三阶段提交-3PC</h4><p>三阶段提交时在二阶段提交基础上的改进版本，引入了超时机制，解决了二阶段单点故障的问题，。3PC分为三个阶段：<code>CanCommit</code>,<code>PreCommit</code>,<code>DoCommit</code>。核心思想是在PreCommited时并不会锁定资源，除非所有参与者都同意了，才开始锁资源。</p><h5 id="第一阶段-CanCommit阶段："><a href="#第一阶段-CanCommit阶段：" class="headerlink" title="第一阶段-CanCommit阶段："></a>第一阶段-CanCommit阶段：</h5><blockquote><p>协调者向执行者发送CanCommit请求，询问是否可以执行事务提交操作，然后开始等待执行者响应。执行者接收到请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回Yes响应并进入预备状态，否则返回No。</p></blockquote><h5 id="第二阶段-PreCommit阶段："><a href="#第二阶段-PreCommit阶段：" class="headerlink" title="第二阶段-PreCommit阶段："></a>第二阶段-PreCommit阶段：</h5><blockquote><p>协调者根据执行者的反应情况来决定是否可以进入第二阶段事务的PreCommit操作。如果所有的执行者都返回Yes，则协调者向所有执行者发送PreCommit请求，并进入Prepared阶段，执行者接收到请求后，会执行事务操作，并将undo和redo信息记录到事务日志中，如果成功执行，则返回成功响应。</p><p>如果所有执行者至少有一个返回No，则协调者向所有执行者发送abort请求，所有的执行者在收到请求超过一段时间没有收到任何请求时，会直接中断事务。</p></blockquote><h5 id="第三阶段-DoCommit阶段："><a href="#第三阶段-DoCommit阶段：" class="headerlink" title="第三阶段-DoCommit阶段："></a>第三阶段-DoCommit阶段：</h5><blockquote><p>此阶段是进行真正的事务提交阶段。协调者接收到所有执行者发送的成功响应。阶段从</p></blockquote><h4 id="TTC事务模型"><a href="#TTC事务模型" class="headerlink" title="TTC事务模型"></a>TTC事务模型</h4><blockquote><p>TTC补偿事务：Try、Confirm、Cancel</p></blockquote><h5 id="Try：尝试，即尝试预留资源，锁定资源"><a href="#Try：尝试，即尝试预留资源，锁定资源" class="headerlink" title="Try：尝试，即尝试预留资源，锁定资源"></a>Try：尝试，即尝试预留资源，锁定资源</h5><h5 id="Confirm：确认，即执行预留的资源，如果执行失败会重试"><a href="#Confirm：确认，即执行预留的资源，如果执行失败会重试" class="headerlink" title="Confirm：确认，即执行预留的资源，如果执行失败会重试"></a>Confirm：确认，即执行预留的资源，如果执行失败会重试</h5><h5 id="Cancel：取消，撤销预留的资源，如果执行失败会重试"><a href="#Cancel：取消，撤销预留的资源，如果执行失败会重试" class="headerlink" title="Cancel：取消，撤销预留的资源，如果执行失败会重试"></a>Cancel：取消，撤销预留的资源，如果执行失败会重试</h5><p><img src="https://s2.loli.net/2023/03/27/AOVF31wzDqSXLPH.webp" alt="img05.png"></p><h3 id="Seata-1"><a href="#Seata-1" class="headerlink" title="Seata"></a>Seata</h3><blockquote><p>Seata是2019年1月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案致力于提供高可用和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p></blockquote><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><p>Seata事务管理中有三个重要的角色：</p><ul><li>TC（Transaction Coordinatoe）-事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚</li><li>TM（Transaction Manager）-事务管理器：定义全局事务的范围、开始全局事务、提交或回滚全局事务</li><li>RM（Resource Manager）-资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务的状态，并驱动分支事务提交或回滚</li></ul><p><img src="https://s2.loli.net/2023/03/27/fmriNtw6CFa1XSn.png" alt="image-20230327114354263"></p><p>Seata提供了四种不同的分布式事务解决方案：</p><ul><li>XA模式：强一致性分阶段事务模型，牺牲了一定的可用性，无业务侵入</li><li>TTC模式：最终一致的分阶段事务模式，有业务侵入</li><li>AT模式：最终一致的分阶段事务模式，无业务侵入</li><li>SAGA模式：长事务模式，有业务侵入</li></ul><p><img src="https://s2.loli.net/2023/03/27/L4a7AdzmUDRXJQ1.png" alt="image-20230327124043512"></p><h4 id="部署Seata-Server"><a href="#部署Seata-Server" class="headerlink" title="部署Seata Server"></a>部署Seata Server</h4><h6 id="MySQL创建seata数据库并创建表"><a href="#MySQL创建seata数据库并创建表" class="headerlink" title="MySQL创建seata数据库并创建表"></a>MySQL创建<code>seata</code>数据库并创建表</h6><p><img src="https://s2.loli.net/2023/03/27/Lv4kcogTuGSEezq.png" alt="image-20230327131720257"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- the table to store GlobalSession data</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `global_table`</span><br><span class="line">(</span><br><span class="line">    `xid`                       <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `transaction_id`            <span class="type">BIGINT</span>,</span><br><span class="line">    `status`                    TINYINT      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `application_id`            <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `transaction_service_group` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `transaction_name`          <span class="type">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">    `timeout`                   <span class="type">INT</span>,</span><br><span class="line">    `begin_time`                <span class="type">BIGINT</span>,</span><br><span class="line">    `application_data`          <span class="type">VARCHAR</span>(<span class="number">2000</span>),</span><br><span class="line">    `gmt_create`                DATETIME,</span><br><span class="line">    `gmt_modified`              DATETIME,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`xid`),</span><br><span class="line">    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),</span><br><span class="line">    KEY `idx_transaction_id` (`transaction_id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store BranchSession data</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `branch_table`</span><br><span class="line">(</span><br><span class="line">    `branch_id`         <span class="type">BIGINT</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `xid`               <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `transaction_id`    <span class="type">BIGINT</span>,</span><br><span class="line">    `resource_group_id` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `resource_id`       <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    `branch_type`       <span class="type">VARCHAR</span>(<span class="number">8</span>),</span><br><span class="line">    `status`            TINYINT,</span><br><span class="line">    `client_id`         <span class="type">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">    `application_data`  <span class="type">VARCHAR</span>(<span class="number">2000</span>),</span><br><span class="line">    `gmt_create`        DATETIME(<span class="number">6</span>),</span><br><span class="line">    `gmt_modified`      DATETIME(<span class="number">6</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`branch_id`),</span><br><span class="line">    KEY `idx_xid` (`xid`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- the table to store lock data</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `lock_table`</span><br><span class="line">(</span><br><span class="line">    `row_key`        <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `xid`            <span class="type">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">    `transaction_id` <span class="type">BIGINT</span>,</span><br><span class="line">    `branch_id`      <span class="type">BIGINT</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource_id`    <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    `table_name`     <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    `pk`             <span class="type">VARCHAR</span>(<span class="number">36</span>),</span><br><span class="line">    `status`         TINYINT      <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0:locked ,1:rollbacking&#x27;</span>,</span><br><span class="line">    `gmt_create`     DATETIME,</span><br><span class="line">    `gmt_modified`   DATETIME,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`row_key`),</span><br><span class="line">    KEY `idx_status` (`status`),</span><br><span class="line">    KEY `idx_branch_id` (`branch_id`),</span><br><span class="line">    KEY `idx_xid` (`xid`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `distributed_lock`</span><br><span class="line">(</span><br><span class="line">    `lock_key`       <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `lock_value`     <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `expire`         <span class="type">BIGINT</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`lock_key`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="keyword">VALUES</span> (<span class="string">&#x27;AsyncCommitting&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="keyword">VALUES</span> (<span class="string">&#x27;RetryCommitting&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="keyword">VALUES</span> (<span class="string">&#x27;RetryRollbacking&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class="keyword">VALUES</span> (<span class="string">&#x27;TxTimeoutCheck&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h6 id="nacos新增配置文件seataServer-properties"><a href="#nacos新增配置文件seataServer-properties" class="headerlink" title="nacos新增配置文件seataServer.properties"></a>nacos新增配置文件<code>seataServer.properties</code></h6><p><img src="https://s2.loli.net/2023/03/27/dy35CMig7eomFnH.png" alt="image-20230327140141242"></p><h6 id="docker部署seata"><a href="#docker部署seata" class="headerlink" title="docker部署seata"></a>docker部署seata</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name seata \</span><br><span class="line">-p 8091:8091 \</span><br><span class="line">-d seataio/seata-server:1.4.2</span><br></pre></td></tr></table></figure><h6 id="拷贝容器配置文件到宿主机"><a href="#拷贝容器配置文件到宿主机" class="headerlink" title="拷贝容器配置文件到宿主机"></a>拷贝容器配置文件到宿主机</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp seata:/seata-server/resources/registry.conf /mydata/seata/conf/</span><br></pre></td></tr></table></figure><h6 id="编辑配置文件-3"><a href="#编辑配置文件-3" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # 注册中心：file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    application = &quot;seata-server&quot;</span><br><span class="line">    serverAddr = &quot;1.117.34.49:8848&quot;</span><br><span class="line">    group = &quot;DEFAULT_GROUP&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # 配置中心：file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;1.117.34.49:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    group = &quot;DEFAULT_GROUP&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">    dataId = &quot;seataServer.properties&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在-mydata-seata-目录下创建docker-compose-yml文件"><a href="#在-mydata-seata-目录下创建docker-compose-yml文件" class="headerlink" title="在/mydata/seata/目录下创建docker-compose.yml文件"></a>在/mydata/seata/目录下创建docker-compose.yml文件</h6><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">seata-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">seataio/seata-server:1.4.2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8091:8091&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEATA_IP=1.117.34.49</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SEATA_PORT=8091</span>  </span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/mydata/seata/conf/registry.conf:/seata-server/resources/registry.conf&quot;</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8091</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">seata-server</span></span><br></pre></td></tr></table></figure><h6 id="重新运行seata"><a href="#重新运行seata" class="headerlink" title="重新运行seata"></a>重新运行seata</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f seata</span><br><span class="line">cd /mydata/seata/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h6 id="查看注册服务"><a href="#查看注册服务" class="headerlink" title="查看注册服务"></a>查看注册服务</h6><p><img src="https://s2.loli.net/2023/03/27/h6jXg9it8n5OqHf.png" alt="image-20230327164756276"></p><p><img src="https://s2.loli.net/2023/03/27/hSD6WmOBqNZuPVf.png" alt="image-20230327164809102"></p><h4 id="Seata的集成"><a href="#Seata的集成" class="headerlink" title="Seata的集成"></a>Seata的集成</h4><h5 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Seata --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h5><p><img src="https://s2.loli.net/2023/03/27/CdtnLkaeH4vQI3r.png" alt="image-20230327192457741"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_droup</span> <span class="comment"># 自定义事务组名称（根据这个获取Seata TC服务的cluster名称） 需要与seata-server对应</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC服务cluster的映射关系</span></span><br><span class="line">      <span class="attr">fsp_tx_droup:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><h5 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h5><blockquote><p>nacos服务名称组成包括：namespace+group+serviceName+cluster</p><p>seata客户端获取tc的cluster名称方式：以tx-group-service的值为key到vgroupMapping中查找</p></blockquote><p><img src="https://s2.loli.net/2023/03/28/Pkx7VsMEu9aHyNb.png" alt="image-20230328095254330"></p><h4 id="Seata实践"><a href="#Seata实践" class="headerlink" title="Seata实践"></a>Seata实践</h4><h5 id="XA模式"><a href="#XA模式" class="headerlink" title="XA模式"></a>XA模式</h5><blockquote><p>XA规范是X/Open组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA规范描述全局TM与局部RM之间的接口，几乎所有主流的数据库对XA规范提供了支持。</p></blockquote><p><img src="https://s2.loli.net/2023/03/28/BzxIG1PoVbQ8kjM.png" alt="image-20230328102108993"></p><p><img src="https://s2.loli.net/2023/03/28/OCv79LNfzSY1BIK.png" alt="image-20230328102134384"></p><h6 id="seata的XA模式"><a href="#seata的XA模式" class="headerlink" title="seata的XA模式"></a>seata的XA模式</h6><p><img src="https://s2.loli.net/2023/03/28/YeOS9DGKlJhHRnj.png" alt="image-20230328135642576"></p><p><img src="https://s2.loli.net/2023/03/28/W9yQ26TPZnkoAfx.png" alt="image-20230328135541484"></p><h6 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h6><p>优点：</p><ul><li>事务强一致性，满足ACID原则</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul><p>缺点：</p><ul><li>一阶段需要锁定数据库资源，等待二阶段结束才释放资源，性能较差</li><li>依赖关系性数据库实现事务</li></ul><p><img src="https://s2.loli.net/2023/03/28/6J5SxPNXLv3dBzw.png" alt="image-20230328135841685"></p><h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><p><img src="https://s2.loli.net/2023/03/28/AG9lIQag2qcPU8n.png" alt="image-20230328140402535"></p><p>1、修改配置文件，开启XA模式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line"><span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span> <span class="comment"># 开启数据源代理XA模式</span></span><br></pre></td></tr></table></figure><p>2、全局事务的入口方法添加@GlobalTransactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(OmsOrder omsOrder)</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AT模式"><a href="#AT模式" class="headerlink" title="AT模式"></a>AT模式</h5><blockquote><p>AT模式是分阶段提交的事务模型，与XA模式相比弥补了资源锁定周期过长的缺陷 </p></blockquote><p><img src="https://s2.loli.net/2023/03/29/q1Lr6kiXl7jo3Iz.png" alt="image-20230329112408307"></p><h6 id="AT模式原理"><a href="#AT模式原理" class="headerlink" title="AT模式原理"></a>AT模式原理</h6><p><img src="https://s2.loli.net/2023/03/29/Eo9exTSQNsMAF53.png" alt="image-20230329112705673"></p><h6 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h6><p><img src="https://s2.loli.net/2023/03/29/coqRzvrNSdJFAug.png" alt="image-20230329112923405"></p><h6 id="AT模式的脏写问题"><a href="#AT模式的脏写问题" class="headerlink" title="AT模式的脏写问题"></a>AT模式的脏写问题</h6><p><img src="https://s2.loli.net/2023/04/03/LqN1uSVoE6Uy84B.png" alt="image-20230403174324981"></p><h6 id="AT模式的写隔离"><a href="#AT模式的写隔离" class="headerlink" title="AT模式的写隔离"></a>AT模式的写隔离</h6><blockquote><p>在提交事务释放DB锁时，获取全局锁，由tc记录当前正在操作行数据的seata事务，该事务持有全局锁，具备执行权。</p></blockquote><p><img src="https://s2.loli.net/2023/04/03/Fai2S8JOpzCgxYk.png" alt="image-20230403175339314"></p><h5 id="TCC模式"><a href="#TCC模式" class="headerlink" title="TCC模式"></a>TCC模式</h5><h5 id="SAGA模式"><a href="#SAGA模式" class="headerlink" title="SAGA模式"></a>SAGA模式</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud&quot;&gt;&lt;a href=&quot;#SpringCloud&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud&quot;&gt;&lt;/a&gt;SpringCloud&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023</summary>
      
    
    
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MySQL进阶</title>
    <link href="http://example.com/2023/01/12/MySQL%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2023/01/12/MySQL%E8%BF%9B%E9%98%B6/</id>
    <published>2023-01-12T02:31:22.000Z</published>
    <updated>2023-02-23T10:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL进阶篇"><a href="#MySQL进阶篇" class="headerlink" title="MySQL进阶篇"></a>MySQL进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h3><p><img src="https://s2.loli.net/2022/08/16/UtRCdhWENvTcsHz.webp" alt="img"></p><h4 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h4><blockquote><p>服务层是与<strong>客户端连接服务</strong>，主要完成一些类似于连接处理、授权认证及相关的安全方案，服务会为安全接入的每个客户端验证他所具有的操作权限。</p></blockquote><h4 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h4><blockquote><p>服务层完成<strong>核心</strong>服务功能，如SQL接入、缓存查询、SQL的分析和优化、部分内置函数的执行，所有跨存储引擎的功能在这一层实现，如过程、函数等。</p></blockquote><h4 id="引擎层"><a href="#引擎层" class="headerlink" title="引擎层"></a>引擎层</h4><blockquote><p>存储引擎负责了MySQL中<strong>数据的存储和提取</strong>，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，可以根据自己的需要，来选取合适的存储引擎。</p></blockquote><h4 id="存储层"><a href="#存储层" class="headerlink" title="存储层"></a>存储层</h4><blockquote><p>将数据存储在<strong>文件系统</strong>之上，并完成与存储引擎的交互。</p></blockquote><p><img src="https://s2.loli.net/2022/11/08/mGOcUVXD674taRg.png" alt="image-20221108233735095"></p><p><img src="https://s2.loli.net/2022/08/16/PruSz6Fx2nWc4lq.webp" alt="image.png"></p><h3 id="存储引擎简介"><a href="#存储引擎简介" class="headerlink" title="存储引擎简介"></a>存储引擎简介</h3><blockquote><p> 存储引擎是存储数据、建立索引、更新或查询数据等技术的实现方式。</p><p>存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p></blockquote><h4 id="查询表的存储引擎"><a href="#查询表的存储引擎" class="headerlink" title="查询表的存储引擎"></a>查询表的存储引擎</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询建表语句 <span class="comment">--默认存储引擎：INNODB</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/08/KLYAMF7fd4hzlnD.png" alt="image-20221108234716405"></p><h4 id="创建表时指定存储引擎"><a href="#创建表时指定存储引擎" class="headerlink" title="创建表时指定存储引擎"></a>创建表时指定存储引擎</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `表名` (</span><br><span class="line">...</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/08/uQ6UbNmYqa9xrIw.png" alt="image-20221108235050017"></p><h4 id="查看当前数据库支持的存储引擎"><a href="#查看当前数据库支持的存储引擎" class="headerlink" title="查看当前数据库支持的存储引擎"></a>查看当前数据库支持的存储引擎</h4><p><img src="https://s2.loli.net/2022/11/08/Soyxi4kqDJE6KrO.png" alt="image-20221108235510767"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前数据库支持的存储引擎</span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><blockquote><p>  InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是默认的MySQL存储引擎。</p></blockquote><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>DML操作遵循ACID模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><p>xxx.ibd：xxx代表的是表名，InnoDB引擎的每张表都会对应一个表空间文件，存储该表的表结构、数据和索引。参数：innodb_file_per_table</p><p><img src="https://s2.loli.net/2022/11/09/ucvY37QpyqxwD6k.png" alt="image-20221109232246900"></p><p>进入MySQL Server的Data文件夹，查看表结构 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ibd2sdi xxx.ibd</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/09/iecharfLRUSuOVz.png" alt="image-20221109232609824"></p><p>InnoDB的逻辑存储结构</p><p><img src="https://s2.loli.net/2022/11/09/hYFePBZpUbaQcSI.png" alt="image-20221109233149770"></p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><blockquote><p>MyISAM是MySQL早期的默认存储引擎</p></blockquote><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><h5 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h5><p>xxx.sdi：存储表结构信息</p><p>xxx.MYD：存储数据</p><p>xxx.MYI：存储索引</p><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h5><blockquote><p>Memory引擎的表数据是存储在内存中的，由于受到硬件问题或断电问题的影响，只能将这些表作为临时表或者缓存使用。</p></blockquote><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul><li>内存存放</li><li>hash索引（默认）</li></ul><h5 id="文件-2"><a href="#文件-2" class="headerlink" title="文件"></a>文件</h5><p>xxx.sdi：存储表结构信息</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/11/09/EGYZBPvpIf8bOCV.png" alt="image-20221109234316209"></p><h3 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h3><p><img src="https://s2.loli.net/2022/11/09/RZlwWKt915pfm6L.png" alt="image-20221109235036592"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2022/11/09/seFU8Lo7gmkQP9E.png" alt="image-20221109235907183"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>索引（index）是帮助MySQL<strong>高效获取数据</strong>的<strong>数据结构</strong>（<strong>有序</strong>）。</p><p>在数据之外，数据库系统还<strong>维护</strong>着满足<strong>特定查找算法</strong>的数据结构即索引，这些数据结构以某种方式引用（<strong>指向</strong>）数据，以实现高级查找算法。</p></blockquote><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><blockquote><p>二叉树索引结构的只是一个示意图，并不是真实的索引结构</p></blockquote><p><img src="https://s2.loli.net/2022/11/10/tm4BuDYrbC1KNLv.png" alt="image-20221110161951161"></p><h4 id="索引优缺点"><a href="#索引优缺点" class="headerlink" title="索引优缺点"></a>索引优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>索引提高数据检索的效率，降级数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>索引列会占用一定磁盘空间</li><li>索引大大提高查询效率，同时降低更新表的速度（新增，修改和删除）</li></ul><p><img src="https://s2.loli.net/2022/11/10/mxV9uQ6YJwnIWCd.png" alt="image-20221110162719161"></p><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包括：</p><p><img src="https://s2.loli.net/2022/11/10/VOPx7lqu9W86fgk.png" alt="image-20221110230354617"></p><ul><li>B+ Tree索引：最常见的索引类型，大部分引擎支持B+树索引</li><li>Hash索引：底层数据结构使用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</li><li>R-tree空间索引：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</li><li>Full-text全文索引：一种通过建立倒排索引、快速匹配文档的方式，类似于Lucenes、Solr、ES</li></ul><p><img src="https://s2.loli.net/2022/11/10/nIUbikG4a3lNJEq.png" alt="image-20221110233548679"></p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><blockquote><p> 如果MySQL的索引结构采用二叉树的数据结构，理想的情况下，查询效率为log2n；</p><p>但是如果主键是顺序插入，则会形成一个单向链表。</p></blockquote><h5 id="二叉树缺点"><a href="#二叉树缺点" class="headerlink" title="二叉树缺点"></a>二叉树缺点</h5><blockquote><ul><li>顺序插入时，形成一个链表，查询性能大大降低</li><li>大数据量的情况下，层级较深，检索速度慢</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/11/poTPteKWb4LDlAF.png" alt="image-20221111094158256"></p><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><blockquote><p>红黑树是一颗自平衡二叉树</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/KEgXWUlzhDbjPY8.png" alt="image-20221111095259654"></p><h5 id="红黑树缺点"><a href="#红黑树缺点" class="headerlink" title="红黑树缺点"></a>红黑树缺点</h5><blockquote><ul><li>大数据量的情况下，层级较深，检索速度慢</li></ul></blockquote><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><blockquote><p>B树是一种多路平衡查找树，B树的每个节点可以有多个分支，即多叉。</p><p>树的度数指的是一个节点的子节点个数。</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/bEQWz1MhfcIu3YN.png" alt="image-20221111100446722"></p><p>通过一个数据结构可视化网站演示：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p><p><img src="https://s2.loli.net/2022/11/11/cr8WwdUPQoFzbGy.png" alt="image-20221111134903797"></p><p>顺序插入一组数据，观察树的变化过程</p><p><img src="https://s2.loli.net/2022/11/11/a295b3DtAU4h6J7.png" alt="image-20221111134932851"></p><h5 id="n阶B树特点"><a href="#n阶B树特点" class="headerlink" title="n阶B树特点"></a>n阶B树特点</h5><blockquote><ul><li>每一个节点最多存储n-1个Key，对应n个指针</li><li>一旦节点存储的Key数量超过n-1，中间元素就会向上分裂</li><li>B树中，非叶子节点和叶子节点都会存放数据</li></ul></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><blockquote><p>B+Tree是B-Tree的变种</p><p>以一颗最大度数为4（4阶）的B+Tree为例，我们可以看到：</p><ul><li>绿色虚线框部分是索引部分，起到索引数据的作用，不存储数据</li><li>红色虚线框部分是数据存储部分，其叶子节点中存储具体的数据</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/11/mkObhc23jWRQXGq.png" alt="image-20221111142037841"></p><p>通过一个数据结构可视化网站演示：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p><p>与B-Tree的区别</p><blockquote><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成了一个单向链表</li><li>非叶子节点仅仅起到了索引数据的作用，具体数据都在叶子节点中存放</li></ul></blockquote><blockquote><p>MySQL中对于经典的B+Tree数据类型进行了优化，在原有的基础上，增加一个指向相邻叶子节点的链表指针，形成了有序指针的B+Tree，提高了区间访问的性能，利于数据库的排序操作。</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/N8xtfb2Xemvd6WT.png" alt="image-20221111143409638"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><blockquote><p>哈希索引就是采用一定的Hash算法，将键值换算成新的Hash值，映射到哈希表对应的槽位上，然后存储在hash表中。</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/La2SImJWo8eO5uE.png" alt="image-20221111144332172"></p><blockquote><p>如果两个（或多个）键值，映射到一个相同的槽位上，就产生Hash冲突（即Hash碰撞），可以通过链表来解决</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/i69A3XxVsYUuCvz.png" alt="image-20221111144912391"></p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><blockquote><ul><li>Hash索引只能用于对等比较（=，in），不支持范围查询（between,&gt;,&lt;,…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，Hash索引在等值查询上比B+树效率更高</li></ul></blockquote><h5 id="搜索引擎支持"><a href="#搜索引擎支持" class="headerlink" title="搜索引擎支持"></a>搜索引擎支持</h5><blockquote><p>在MySQL中，支持Hash索引的是Memory引擎，而InnoDB中具有自适应Hash功能，hash索引是在存储引擎根据B+Tree索引在指定条件下自动构建的</p></blockquote><h4 id="InnoDB存储引擎选择使用B-Tree索引结构"><a href="#InnoDB存储引擎选择使用B-Tree索引结构" class="headerlink" title="InnoDB存储引擎选择使用B+Tree索引结构"></a>InnoDB存储引擎选择使用B+Tree索引结构</h4><blockquote><ul><li>相对于二叉树，<strong>层级</strong>更<strong>少</strong>，<strong>搜索效率高</strong></li><li>相对于B-Tree，无论是叶子节点还是非叶子节点都会<strong>保存数据</strong>，这会导致一页中存储的键值减少即指针减少，保保存同样的大量数据，只能增加树的高度，导致性能的降低</li><li>相对于Hash索引，B+Tree支持<strong>范围匹配</strong>及<strong>排序</strong>操作</li></ul></blockquote><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><h4 id="索引的具体类型"><a href="#索引的具体类型" class="headerlink" title="索引的具体类型"></a>索引的具体类型</h4><blockquote><p>在MySQL数据库中，索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/EvzdPjxpIgmotVA.png" alt="image-20221111152229540"></p><table><thead><tr><th align="center">分类</th><th align="center">含义</th><th align="center">特点</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">主键索引</td><td align="center">针对于表中的主键创建的索引</td><td align="center">默认自动创建，只能有一个</td><td align="center">PRIMARY</td></tr><tr><td align="center">唯一索引</td><td align="center">避免同一个表中某数据列中的值重复</td><td align="center">可以存在多个</td><td align="center">UNIQUE</td></tr><tr><td align="center">常规索引</td><td align="center">快速定位特定数据</td><td align="center">可以存在多个</td><td align="center"></td></tr><tr><td align="center">全文索引</td><td align="center">查找是文本中关键词，而非比较索引中的值</td><td align="center">可以存在多个</td><td align="center">FULLTEXT</td></tr></tbody></table><h4 id="索引的存储形式"><a href="#索引的存储形式" class="headerlink" title="索引的存储形式"></a>索引的存储形式</h4><blockquote><p>在InnoDB存储引擎中，根据索引的存储形式，可以分为聚集索引和二级索引。</p></blockquote><p><img src="https://s2.loli.net/2022/11/11/K8RclpZVob5OWCP.png" alt="image-20221111153640531"></p><table><thead><tr><th align="center">分类</th><th align="center">含义</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">聚集索引（Clustered Index）</td><td align="center">将数据存储与索引放在一起，索引结构的叶子节点保存行数据</td><td align="center">必须有，而且只有一个</td></tr><tr><td align="center">二级索引（Secondary Index）</td><td align="center">将数据与索引分开存储，索引结构的叶子节点保存行数据对应的主键</td><td align="center">可以存在多个</td></tr></tbody></table><h4 id="聚集索引选择规则"><a href="#聚集索引选择规则" class="headerlink" title="聚集索引选择规则"></a>聚集索引选择规则</h4><blockquote><ul><li>如果存在主键，<strong>主键索引</strong>就是聚集索引</li><li>如果不存在主键，将使用第一个<strong>唯一索引</strong>（UNIQUE）作为聚集索引</li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会<strong>自动生成</strong>一个<strong>rowid</strong>作为隐藏的聚集索引</li></ul></blockquote><h4 id="聚集索引和二级索引的结构实例"><a href="#聚集索引和二级索引的结构实例" class="headerlink" title="聚集索引和二级索引的结构实例"></a>聚集索引和二级索引的结构实例</h4><p><img src="https://s2.loli.net/2022/11/11/2EA1JZHkPIQingS.png" alt="image-20221111172107291"></p><blockquote><p>查询过程：select * from user where name = xxx</p><ul><li>由于根据name自动进行查询，所以先根据name字段的二级索引中进行匹配查找，在二级索引中查找到数据对应的主键值</li><li>根据主键值到聚集索引中查找主键值对应的记录即具体数据。</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/11/L61AuMviG3RblTj.webp" alt="image"></p><blockquote><p>回表查询：先到二级索引中查找数据对应的主键值，再到聚集索引中根据主键值获取具体数据的方式</p></blockquote><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><h5 id="执行效率对比"><a href="#执行效率对比" class="headerlink" title="执行效率对比"></a>执行效率对比</h5><p><img src="https://s2.loli.net/2022/11/12/dLUAiBhsocTI2jY.png" alt="image-20221112024931232"></p><h5 id="InnoDB主键索引的B-Tree高度"><a href="#InnoDB主键索引的B-Tree高度" class="headerlink" title="InnoDB主键索引的B+Tree高度"></a>InnoDB主键索引的B+Tree高度</h5><p><img src="https://s2.loli.net/2022/11/12/e1chRGzfTwr4bLj.png" alt="image-20221112025418898"></p><h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT] INDEX index_name <span class="keyword">ON</span> table_name(index_col_name,...)</span><br></pre></td></tr></table></figure><blockquote><p>index_col_name：索引关联字段（一个：单列索引 多个：关联索引或组合索引）</p></blockquote><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="查看索引-1"><a href="#查看索引-1" class="headerlink" title="查看索引"></a>查看索引</h5><p><img src="https://s2.loli.net/2022/11/12/PTiHQA1rWa94UYy.png" alt="image-20221112235204914"></p><p><img src="https://s2.loli.net/2022/11/12/9WfzpLsROIjx46E.png" alt="image-20221112225037346"></p><h5 id="创建普通索引"><a href="#创建普通索引" class="headerlink" title="创建普通索引"></a>创建普通索引</h5><p><img src="https://s2.loli.net/2022/11/13/gRNhEwJBC4bTWpY.png" alt="image-20221113015135770"></p><h5 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h5><p><img src="https://s2.loli.net/2022/11/13/SnPGuoLmENaxZpk.png" alt="image-20221113020511974"></p><h5 id="创建联合索引"><a href="#创建联合索引" class="headerlink" title="创建联合索引"></a>创建联合索引</h5><p><img src="https://s2.loli.net/2022/11/13/qMEVI6xlynCpwka.png" alt="image-20221113020814460"></p><p><img src="https://s2.loli.net/2022/11/13/OGRfq18C4MAaYnr.png" alt="image-20221113021129931"></p><h3 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h3><h4 id="SQL执行频率"><a href="#SQL执行频率" class="headerlink" title="SQL执行频率"></a>SQL执行频率</h4><blockquote><p>通过SHOW [SESSION|GLOBAL] status命令可以提供服务器状态信息</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- session：当前会话</span></span><br><span class="line"><span class="comment">-- global：全局数据</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;XXX&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="查询执行频次"><a href="#查询执行频次" class="headerlink" title="查询执行频次"></a>查询执行频次</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库INSERT、UPDATE、DELETE、SELECT的全局访问频次</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Com_______&#x27;</span>;</span><br><span class="line"><span class="comment">-- Com_select：查询频次</span></span><br><span class="line"><span class="comment">-- Com_insert：新增频次</span></span><br><span class="line"><span class="comment">-- Com_update：修改频次</span></span><br><span class="line"><span class="comment">-- Com_delete：删除频次</span></span><br></pre></td></tr></table></figure><blockquote><p>通过上面的指令，可以查看当前数据库INSERT、UPDATE、DELETE、SELECT的全局访问频次，进而了解当前数据库是以查询为主还是以修改为主，从而为数据库的优化提供参考依据即如果以查询为主，我们可以考虑对数据库的索引进行优化。</p></blockquote><p><img src="https://s2.loli.net/2022/11/13/3n1CjHiIRJNDcv7.png" alt="image-20221113023744148"></p><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>如果当前数据库以查询为主，我们可以借助慢查询日志定位需要优化的查询语句</p><blockquote><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认：10秒）的所有SQL语句</p></blockquote><blockquote><p>慢查询日志默认没有开启，通过如下语句可以查看系统变量 slow_query_log</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/13/5NSHpDlhsBW6CvO.png" alt="image-20221113030051114"></p><p><img src="https://s2.loli.net/2022/11/13/NCwPzTQyDiH8F1B.png" alt="image-20221113030519615"></p><h5 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/mysql/my.cnf &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line"># 开启MySQL慢查询日志</span><br><span class="line">slow_query_log=1</span><br><span class="line"></span><br><span class="line"># 设置慢日志的时间为2秒</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/13/vgT1LRHcEFBJurO.png" alt="image-20221113070106913"></p><h5 id="重启MySQL服务"><a href="#重启MySQL服务" class="headerlink" title="重启MySQL服务"></a>重启MySQL服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><h5 id="查看慢查询日志状态"><a href="#查看慢查询日志状态" class="headerlink" title="查看慢查询日志状态"></a>查看慢查询日志状态</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/13/i6SnCEq5ZAWtyb1.png" alt="image-20221113072343747"></p><p><img src="https://s2.loli.net/2022/11/13/ZMSvnqfIFEN1Uko.png" alt="image-20221113072525365"></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM sys_user;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/13/tKjfT6lNespW4qo.png" alt="image-20221113073044559"></p><p>通过慢查询日志，可以定位到执行效率较低的SQL语句，从而针对性的进行优化。</p><h4 id="profile详情"><a href="#profile详情" class="headerlink" title="profile详情"></a>profile详情</h4><blockquote><p>通过show_profiles能够在SQL执行的各个过程时间消耗情况</p></blockquote><h5 id="查看MySQL是否支持profile"><a href="#查看MySQL是否支持profile" class="headerlink" title="查看MySQL是否支持profile"></a>查看MySQL是否支持profile</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@having</span>_profiling;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/14/QEXpVtPlfw9YcCe.png" alt="image-20221114095226425"></p><h5 id="开启profiling操作"><a href="#开启profiling操作" class="headerlink" title="开启profiling操作"></a>开启profiling操作</h5><blockquote><p>默认profiling是关闭的，通过set语句在session/global级别开启profiling</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET profiling = 1;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/14/2Mrad4pmtbf1EYq.png" alt="image-20221114095326308"></p><h5 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看<span class="keyword">SQL</span>语句耗时基本情况</span><br><span class="line"><span class="keyword">SHOW</span> profiles;</span><br><span class="line"></span><br><span class="line"># 查看指定query_id的<span class="keyword">SQL</span>语句各个阶段的耗时情况</span><br><span class="line"><span class="keyword">SHOW</span> profile <span class="keyword">FOR</span> query query_id</span><br><span class="line"></span><br><span class="line"># 查看指定query_id的<span class="keyword">SQL</span>语句CPU的使用情况</span><br><span class="line"><span class="keyword">SHOW</span> profile CPU <span class="keyword">for</span> query query_id</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/14/jWFA2NZn7Jp81Lm.png" alt="image-20221114100326625"></p><p><img src="https://s2.loli.net/2022/11/14/q76BJKzivhrPTGx.png" alt="image-20221114101045847"></p><p><img src="https://s2.loli.net/2022/11/14/RMLVys6w2pazQcf.png" alt="image-20221114101232401"></p><h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><blockquote><p>通过EXPLAIN或者DECS指令可以获取MySQL执行SELECT语句的信息，包括执行过程中表如何连接、连接的顺序以及索引的使用，它可以帮助分析SQL问题，从而更好的使用索引以及优化查询语句。</p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接在<span class="keyword">select</span>语句前加上关键字EXPLAIN<span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL在执行一条查询之前会分析SQL语句，决定是否使用索引或全表扫描。使用EXPLAIN命令MySQL不会执行查询操作，经过SQL分析器分析后停止执行。</p></blockquote><p><img src="https://s2.loli.net/2022/11/14/AaYq89kluK3TVby.png" alt="image-20221114172254265"></p><p>EXPLAIN执行计划中各个字段的含义</p><table><thead><tr><th>字段</th><th align="left">含义</th></tr></thead><tbody><tr><td>id</td><td align="left">select 查询的序列号，表示查询中执行select子句或者是操作表的顺序（id不同，值越大先执行；id相同，执行顺序从上往下）</td></tr><tr><td>select_type</td><td align="left">select的类型，常见的取值有SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（联合查询，即第二个或者后面的查询）、SUBQUERY（子查询）</td></tr><tr><td>type</td><td align="left">连接类型，性能由好到差的连接类型为<strong>null &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong>（一般来说，得保证查询至少达到range级别,最好能达到ref）</td></tr><tr><td>possible_key</td><td align="left">显示可能应用在查询语句中的索引</td></tr><tr><td>key</td><td align="left">实际使用到的索引，如果为null，则没有使用索引，如果为primary，则使用主键</td></tr><tr><td>key_len</td><td align="left">最长的索引宽度，表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际长度。如果键是NULL，长度就是NULL。在不损失精确性的情况下，长度越短越好</td></tr><tr><td>ref</td><td align="left">显示哪个字段或常数与key一起被使用</td></tr><tr><td>rows</td><td align="left">这个数表示mysql必须执行查询的行数，在innodb引擎的表中，是一个估计值</td></tr><tr><td>filtered</td><td align="left">表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</td></tr></tbody></table><h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><h4 id="验证索引效率"><a href="#验证索引效率" class="headerlink" title="验证索引效率"></a>验证索引效率</h4><p>字段建立索引后，查询效率大大提升，验证了通过索引可以提升数据的查询性能。</p><p><img src="https://s2.loli.net/2022/11/15/SDEHA49QNTxhzIy.png" alt="image-20221115110137850"></p><p><img src="https://s2.loli.net/2022/11/15/fgpxmZHV6aUSMGw.png" alt="image-20221115110815633"></p><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><blockquote><p>如果索引关联多列即联合索引，需要遵守最左前缀法则。</p><p>最左前缀法则指的是查询需要从索引的最左列开始，并且不跳过索引中的列。如果跳出了索引的每一列，索引将部分失效（即后面的字段索引失效）。</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/2jdfiapsu7QmCY3.png" alt="image-20221115132024837"></p><h5 id="等值匹配查询"><a href="#等值匹配查询" class="headerlink" title="等值匹配查询"></a>等值匹配查询</h5><p>在表中有一个联合索引关联了三个字段：brand_id，product_category_id，feight_template_id</p><blockquote><p>对于最左前缀法则而言，查询时最左边的列必须存在，否则索引全部失效。如果中间不能跳过某一列，该列后面的字段索引将失效。</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/pfzcYwdDu4mrljT.png" alt="image-20221115133143692"></p><p><img src="https://s2.loli.net/2022/11/15/FPdzbs71mQTeEhA.png" alt="image-20221115133203477"></p><blockquote><p> 如果查询条件的字段是全部存在但是，索引依旧完全满足最左前缀法则。所以最左前缀法则中指的是最左边的列，是指查询时，联合索引的最左边的字段必须存在，这与查询语句的先后顺序无关。</p></blockquote><h5 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h5><blockquote><p>联合索引中，出现范围查询（&gt;或&lt;），范围查询右侧的列索引失效。</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/wThAukyMSiPRgrN.png" alt="image-20221115134205026"></p><blockquote><p>当范围查询使用&gt;=或&lt;=时，所有字段都走了索引。</p></blockquote><blockquote><p>在业务允许的情况下，尽可能的使用类似于&gt;=或&lt;=这类范围查询，而避免使用&gt;或&lt;</p></blockquote><h4 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h4><h5 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h5><blockquote><p>如果在索引列上进行运算操作，索引将失效</p></blockquote><p>当根据索引字段进行等值匹配查询时，索引生效。</p><p><img src="https://s2.loli.net/2022/11/15/w9PTOtzhBckCsva.png" alt="image-20221115140011040"></p><p>当根据索引字段进行函数运算操作后，索引失效。</p><p><img src="https://s2.loli.net/2022/11/15/6MzXYpFocWKsRlB.png" alt="image-20221115140308874"></p><h5 id="索引列查询隐式转换"><a href="#索引列查询隐式转换" class="headerlink" title="索引列查询隐式转换"></a>索引列查询隐式转换</h5><blockquote><p>索引列查询时隐式转换，会导致索引失效。</p><p>常见的是字符串类型字段使用时，不加引号，索引将失效。</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/V9kcNHofZeOpSsi.png" alt="image-20221115143412436"></p><blockquote><p>隐式转换：当两边的操作数类型不一致时，MySQL会发生类型转换以使操作兼容，这些操作是隐式的。</p></blockquote><p>在字符串和数字操作数进行比较时，将其作为浮点数的比较，两边都是浮点数没有使用索引的原因是执行查询时，MySQL会使用CAST函数把每一行主键列的值转换为浮点数，再与条件参数做比较，在InnoDB存储引擎中，在索引列上使用函数会导致索引失效，导致全表扫描。</p><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><blockquote><p>如果是尾部模糊匹配，索引不会失效</p><p>如果是头部模糊匹配，索引会失效</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/aTMY2VCFptxmuL5.png" alt="image-20221115152448370"></p><p>在like模糊查询中，在关键字后面加%，索引可以生效，在关键字前面加%，索引将失效。</p><h5 id="or连接条件"><a href="#or连接条件" class="headerlink" title="or连接条件"></a>or连接条件</h5><blockquote><p>查询条件用or分开，如果or前后有任一没有索引，涉及的索引都不会被用到</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/R4rgUXVCqJM1Ef3.png" alt="image-20221115160237189"></p><blockquote><p>当or连接的条件，左右两边字段都有索引时，索引才会生效</p></blockquote><h5 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h5><blockquote><p>如果MySQL分析评估使用索引比全表查询更慢，则不使用索引</p></blockquote><p><img src="https://s2.loli.net/2022/11/15/hZasvPJ21wXRlyo.png" alt="image-20221115161320096"></p><blockquote><p>因为MySQL在查询时会评估使用索引的效率与全表扫描的效率，如果全表扫描更快，放弃索引，使用全表扫描。因为索引的作用是检索少量数据的，如果通过索引查询返回大量的数据，则不如全表扫描，此时索引失效。</p></blockquote><h4 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h4><p><img src="https://s2.loli.net/2022/11/15/IvnQAJbUsCTNhjE.png" alt="image-20221115164422614"></p><p>上图中，查询语句中右两个索引可能被用到分别是组合索引和单列索引，MySQL会自动在其中选择一个。</p><blockquote><p>我们可以用过SQL提示的方式指定使用的索引。</p><p>SQL提示是优化数据库的一个重要手段，它是在SQL语句中加入一些提示来达到优化操作的目的。</p></blockquote><h5 id="use-index"><a href="#use-index" class="headerlink" title="use index"></a>use index</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 USE INDEX <span class="keyword">WHERE</span> 查询条件</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/15/d3DVMpaBmgwXAzk.png" alt="image-20221115165644150"></p><h5 id="ignore-index"><a href="#ignore-index" class="headerlink" title="ignore index"></a>ignore index</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 IGNORE INDEX <span class="keyword">WHERE</span> 查询条件</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/15/amoHZqWzfRYckVF.png" alt="image-20221115165656341"></p><h5 id="force-index"><a href="#force-index" class="headerlink" title="force index"></a>force index</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 FORCE INDEX <span class="keyword">WHERE</span> 查询条件</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/15/oWk1hgrCe7YiJSd.png" alt="image-20221115165708208"></p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><blockquote><p>覆盖索引：查询使用索引并在该索引中已经全部能够找到需要返回的列</p><p>尽量使用覆盖索引，减少select *。</p></blockquote><p><img src="https://s2.loli.net/2022/11/16/VT1jvHsxliuROXN.png" alt="image-20221116115801508"></p><p><img src="https://s2.loli.net/2022/11/16/HPCkmzX9RgZxrQJ.png" alt="image-20221116115929492"></p><p>关注Extra的值有所不同，分别是Using index和Using index condition</p><table><thead><tr><th>Extra</th><th>含义</th></tr></thead><tbody><tr><td>Using index</td><td>查找使用了索引，但是需要的数据都在索引列中可以找到，不需要回表查询</td></tr><tr><td>Using index condition</td><td>查找使用了索引，但是需要回表查询数据</td></tr></tbody></table><blockquote><p>联合索引关联了多个字段的信息，叶子节点存储了对应一行数据的id信息，当查询返回的数据在主键id和关联字段之中的时候，则直接走二级索引直接返回数据。如果超过了这个范围，就需要通过主键id去扫描聚集索引，再获取额外的数据即回表查询。依此一直使用select * 查询返回所有字段，很容易造车回表查询（除非根据主键id查询）</p></blockquote><h5 id="表结构以及索引示意图"><a href="#表结构以及索引示意图" class="headerlink" title="表结构以及索引示意图"></a>表结构以及索引示意图</h5><blockquote><p>id是主键即一个聚集索引，name是一个普通索引即一个二级索引（辅助索引）</p></blockquote><p>根据id查询直接通过聚集索引查询，一次索引扫描，直接返回数据，性能高</p><p><img src="https://s2.loli.net/2022/11/16/vxTzHykgAwZc1EB.png" alt="image-20221116123241040"></p><p>通过二级索引根据name字段查询，由于查询返回的字段为id，name，分别是索引字段和主键id，这两个字段都可以直接获取到，这就是覆盖索引，不需要回表查询，性能高<img src="https://s2.loli.net/2022/11/16/jmuxikhv2TrzRNW.webp" alt="image"></p><p>当查询的返回字段在二级索引中不包含时，需要进行二次索引扫描，也就是需要回表查询，性能相对较差一点</p><p><img src="https://s2.loli.net/2022/11/16/PfdlN4tcVX63LKY.webp" alt="image"></p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><blockquote><p>当索引的字段类型为字符串（varchar,text.longtext等）时，索引变得很大，浪费大量的磁盘IO，影响查询效率。</p><p>前缀索引可以将字符串的一部分前缀建立索引，大大节约索引空间，提高索引的效率</p></blockquote><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX 索引名 <span class="keyword">ON</span> 表名(字段名(n))</span><br></pre></td></tr></table></figure><h5 id="前缀长度"><a href="#前缀长度" class="headerlink" title="前缀长度"></a>前缀长度</h5><blockquote><p>前缀长度可以根据索引的选择性决定，而索引选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引的选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能最好</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> 表字段)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="built_in">substring</span>(表字段, <span class="number">1</span>, n))<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(brand_story, <span class="number">1</span>, <span class="number">18</span>))<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> pms_brand;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/16/wsN86DluHxBGWho.png" alt="image-20221116125427288"></p><h5 id="前缀索引的查询流程"><a href="#前缀索引的查询流程" class="headerlink" title="前缀索引的查询流程"></a>前缀索引的查询流程</h5><p><img src="https://s2.loli.net/2022/11/16/dDB5JV4gchKHbU3.webp" alt="image"></p><h4 id="单列索引与联合索引"><a href="#单列索引与联合索引" class="headerlink" title="单列索引与联合索引"></a>单列索引与联合索引</h4><blockquote><p>单列索引：一个索引包含单个列</p><p>联合索引：一个索引包含多个列</p></blockquote><p>使用了单列索引，查询会回表查询</p><p><img src="https://s2.loli.net/2022/11/16/2aS3sInDOdbzYRk.png" alt="image-20221116133247099"></p><p>创建一个联合索引</p><p><img src="https://s2.loli.net/2022/11/16/al1WFSb9Mvyz5UT.png" alt="image-20221116133456521"></p><p>指定使用联合索引，无需回表查询</p><p><img src="https://s2.loli.net/2022/11/16/DEJxLcQu42aMVvq.png" alt="image-20221116133710870"></p><blockquote><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议使用联合索引，而非单列索引。</p></blockquote><p>通过联合索引的查询的流程示意图（无需回表查询）</p><p><img src="https://s2.loli.net/2022/11/16/wzcnjBVAZf1TDPY.webp" alt="image"></p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><p><img src="https://s2.loli.net/2022/11/16/VDdMLmjRAsbIBOX.png" alt="image-20221116151825340"></p><ul><li>针对于数据量较大而且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果时字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时联合索引一些时候可以覆盖索引，节省存储空间，避免回表</li><li>控制索引的数量，索引并不是越多越好，索引越多，维护索引结构的代价越大，会影响增删改查的效率</li><li>如果索引列不能存储NULL值，在创建表时需要对该列使用NOT NULL进行约束。优化器判断每列是否包含NULL值，可以更好地确定哪个索引最有效地用于查询</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://s2.loli.net/2022/11/16/ZbljT6ArQzWd48v.png" alt="image-20221116154929970"></p><p><img src="https://s2.loli.net/2022/11/16/AhUiX8R7SoWqsmg.png" alt="image-20221116155327250"></p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><h4 id="大量输入插入"><a href="#大量输入插入" class="headerlink" title="大量输入插入"></a>大量输入插入</h4><p>如果我们需要往数据库一次性插入多条记录，可以有三个方面的优化</p><ul><li>批量插入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (字段值,...),(字段值,...),(字段值,...);</span><br></pre></td></tr></table></figure><ul><li>手动提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (字段值,...),(字段值,...),(字段值,...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (字段值,...),(字段值,...),(字段值,...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (字段值,...),(字段值,...),(字段值,...);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>主键顺序插入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主键顺序插入：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">15</span> <span class="number">21</span> <span class="number">88</span> <span class="number">89</span></span><br></pre></td></tr></table></figure><h4 id="大批量数据插入"><a href="#大批量数据插入" class="headerlink" title="大批量数据插入"></a>大批量数据插入</h4><p>如果一次性需要插入大批量数据，使用insert语句插入性能比较低，可以使用MySQL提供的load指令进行插入。</p><p><img src="https://s2.loli.net/2022/11/16/S3DJHh1Ffj8Nz7T.png" alt="image-20221116225202392"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端，加上参数 --local-infile</span><br><span class="line">mysql --local-infile -uroot -p</span><br><span class="line"># 设置全局参数local_infile=1,开启从本地加载文件导入数据的开关</span><br><span class="line">SET global local_infile = 1;</span><br><span class="line"># 查看本地加载文件导入数据开关是否开启</span><br><span class="line">SELECT @@local_infile;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/16/oVqt8dkZysLcx32.png" alt="image-20221116225436102"></p><p><img src="https://s2.loli.net/2022/11/16/dc5IK1HJfWt4mEg.png" alt="image-20221116231242547"></p><p>执行如下指令，将数据脚本文件中的数据加载到表结构中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/文件名.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> 表名 fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>主键顺序插入性能插入高于乱序插入</p></blockquote><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><h4 id="数据组织方式"><a href="#数据组织方式" class="headerlink" title="数据组织方式"></a>数据组织方式</h4><p>在InnoDB存储引擎中，<strong>表数据</strong>是<strong>根据主键顺序组织存放</strong>的，这种存储方式的表称为索引组织表（Index Organized table IOT）。</p><p>行数据都是存储在聚集索引的叶子节点上。</p><p><img src="https://s2.loli.net/2022/11/16/ISkBGiwt8nzVRWu.png" alt="image-20221116232247103"></p><p><img src="https://s2.loli.net/2022/11/24/6qx4Dg8AmJENjM1.webp" alt="image"></p><p>页（Page）是InnoDB磁盘管理的最小单元，行数据是记录在逻辑结构Page页中，每一个页的大小是固定的，默认16k。这意味着一个页中所存储的行是有限的，如果插入数据行row在该页存储不下，将会存储到下一页中，页与页之间会通过指针连接。</p><h4 id="页分裂"><a href="#页分裂" class="headerlink" title="页分裂"></a>页分裂</h4><blockquote><p>每页中包含了2-N行数据（如果一行数据过大会出现行溢出）。</p></blockquote><h5 id="主键顺序插入"><a href="#主键顺序插入" class="headerlink" title="主键顺序插入"></a>主键顺序插入</h5><p><img src="https://s2.loli.net/2022/11/24/mKMH1O43IjwFVsZ.png" alt="image-20221124141557766"></p><h5 id="主键乱序插入"><a href="#主键乱序插入" class="headerlink" title="主键乱序插入"></a>主键乱序插入</h5><p><img src="https://s2.loli.net/2022/11/24/bREgwy8NdzvkWPq.png" alt="image-20221124141759198"></p><p><img src="https://s2.loli.net/2022/11/24/WBDwqhEMAC4zkvG.png" alt="image-20221124141737202"></p><h4 id="页合并"><a href="#页合并" class="headerlink" title="页合并"></a>页合并</h4><blockquote><p>删除一行记录时，记录实际上并没有被物理删除，只是被标记（flaged）为删除状态并且它的空间允许被其他记录声明使用。</p><p>当页中删除记录达到MERGE_THRESHOLD（默认为页的50%），InnoDB会寻找最靠近页（前或后）看是否可以将两个页合并以优化空间使用。</p></blockquote><p><img src="https://s2.loli.net/2022/11/24/LCKM9JzUhdxGPDj.png" alt="image-20221124142054720"></p><p><img src="https://s2.loli.net/2022/11/24/n1F9wBZQ8WHqeXo.png" alt="image-20221124142126356"></p><blockquote><p>MERGE_THRESHOLD：合并页的阈值可以自己设置，在创建表或者在创建索引时指定。</p></blockquote><h4 id="索引设计原则-1"><a href="#索引设计原则-1" class="headerlink" title="索引设计原则"></a>索引设计原则</h4><ul><li>在满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键，防止过多的页分裂现象</li><li>尽量不要使用uuid或者其他自然做主键</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><h4 id="MySQL排序的两种方式"><a href="#MySQL排序的两种方式" class="headerlink" title="MySQL排序的两种方式"></a>MySQL排序的两种方式</h4><ul><li>Using filesort：通过表单索引和全表扫描，读取满足条件的数据行，然后在<strong>排序缓冲区sort buffer</strong>中完成排序操作。所有不是通过索引直接返回排序结构的排序结果的排序都是FileSort排序。</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，不需额外排序，操作效率高。</li></ul><blockquote><p>Using index性能高，Using filesort性能低，在优化排序操作时，尽量要优化为Using index。</p></blockquote><p>由于排序字段没有建立索引，排序出现了Using firesort，性能较低。</p><p><img src="https://s2.loli.net/2022/11/24/eZVtLrOf7FRxmyb.png" alt="image-20221124165542137"></p><h5 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h5><p><img src="https://s2.loli.net/2022/11/24/w73dfCYRXtoskmj.png" alt="image-20221124170426753"></p><h5 id="倒叙排序"><a href="#倒叙排序" class="headerlink" title="倒叙排序"></a>倒叙排序</h5><p><img src="https://s2.loli.net/2022/11/24/Dz8AufiBvsKCk7x.png" alt="image-20221124170618939"></p><p>Extra中出现Backward index scan，代表反向索引。</p><p>MySQL中我们创建的索引默认索引的叶子节点是从小到大排序的，此时查询时从大到小，因此扫描时反向扫描，会出现Backward index scan。</p><p>在MySQL8版本中，支持降序索引，可以创建降序索引。</p><h5 id="一个升序和一个降序"><a href="#一个升序和一个降序" class="headerlink" title="一个升序和一个降序"></a>一个升序和一个降序</h5><p><img src="https://s2.loli.net/2022/11/24/JlaFIzOcGePR25g.png" alt="image-20221124232121276"></p><p>创建索引时，未指定顺序，默认按照升序排序</p><p><img src="https://s2.loli.net/2022/11/24/msaWOkFb534gpx9.png" alt="image-20221124232428591"></p><p><img src="https://s2.loli.net/2022/11/24/xc5f6lAmRLa4rzn.png" alt="image-20221124232712210"></p><p><img src="https://s2.loli.net/2022/11/24/sl6Ahr9OFmyXNib.png" alt="image-20221124232803104"></p><h5 id="升序-降序联合索引结构示意图"><a href="#升序-降序联合索引结构示意图" class="headerlink" title="升序/降序联合索引结构示意图"></a>升序/降序联合索引结构示意图</h5><p><img src="https://s2.loli.net/2022/11/24/FsKIoGpyzbJt2Tq.png" alt="image-20221124233111857"></p><p>值得注意的是，联合索引排序时，只支持覆盖索引，如果不是覆盖索引，需要回表查询数据，在排序缓冲区中对数据进行排序</p><p><img src="https://s2.loli.net/2022/11/24/CHQJcrTL8Np1deS.png" alt="image-20221124233452371"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/11/24/ovCHQsAzlxJiGSw.png" alt="image-20221124234020342"></p><ul><li>根据排序字段建立合适的索引，多字段排序时，要遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，升序和降序混合要注意联合索引在创建时的规则（asc/desc）</li><li>如果大数据排序不可避免的出现filesort，可以适当增加排序缓冲区大小sort_buffer_size（默认256kb-如果超出缓冲区将到磁盘文件进行排序）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><p>没有索引的情况下，出现 <code>Using temporary</code></p><p><img src="https://s2.loli.net/2022/11/25/3RxaZNeYmEzSsFG.png" alt="image-20221125012542346"></p><p>创建索引的情况下，出现<code>Using index</code></p><p><img src="https://s2.loli.net/2022/11/25/ibf3maWnI15F9Zh.png" alt="image-20221125012715904"></p><p>不符合最左前缀法则，出现了<code>Using temporary </code></p><p><img src="https://s2.loli.net/2022/11/26/vepozfdjqQ586Bc.png" alt="image-20221126010824433"></p><p><img src="https://s2.loli.net/2022/11/25/kEijzqKDHY3bplh.png" alt="image-20221125014244222"></p><p><img src="https://s2.loli.net/2022/11/25/IqhDNHOjQbE1zLY.png" alt="image-20221125014334850"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><ul><li><p>在分组操作时，可以通过索引提高效率</p></li><li><p>分组操作时，索引的使用满足最左前缀法则</p></li></ul><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p><img src="https://s2.loli.net/2022/11/26/nIfG87kuVvAyoir.png" alt="image-20221126012011290"></p><p>在数据量较大时，使用limit进行分页操作，偏移量越大，分页查询的效率越低。</p><blockquote><p>因为在执行limit分页查询时，MySQL需要排序页号前面的数据，返回limit指定区间的记录，丢弃前面全部的记录，使得查询排序的代价较大。</p></blockquote><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>在分页查询时，通过<strong>覆盖索引后子查询</strong>的方式进行优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pms_product a, (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> pms_product <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">1100000</span>, <span class="number">2</span>) b <span class="keyword">WHERE</span> a.id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/27/2U48wVkfDZtcxba.png" alt="image-20221127010814204"></p><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p><img src="https://s2.loli.net/2022/11/27/pfYekUbDqdhlCxK.png" alt="image-20221127011121933"></p><blockquote><ul><li>MyISAM引擎把一个表的总行数存储在磁盘上，因此执行count(*)时直接返回这个数，效率比较高，但这并不支持条件搜索。</li><li>InnoDB引擎执行count(*)时需将数据一行一行读出来再累积计数。</li></ul></blockquote><h4 id="InnoDB优化"><a href="#InnoDB优化" class="headerlink" title="InnoDB优化"></a>InnoDB优化</h4><p>将表的总行数存储在内存数据库中</p><h4 id="count用法"><a href="#count用法" class="headerlink" title="count用法"></a>count用法</h4><blockquote><p>count()是一个聚合函数，对于返回结果集一行一行的判断，如果count()函数的参数不是null，累计值加1，否则不加，最后返回累计值。</p></blockquote><table><thead><tr><th align="left">count用法</th><th>含义</th></tr></thead><tbody><tr><td align="left">count(主键)</td><td>InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加。</td></tr><tr><td align="left">count(字段)</td><td>没有not null约束，InnoDB引擎会遍历整张表把每一行的字段都取出来，返回给服务层，服务层判断是否围为null，不为null，计数累加。有not null约束，InnoDB引擎会遍历整张表把每一行的字段值都取出来，给服务层直接按行进行累加。</td></tr><tr><td align="left">count(1)</td><td>InnoDB引擎遍历整张表，不取值，服务层对于返回的每一行，直接按行进行累加。</td></tr><tr><td align="left">count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是做了专门的优化，不取值，服务层直接按行进行累加。</td></tr></tbody></table><blockquote><p>按照效率排序的话，count(字段) &lt; count(主键id) &lt; count(1) ~ count(<em>)，尽量使用count(</em>)</p></blockquote><h3 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h3><p>当开启多个事务执行根据id修改一条数据时，事务提交后，行锁释放。</p><p><img src="https://s2.loli.net/2022/11/27/oqr98UQHEa5jPWb.png" alt="image-20221127174446381"></p><p><img src="https://s2.loli.net/2022/11/27/Nnp54lwkvSEOyXs.png" alt="image-20221127174501154"></p><p>当我们开启多个事务，执行没有走索引的修改语句，行锁升级了表锁，导致update语句的性能大大降低。</p><p><img src="https://s2.loli.net/2022/11/27/fglXByKokchTnxI.png" alt="image-20221127174857488"></p><p><img src="https://s2.loli.net/2022/11/27/OvZ8TMr3QCwAcnW.png" alt="image-20221127174907041"></p><p>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。一旦行锁升级为表锁，update语句的性能将大大降低。</p><p><img src="https://s2.loli.net/2022/11/27/IkaX8tgqLiw4QTU.png" alt="image-20221127180418427"></p><p><img src="https://s2.loli.net/2022/11/27/2kVFY8zfKynDTbr.png" alt="image-20221127180428046"></p><p>尽量根据主键/索引字段进行数据更新。</p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p> <img src="https://s2.loli.net/2022/11/27/DyVfhlI1Ajc3Fmu.png" alt="image-20221127182837967"></p><h2 id="视图-存储过程-触发器"><a href="#视图-存储过程-触发器" class="headerlink" title="视图/存储过程/触发器"></a>视图/存储过程/触发器</h2><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h2 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h2><h2 id="MySQL管理"><a href="#MySQL管理" class="headerlink" title="MySQL管理"></a>MySQL管理</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL进阶篇&quot;&gt;&lt;a href=&quot;#MySQL进阶篇&quot; class=&quot;headerlink&quot; title=&quot;MySQL进阶篇&quot;&gt;&lt;/a&gt;MySQL进阶篇&lt;/h1&gt;&lt;h2 id=&quot;存储引擎&quot;&gt;&lt;a href=&quot;#存储引擎&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker在Linux环境下常见部署</title>
    <link href="http://example.com/2023/01/08/Docker%E5%B8%B8%E8%A7%81%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/01/08/Docker%E5%B8%B8%E8%A7%81%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</id>
    <published>2023-01-08T02:30:55.000Z</published>
    <updated>2023-01-09T14:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker在Linux环境下常见部署"><a href="#Docker在Linux环境下常见部署" class="headerlink" title="Docker在Linux环境下常见部署"></a>Docker在Linux环境下常见部署</h1><blockquote><p>Docker是一个开源的应用容器引擎，让开发者可以打包应用及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux或Windows机器上。使用Docker可以更方便地打包、测试以及部署应用程序。</p></blockquote><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="安装yum-utils"><a href="#安装yum-utils" class="headerlink" title="安装yum-utils"></a>安装yum-utils</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="为yum源添加docker仓库位置"><a href="#为yum源添加docker仓库位置" class="headerlink" title="为yum源添加docker仓库位置"></a>为yum源添加docker仓库位置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="自启动Docker"><a href="#自启动Docker" class="headerlink" title="自启动Docker"></a>自启动Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="查看Docker信息"><a href="#查看Docker信息" class="headerlink" title="查看Docker信息"></a>查看Docker信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h3 id="查看Docker帮助"><a href="#查看Docker帮助" class="headerlink" title="查看Docker帮助"></a>查看Docker帮助</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker help</span><br></pre></td></tr></table></figure><h3 id="查看Docker状态"><a href="#查看Docker状态" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="配置Docker镜像加速器"><a href="#配置Docker镜像加速器" class="headerlink" title="配置Docker镜像加速器"></a>配置Docker镜像加速器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://fsfhxt97.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><blockquote><p>默认情况下，当docker启动容器映射端口时，会直接使用iptables开启添加端口</p></blockquote><h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h3 id="自启防火墙"><a href="#自启防火墙" class="headerlink" title="自启防火墙"></a>自启防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><h3 id="查看开放端口"><a href="#查看开放端口" class="headerlink" title="查看开放端口"></a>查看开放端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure><h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="重载防火墙"><a href="#重载防火墙" class="headerlink" title="重载防火墙"></a>重载防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="Docker镜像常用命令"><a href="#Docker镜像常用命令" class="headerlink" title="Docker镜像常用命令"></a>Docker镜像常用命令</h3><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search java</span><br></pre></td></tr></table></figure><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java:8</span><br></pre></td></tr></table></figure><h4 id="查看镜像版本"><a href="#查看镜像版本" class="headerlink" title="查看镜像版本"></a>查看镜像版本</h4><blockquote><p>docker search命令只能查找出是否存在该镜像，不能找到该镜像支持的版本，所以我们需要docker hub官网来搜索支持的版本</p></blockquote><ul><li><p>进入docker hub官网地址：<a href="https://hub.docker.com/">https://hub.docker.com</a></p></li><li><p>搜索镜像版本与说明</p><p><img src="https://s2.loli.net/2023/01/09/UmS7Tn6wcbVuJLE.png"></p></li></ul><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi java:8</span><br></pre></td></tr></table></figure><h4 id="强制删除指定名称镜像"><a href="#强制删除指定名称镜像" class="headerlink" title="强制删除指定名称镜像"></a>强制删除指定名称镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f java:8</span><br></pre></td></tr></table></figure><h4 id="删除所有没有使用的镜像"><a href="#删除所有没有使用的镜像" class="headerlink" title="删除所有没有使用的镜像"></a>删除所有没有使用的镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi `docker images | grep none | awk &#x27;&#123;print $3&#125;&#x27;`</span><br></pre></td></tr></table></figure><h4 id="强制删除所有镜像"><a href="#强制删除所有镜像" class="headerlink" title="强制删除所有镜像"></a>强制删除所有镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker iamges)</span><br></pre></td></tr></table></figure><h4 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t 表示指定：镜像仓库名称/镜像名称：镜像标签.表示使用当前目录下的dockerfile文件</span></span><br><span class="line">docker build -t $&#123;group_name&#125;/$&#123;app_name&#125;:$&#123;app_version&#125; .</span><br></pre></td></tr></table></figure><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Docker hub</span></span><br><span class="line">docker login</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地镜像标签为远程仓库名称</span></span><br><span class="line">docker tag $&#123;group_name&#125;/$&#123;app_name&#125;:$&#123;app_version&#125; $&#123;docker_group_name&#125;/$&#123;app_name&#125;:$&#123;app_version&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送远程仓库</span></span><br><span class="line">docker push $&#123;docker_group_name&#125;/$&#123;app_name&#125;:$&#123;app_version&#125;</span><br></pre></td></tr></table></figure><h3 id="Docker容器常用命令"><a href="#Docker容器常用命令" class="headerlink" title="Docker容器常用命令"></a>Docker容器常用命令</h3><h4 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:1.17.0</span><br></pre></td></tr></table></figure><blockquote><ul><li>-p：将宿主机和容器端口进行映射，格式为：宿主机端口：容器端口</li><li>–name：指定容器名称，可以通过容器名称来操作容器</li><li>-e：设置容器的环境变量，TZ设置的是时区</li><li>-v：将容器上的文件挂载到宿主机上，格式为：宿主机文件目录：容器文件目录</li><li>-d：容器以后台方式运行</li></ul></blockquote><h4 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h4><h5 id="列出运行中的容器"><a href="#列出运行中的容器" class="headerlink" title="列出运行中的容器"></a>列出运行中的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h5 id="列出所有容器"><a href="#列出所有容器" class="headerlink" title="列出所有容器"></a>列出所有容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$ContainerName</span>表示容器名称,<span class="variable">$ContainerId</span>表示容器ID,</span></span><br><span class="line">docker stop $ContainerName</span><br><span class="line">(or docker stop $ContainerId)</span><br></pre></td></tr></table></figure><h4 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill $ContainerName</span><br></pre></td></tr></table></figure><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start $ContainerName</span><br></pre></td></tr></table></figure><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart $ContainerName</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><h5 id="查询容器的pid"><a href="#查询容器的pid" class="headerlink" title="查询容器的pid:"></a>查询容器的pid:</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; $ContainerName</span><br></pre></td></tr></table></figure><h5 id="根据容器的pid进入容器："><a href="#根据容器的pid进入容器：" class="headerlink" title="根据容器的pid进入容器："></a>根据容器的pid进入容器：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter -t &quot;$pid&quot; --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><h5 id="删除指定容器"><a href="#删除指定容器" class="headerlink" title="删除指定容器"></a>删除指定容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $ContainerName</span><br></pre></td></tr></table></figure><h5 id="强制删除指定容器"><a href="#强制删除指定容器" class="headerlink" title="强制删除指定容器"></a>强制删除指定容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $ContainerName</span><br></pre></td></tr></table></figure><h5 id="按名称通配符删除容器"><a href="#按名称通配符删除容器" class="headerlink" title="按名称通配符删除容器"></a>按名称通配符删除容器</h5><blockquote><p>删除以名称demo-开头的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm `docker ps -a | grep demo-* | awk &#x27;&#123;print $1&#125;&#x27;`</span><br></pre></td></tr></table></figure><h5 id="强制删除所有容器"><a href="#强制删除所有容器" class="headerlink" title="强制删除所有容器"></a>强制删除所有容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $&#123;docker ps -a -q&#125;</span><br></pre></td></tr></table></figure><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><h5 id="查看容器产生的全部日志"><a href="#查看容器产生的全部日志" class="headerlink" title="查看容器产生的全部日志"></a>查看容器产生的全部日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs $ContainerName</span><br></pre></td></tr></table></figure><h5 id="动态查看容器的日志"><a href="#动态查看容器的日志" class="headerlink" title="动态查看容器的日志"></a>动态查看容器的日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f $ContainerName</span><br></pre></td></tr></table></figure><h4 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; $ContainerName</span><br></pre></td></tr></table></figure><h4 id="修改容器的启动方式"><a href="#修改容器的启动方式" class="headerlink" title="修改容器的启动方式"></a>修改容器的启动方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器启动方式修改为always</span></span><br><span class="line">docker container update --restart=always $ContainerName</span><br></pre></td></tr></table></figure><h4 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /etc/localtime $ContainerName:/etc/</span><br></pre></td></tr></table></figure><h4 id="查看容器资源占用状态"><a href="#查看容器资源占用状态" class="headerlink" title="查看容器资源占用状态"></a>查看容器资源占用状态</h4><h5 id="查看指定容器资源占用状态，比如cpu、内存、网络、io状态"><a href="#查看指定容器资源占用状态，比如cpu、内存、网络、io状态" class="headerlink" title="查看指定容器资源占用状态，比如cpu、内存、网络、io状态"></a>查看指定容器资源占用状态，比如cpu、内存、网络、io状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats $ContainerName</span><br></pre></td></tr></table></figure><h5 id="查看所有容器资源占用情况"><a href="#查看所有容器资源占用情况" class="headerlink" title="查看所有容器资源占用情况"></a>查看所有容器资源占用情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats -a</span><br></pre></td></tr></table></figure><h5 id="查看容器磁盘使用情况"><a href="#查看容器磁盘使用情况" class="headerlink" title="查看容器磁盘使用情况"></a>查看容器磁盘使用情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h4 id="执行容器内部命令"><a href="#执行容器内部命令" class="headerlink" title="执行容器内部命令"></a>执行容器内部命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it $ContainerName /bin/bash</span><br></pre></td></tr></table></figure><h4 id="指定账号进入容器内部"><a href="#指定账号进入容器内部" class="headerlink" title="指定账号进入容器内部"></a>指定账号进入容器内部</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root账号进入容器内部</span></span><br><span class="line">docker exec -it --user root $ContainerName /bin/bash</span><br></pre></td></tr></table></figure><h4 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/09/qtulH735KymD2YX.png" alt="image-20230109140922874"></p><h4 id="创建外部网络"><a href="#创建外部网络" class="headerlink" title="创建外部网络"></a>创建外部网络</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge my-bridge-network</span><br></pre></td></tr></table></figure><h4 id="指定容器网络"><a href="#指定容器网络" class="headerlink" title="指定容器网络"></a>指定容器网络</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">--network my-bridge-network \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h3 id="修改镜像存放位置"><a href="#修改镜像存放位置" class="headerlink" title="修改镜像存放位置"></a>修改镜像存放位置</h3><h5 id="查看Docker镜像的存放位置"><a href="#查看Docker镜像的存放位置" class="headerlink" title="查看Docker镜像的存放位置"></a>查看Docker镜像的存放位置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep &quot;Docker Root Dir&quot;</span><br></pre></td></tr></table></figure><h5 id="关闭Docker服务"><a href="#关闭Docker服务" class="headerlink" title="关闭Docker服务"></a>关闭Docker服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h5 id="移动原镜像文件至目标目录"><a href="#移动原镜像文件至目标目录" class="headerlink" title="移动原镜像文件至目标目录"></a>移动原镜像文件至目标目录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /var/lib/docker /mydata/docker</span><br></pre></td></tr></table></figure><h5 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /mydata/docker /var/lib/docker</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/09/WTK4l1EtxobXCQM.png" alt="image-20230109151125629"></p><p><img src="https://s2.loli.net/2023/01/09/k5RqSYd3iONQXcE.png" alt="image-20230109151133080"></p><h3 id="Docker容器清理"><a href="#Docker容器清理" class="headerlink" title="Docker容器清理"></a>Docker容器清理</h3><h4 id="查看Docker占用磁盘空间情况"><a href="#查看Docker占用磁盘空间情况" class="headerlink" title="查看Docker占用磁盘空间情况"></a>查看Docker占用磁盘空间情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h4 id="删除所有关闭的容器"><a href="#删除所有关闭的容器" class="headerlink" title="删除所有关闭的容器"></a>删除所有关闭的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a | grep Exit | cut -d &#x27; &#x27; -f 1 | xargs docker rm</span><br></pre></td></tr></table></figure><h4 id="删除所有虚悬-dangling-镜像（没有Tag的镜像）"><a href="#删除所有虚悬-dangling-镜像（没有Tag的镜像）" class="headerlink" title="删除所有虚悬(dangling)镜像（没有Tag的镜像）"></a>删除所有虚悬(dangling)镜像（没有Tag的镜像）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images | grep &quot;^&lt;none&gt;&quot; | awk &quot;&#123;print $3&#125;&quot;)</span><br></pre></td></tr></table></figure><h4 id="删除所有虚悬-dangling-数据卷"><a href="#删除所有虚悬-dangling-数据卷" class="headerlink" title="删除所有虚悬(dangling)数据卷"></a>删除所有虚悬(dangling)数据卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm $(docker volume ls -qf dangling=true)</span><br></pre></td></tr></table></figure><h2 id="Docker容器安装"><a href="#Docker容器安装" class="headerlink" title="Docker容器安装"></a>Docker容器安装</h2><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><h4 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h4 id="运行MySQL容器"><a href="#运行MySQL容器" class="headerlink" title="运行MySQL容器"></a>运行MySQL容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql  \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><h4 id="运行MySQL的docker容器"><a href="#运行MySQL的docker容器" class="headerlink" title="运行MySQL的docker容器"></a>运行MySQL的docker容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><h4 id="打开MySQL客户端"><a href="#打开MySQL客户端" class="headerlink" title="打开MySQL客户端"></a>打开MySQL客户端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot --default-character-set=utf8</span><br></pre></td></tr></table></figure><h4 id="创建一个账号并修改权限"><a href="#创建一个账号并修改权限" class="headerlink" title="创建一个账号并修改权限"></a>创建一个账号并修改权限</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;reader&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建数据库</span></span><br><span class="line">create datebase $&#123;dabebase&#125; character set utf8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装上传下载插件并将sql文件上传到Linux服务器中的/mydata目录</span></span><br><span class="line">yum -y install lrzsz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝sql文件至mysql容器</span></span><br><span class="line">docker cp /mydata/*.sql mysql:/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将sql文件导入数据库</span></span><br><span class="line">use $&#123;dabebase&#125;</span><br><span class="line">source /*.sql</span><br></pre></td></tr></table></figure><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><h4 id="拉取Redis镜像"><a href="#拉取Redis镜像" class="headerlink" title="拉取Redis镜像"></a>拉取Redis镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h4 id="运行Redis容器"><a href="#运行Redis容器" class="headerlink" title="运行Redis容器"></a>运行Redis容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line"> --restart=always \</span><br><span class="line">-d redis redis-server --appendonly yes --requirepass &quot;root&quot;</span><br></pre></td></tr></table></figure><h4 id="进入Redis容器"><a href="#进入Redis容器" class="headerlink" title="进入Redis容器"></a>进入Redis容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br><span class="line">redis-cli</span><br><span class="line">auth root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者 docker <span class="built_in">exec</span> -it redis redis-cli</span></span><br></pre></td></tr></table></figure><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><h4 id="拉取Nginx镜像"><a href="#拉取Nginx镜像" class="headerlink" title="拉取Nginx镜像"></a>拉取Nginx镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="运行Nginx容器"><a href="#运行Nginx容器" class="headerlink" title="运行Nginx容器"></a>运行Nginx容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h4 id="拷贝配置文件至指定目录"><a href="#拷贝配置文件至指定目录" class="headerlink" title="拷贝配置文件至指定目录"></a>拷贝配置文件至指定目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container cp nginx:/etc/nginx /mydata/nginx/</span><br></pre></td></tr></table></figure><h4 id="修复文件名称"><a href="#修复文件名称" class="headerlink" title="修复文件名称"></a>修复文件名称</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mydata/nginx/</span><br><span class="line">mv nginx conf</span><br></pre></td></tr></table></figure><h4 id="销毁容器"><a href="#销毁容器" class="headerlink" title="销毁容器"></a>销毁容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f nginx</span><br></pre></td></tr></table></figure><h4 id="运行Nginx容器-1"><a href="#运行Nginx容器-1" class="headerlink" title="运行Nginx容器"></a>运行Nginx容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-v /home/apps/home/apps \</span><br><span class="line">--restart=always \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h3 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><h4 id="拉取Jenkins镜像"><a href="#拉取Jenkins镜像" class="headerlink" title="拉取Jenkins镜像"></a>拉取Jenkins镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><h4 id="运行Jenkins容器"><a href="#运行Jenkins容器" class="headerlink" title="运行Jenkins容器"></a>运行Jenkins容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins \</span><br><span class="line">-p 8090:8080 -p 50000:5000 \</span><br><span class="line">-u root \</span><br><span class="line">-v /mydata/jenkins_home:/var/jenkins_home \</span><br><span class="line">--restart=always \</span><br><span class="line">-d jenkins/jenkins</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><h4 id="拉取RabbitMQ镜像"><a href="#拉取RabbitMQ镜像" class="headerlink" title="拉取RabbitMQ镜像"></a>拉取RabbitMQ镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.9-management</span><br></pre></td></tr></table></figure><h4 id="运行RabbitMQ容器"><a href="#运行RabbitMQ容器" class="headerlink" title="运行RabbitMQ容器"></a>运行RabbitMQ容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 5672:5672 -p 15672:15672 --name rabbitmq \</span><br><span class="line">-d rabbitmq:3.9-management</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker在Linux环境下常见部署&quot;&gt;&lt;a href=&quot;#Docker在Linux环境下常见部署&quot; class=&quot;headerlink&quot; title=&quot;Docker在Linux环境下常见部署&quot;&gt;&lt;/a&gt;Docker在Linux环境下常见部署&lt;/h1&gt;&lt;bloc</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/01/07/Redis%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2023/01/07/Redis%E9%AB%98%E7%BA%A7/</id>
    <published>2023-01-07T00:31:22.000Z</published>
    <updated>2023-01-18T17:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis分布式缓存"><a href="#Redis分布式缓存" class="headerlink" title="Redis分布式缓存"></a>Redis分布式缓存</h1><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h3 id="单节点Redis问题"><a href="#单节点Redis问题" class="headerlink" title="单节点Redis问题"></a>单节点Redis问题</h3><ul><li>数据丢失问题：redis是内存存储，服务重启可能会导致数据丢失</li><li>并发能力问题：redis本身具有较强的并发能力，但是无法满足高并发的场景</li><li>故障恢复问题：Redis宕机会导致服务不可用，需要一种自动故障恢复的方法</li><li>存储能力问题：Redis单节点存储数据量难以满足海量数据需求</li></ul><p><img src="https://s2.loli.net/2023/01/08/NbxMuFW7miGhljw.png" alt="image-20230108005158866"></p><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><blockquote><p>RDB(Redis Database Backup file-Redis数据备份文件，也称Redis数据快照）指将内存中的所有数据记录到磁盘中。当Redis实例故障重启时，从磁盘读取快照文件，恢复数据。</p><p>快照文件称为RDB文件，默认保存在当前运行目录中。Redis停机时会执行一次RDB。</p></blockquote><p><img src="https://s2.loli.net/2023/01/08/mOUS3QZ6RBh2pIv.png" alt="image-20230108010846854"></p><h4 id="RDB文件"><a href="#RDB文件" class="headerlink" title="RDB文件"></a>RDB文件</h4><blockquote><p>关闭服务之前，进行一次RDB文件的保存</p></blockquote><p><img src="https://s2.loli.net/2023/01/08/SQ5usAFn6W71tkX.png" alt="image-20230108191819684"></p><blockquote><p>查看挂载目录下的RDB文件</p></blockquote><p><img src="https://s2.loli.net/2023/01/08/fXkqKOFlCJbSY5H.png" alt="image-20230108192014178"></p><h4 id="Redis配置RDB"><a href="#Redis配置RDB" class="headerlink" title="Redis配置RDB"></a>Redis配置RDB</h4><blockquote><p>Redis内部存在触发RDB的机制，可以在配置文件redis.conf文件中进行配置。</p></blockquote><p><img src="https://s2.loli.net/2023/01/08/AEITQclVNFZytHw.png" alt="image-20230108011229515"></p><p><img src="https://s2.loli.net/2023/01/09/vys9aCNJUFEMzHq.png" alt="image-20230109001222260"></p><p><img src="https://s2.loli.net/2023/01/09/gcCBXoRNbQKUVmw.png" alt="image-20230109001325781"></p><p><img src="https://s2.loli.net/2023/01/09/eQcbJrVGgn5oXy3.png" alt="image-20230109001523581"></p><h4 id="Redis的Fork原理"><a href="#Redis的Fork原理" class="headerlink" title="Redis的Fork原理"></a>Redis的Fork原理</h4><blockquote><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。异步完成fork后读取内存数据并写入RDB文件中。</p></blockquote><p>在linux系统中，所有的进程都没有办法直接操作物理内存，操作系统会分配虚拟内存，而主进程只能操作虚拟内存，操作系统会维护一个虚拟内存与物理内存之间的映射关系表（称为页表），bgsave进行fork子进程时，只将页表进行复制。</p><p><img src="https://s2.loli.net/2023/01/09/RSuqtB8WZTV5o4U.png" alt="image-20230109002527682"></p><p>为了防止同时读写带来的脏数据，fork采用copy-on-write技术</p><ul><li><p>当主进程执行读操作时，访问只读的共享内存空间</p></li><li><p>当主进程执行写操作时，会拷贝一份数据副本，进行读写操作</p></li></ul><p><img src="https://s2.loli.net/2023/01/09/JZeBbPFMdaUg1VI.png" alt="image-20230109002542007"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><h5 id="RDB的bgsave的基本流程"><a href="#RDB的bgsave的基本流程" class="headerlink" title="RDB的bgsave的基本流程"></a>RDB的bgsave的基本流程</h5><ul><li>fork主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的RDB文件</li><li>用新RDB文件替换旧的RDB文件</li></ul><h5 id="RDB会执行时间，save命令的含义"><a href="#RDB会执行时间，save命令的含义" class="headerlink" title="RDB会执行时间，save命令的含义"></a>RDB会执行时间，save命令的含义</h5><ul><li>默认是服务停止时执行</li><li>save 60 1000代表60秒内至少执行1000次修改则触发RDB</li></ul><h5 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h5><ul><li>RDB执行时间间隔较长，两次RDB之间写入数据存在丢失的风险</li><li>Fork子进程、压缩、创建RDB文件都是比较耗时</li></ul><p><img src="https://s2.loli.net/2023/01/09/spgCMDueazmk6Hx.png" alt="image-20230109003106114"></p><h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><h4 id="AOF定义"><a href="#AOF定义" class="headerlink" title="AOF定义"></a>AOF定义</h4><blockquote><p>AOF(Append Only File)是追加文件，Redis处理的每一个写命令都会记录到在AOF文件，可以看作是命令日志文件。</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/TlOpdCLcWEVrsSb.png" alt="image-20230110090633806"></p><h4 id="AOF开启配置"><a href="#AOF开启配置" class="headerlink" title="AOF开启配置"></a>AOF开启配置</h4><blockquote><p>AOF默认是关闭状态，在配置文件redis.conf中开启AOF</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#  开启AOF功能，默认是关闭状态</span><br><span class="line">appendonly yes</span><br><span class="line"># AOF文件名称</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br></pre></td></tr></table></figure><blockquote><p>通过redis.conf文件来配置AOF命令记录的频率</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 表示每次执行一次写命令，立即记录到AOF文件中</span><br><span class="line">appendfsync always</span><br><span class="line"># 写命令执行完后先放入AOF缓冲区，表示每隔一秒将缓冲区的数据写到AOF文件（默认方案）</span><br><span class="line">appendfsync everysec</span><br><span class="line"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓存区内容写到AOF文件</span><br><span class="line">appendfsync no</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/10/unMgHpOR2seiJrm.png" alt="image-20230110091731459"></p><table><thead><tr><th>appendfsync配置项</th><th>刷盘时机</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>always</td><td>同步刷盘</td><td>可靠性高，数据几乎不会丢失</td><td>性能影响大</td></tr><tr><td>everysec</td><td>每秒刷盘</td><td>性能适中</td><td>可能会丢失1秒的数据</td></tr><tr><td>no</td><td>操作系统控制</td><td>性能最好</td><td>可靠性比较差，可能会丢失大量数据</td></tr></tbody></table><blockquote><p>关闭redis，会有一次AOF文件的同步</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/p5Mh7eb24gajlZz.png" alt="image-20230110093258645"></p><blockquote><p>redis会从AOF文件中进行一次数据加载 </p></blockquote><p><img src="https://s2.loli.net/2023/01/10/ZLxgjaHBwXMhsmb.png" alt="image-20230110093514995"></p><blockquote><p>由于AOF是记录命令，AOF文件会比RBD文件大，而且AOF会记录同一个key的多次写操作，只有最后一次写操作命令才有意义。</p><p>通过<code>brewriteaof</code>命令可以后台开启独立线程异步让AOF文件执行重写功能，用最少的命令达到相同的效果</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/zU7gsFxH6f3W1hO.png" alt="image-20230110094021351"></p><p><img src="https://s2.loli.net/2023/01/10/Wc7FJIZoNiKtOg4.png" alt="image-20230110094001829"></p><blockquote><p>Redis会在触发阈值时自动重写AOF文件，阈值可以在配置文件redis.conf中进行配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># AOF文件与上一次重写后文件增加超过百分比触发重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"># AOF文件体积最小多大以上触发重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/10/N4dEl1WzYbhC9ny.png" alt="image-20230110095108606"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2023/01/10/zrQDhE2I8Jsx4oi.png" alt="image-20230110095557170"></p><h2 id="Redis主从"><a href="#Redis主从" class="headerlink" title="Redis主从"></a>Redis主从</h2><h3 id="搭建主从架构"><a href="#搭建主从架构" class="headerlink" title="搭建主从架构"></a>搭建主从架构</h3><blockquote><p>单节点redis的并发能力是存在上限的，要提高redis的并发能力，需要搭建主从集群，实现读写分离</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/QwMr75DPoIi3uTk.png" alt="image-20230110100433494"></p><h4 id="搭建redis从节点"><a href="#搭建redis从节点" class="headerlink" title="搭建redis从节点"></a>搭建redis从节点</h4><blockquote><p>使用docker搭建从节点，端口分别是6378和6377</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.1&#x27;</span><br><span class="line">services:</span><br><span class="line">  master:</span><br><span class="line">    environment: </span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: redis-master</span><br><span class="line">    command: redis-server --replica-announce-ip 1.117.34.49 --replica-announce-port 6376 --requirepass 123456 --masterauth 123456 --appendonly yes</span><br><span class="line">    ports:</span><br><span class="line">      - 6376:6379</span><br><span class="line">    volumes:</span><br><span class="line">      - /mydata/redis-cluster/redis-master:/data  </span><br><span class="line">  slave1:</span><br><span class="line">    environment: </span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: redis-slave1</span><br><span class="line">    command: redis-server --slaveof 1.117.34.49 6379 --requirepass 123456 --replica-announce-ip 1.117.34.49 --replica-announce-port 6377 --masterauth 123456 --appendonly yes</span><br><span class="line">    ports:</span><br><span class="line">      - 6377:6379</span><br><span class="line">    volumes:</span><br><span class="line">      - /mydata/redis-cluster/redis-slave1:/data  </span><br><span class="line">  slave2:</span><br><span class="line">    environment: </span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: redis-slave2</span><br><span class="line">    command: redis-server --slaveof 1.117.34.49 6379 --requirepass 123456 --replica-announce-ip 1.117.34.49 --replica-announce-port 6378 --masterauth 123456 --appendonly yes</span><br><span class="line">    ports:</span><br><span class="line">      - 6378:6379</span><br><span class="line">    volumes:</span><br><span class="line">      - /mydata/redis-cluster/redis-salve2:/data  </span><br></pre></td></tr></table></figure><h4 id="开启主从关系的两种方式"><a href="#开启主从关系的两种方式" class="headerlink" title="开启主从关系的两种方式"></a>开启主从关系的两种方式</h4><ul><li><p>修改配置文件（永久生效）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在配置文件redis.conf中添加配置</span></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用redis-cli客户端，执行slaveof命令（重启失效）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在redis5.0之前的版本执行slaveof命令</span></span><br><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在redis5.0之后的版本执行replicaof命令</span></span><br><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><blockquote><p>由于在docker容器内部进行操作，即使在一台主机上，也不能使用localhost代替masterip</p></blockquote></li></ul><p><img src="https://s2.loli.net/2023/01/10/1zKRjfayu53QDVH.png" alt="image-20230110121320282"></p><blockquote><p>进入主节点，查看主从关系</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO REPLICATION</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/10/rACHbGqamTYU89k.png" alt="image-20230110123157694"></p><blockquote><p>在主节点存储数据，在从节点可以查询</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/uwHLjqyR7fSWmTI.png" alt="image-20230110123641859"></p><p><img src="https://s2.loli.net/2023/01/10/yz9YN46jVRQHnEg.png" alt="image-20230110123707448"></p><h4 id="总计"><a href="#总计" class="headerlink" title="总计"></a>总计</h4><p><img src="https://s2.loli.net/2023/01/10/RPfxXKOY9SyknhU.png" alt="image-20230110104432429"></p><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><blockquote><p>在2.8版本之前只有全量复制，在2.8版本之后有全量复制和增量复制</p></blockquote><ul><li><code>全量（同步）复制</code>：第一次同步</li><li><code>增量（同步）复制</code>：会将主从库网络断连期间主库收到的命令，同步给从库</li></ul><h4 id="全量同步"><a href="#全量同步" class="headerlink" title="全量同步"></a><code>全量同步</code></h4><blockquote><p>当启动多个Redis实例时，它们之间就可以通过<code>replicaof</code>命令（或者<code>slaveof</code>命令）形成主库和从库的关系，之后会按照三个阶段完成数据的第一次同步</p></blockquote><p><img src="https://pdai.tech/images/db/redis/db-redis-copy-2.jpg" alt="img"></p><blockquote><p>第一阶段：主从库建立连接时，从库发送主库一个psync命令请求数据同步，主库根据这个命令的参数启动辅助，psync命令包括对应replid和偏移量offset两个参数，当replid与主库的replid不一致时，主库会使用全量复制并发送FULLRESYNC响应命令并带上两个参数：replid和offset（偏移量用于记录复制进度）</p><p>第二阶段：主库执行bgsave命令，依赖内存快照生成RDB文件并将文件发送到从库，从库接收到RDB文件后，会先清空本地当前数据，加载RDB文件。在主库将文件发送往从库的过程，这个过程时比较耗时的且有可能受网络波动的影响，但主库并不会被阻塞，正常接收请求，为了保证数据一致性，主库会将RDB文件生成后的所有写命令记录到内存中专门的repl_baklog中</p><p>第三阶段：将第二阶段记录的repl_baklog中的写命令发送给从库，从库接收到的命令并执行，完成同步。</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/5JprACMySFftU9d.png"></p><h5 id="从节点日志"><a href="#从节点日志" class="headerlink" title="从节点日志"></a><code>从节点日志</code></h5><p><img src="https://s2.loli.net/2023/01/10/JB1uWC2MS8AicN7.png" alt="image-20230110152016410"></p><h5 id="主节点日志"><a href="#主节点日志" class="headerlink" title="主节点日志"></a><code>主节点日志</code></h5><p><img src="https://s2.loli.net/2023/01/10/YuMvB4sHoEQFrVp.png" alt="image-20230110152327231"></p><h5 id="全量复制总结"><a href="#全量复制总结" class="headerlink" title="全量复制总结"></a>全量复制总结</h5><p><img src="https://s2.loli.net/2023/01/10/uDZJve4NWmIF1zC.png" alt="image-20230110151505640"></p><h4 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a><code>增量同步</code></h4><blockquote><p>主从第一次同步是全量同步，如果从节点重启或者网络闪断后，则执行增量同步</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/FEGujqAaepXHTbK.jpg" alt="img"></p><blockquote><p>repl_baklog是环形缓冲区，存储大小存在上限，在从库重启或者网络闪断太久，从库会丢失掉那部分被新的写命令覆盖掉时，无法进行增量同步，从库和主库之间要进行全量复制。</p><p>从库记录着自己的relid，每个从库的复制进度不一定相同，从库重连时，主库会根据从库各自的复制进度决定这个从库是进行增量重复还是全量重复。</p></blockquote><p><img src="https://s2.loli.net/2023/01/10/c52RLAqBxmZQGKu.png"></p><p><img src="https://s2.loli.net/2023/01/10/WAv3UOP86gnaJrG.png" alt="image-20230110172014196"></p><h4 id="优化主从复制"><a href="#优化主从复制" class="headerlink" title="优化主从复制"></a>优化主从复制</h4><h5 id="优化全量同步性能："><a href="#优化全量同步性能：" class="headerlink" title="优化全量同步性能："></a><code>优化全量同步性能</code>：</h5><ul><li><p>在master配置文件中配置repl-diskless-sync-yes启用无磁盘复制，不生成RDB文件直接发送数据给从节点，避免全量同步时的磁盘IO </p></li><li><p>减少Redis单节点上的内存占用，减少RDB导致过多的磁盘IO和网络IO</p></li></ul><h5 id="尽量减少全量同步："><a href="#尽量减少全量同步：" class="headerlink" title="尽量减少全量同步："></a><code>尽量减少全量同步</code>：</h5><ul><li>适当提高repl_baklog的大小，发现slave宕机或者网络闪断时，尽快实现故障恢复，尽可能避免全量同步</li></ul><h5 id="降低主节点同步压力"><a href="#降低主节点同步压力" class="headerlink" title="降低主节点同步压力"></a><code>降低主节点同步压力</code></h5><ul><li>限制一个主节点上的从节点的数量，可以采用<code>主-从-从</code>的链式结构，减少master压力</li></ul><p><img src="https://s2.loli.net/2023/01/10/7ELpu5hyvUDiABN.png" alt="image-20230110174714704"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2023/01/10/54UFzgfMbhIriVu.png" alt="image-20230110174830537"></p><h2 id="Redis哨兵"><a href="#Redis哨兵" class="headerlink" title="Redis哨兵"></a>Redis哨兵</h2><blockquote><p>slave节点宕机恢复后，可以找到master节点同步数据，但是当master节点发生宕机时，我们需要怎么解决</p><p>在Redis主从集群中，哨兵机制是实现主从库自动切换的关键机制，它有效地解决主从复制模式下的故障转移问题</p></blockquote><p><img src="https://s2.loli.net/2023/01/18/AwiCPLeYskamW74.png" alt="sentinel"></p><h3 id="哨兵机制（Redis-Sentinel）的作用和原理"><a href="#哨兵机制（Redis-Sentinel）的作用和原理" class="headerlink" title="哨兵机制（Redis Sentinel）的作用和原理"></a>哨兵机制（Redis Sentinel）的作用和原理</h3><blockquote><p>在Redis2.8版本开始引入Redis Sentinel（Redis哨兵），哨兵的核心功能是实现主从集群的自动故障转移。</p></blockquote><h4 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h4><ul><li><code>监控</code>(monitoring)：哨兵不断检查master和slave是否按照预期工作</li><li><code>自动故障恢复</code>(automatic failover)：如果master不能正常工作，sentinel会将失效master的一个slave升级为新的master并让其他从节点同步新的master，当故障实例恢复后，以新的master作为主节点</li><li><code>配置提供者</code>（configuration provider）：在客户端进行初始化时，通过连接哨兵来获得当前redis集群服务的主节点地址</li><li><code>通知</code>（notification）：当集群发生故障转移时，哨兵会将最新的变更信息发送给redis客户端</li></ul><p><img src="https://s2.loli.net/2023/01/10/EXiAUq6pVfjkvdO.png" alt="image-20230110235424893"></p><h4 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a>服务状态监控</h4><blockquote><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令</p></blockquote><ul><li><code>主观下线</code>：如果某sentinel节点发现实例未在规定时间内响应，则认为该实例主观下线</li><li><code>客观下线</code>：若超过指定数量（quorum：一般为sentinel实例数量的一半）的sentinel认为该实例主观下线，则该实例为客观下线</li></ul><p><img src="https://s2.loli.net/2023/01/10/LMBbWzFNqAV9Eid.png" alt="img"></p><p><img src="https://s2.loli.net/2023/01/11/CTaXt3MeLJ4DO86.png" alt="image-20230111093909624"></p><h4 id="哨兵集群的选举"><a href="#哨兵集群的选举" class="headerlink" title="哨兵集群的选举"></a>哨兵集群的选举</h4><blockquote><p>为了安全性，一般哨兵会搭建分布式集群，作为分布式集群，必然涉及共识问题（即选举问题）</p><p>哨兵的选举机制一般是一个简单的<code>Raft算法</code>：选举的票数大于等于num(sentinel)/2+1时，该选举者将成为新的主节点</p></blockquote><h4 id="新主库的选出"><a href="#新主库的选出" class="headerlink" title="新主库的选出"></a>新主库的选出</h4><blockquote><p>master被判定客观下线，sentinel要从剩余的从库中选择一个新的master</p></blockquote><ul><li>过滤掉不健康的（下线或断线），没有响应哨兵ping的slave</li><li>过滤掉与master断开时间长短的slave，如果超过指定值（down-after-milliseconds*10），则会直接被排除</li><li>选择slave节点中salve-priority值最小的即优先级最高的（在配置文件redis.conf中配置）</li><li>选择复制偏移量最大即offset值最大的，越大说明数据越新，复制最完整的从节点</li><li>选择slave节点的运行id较小的</li></ul><p><img src="https://s2.loli.net/2023/01/11/UCfjvlErT2Xi5eg.jpg" alt="img"></p><h4 id="故障的转移"><a href="#故障的转移" class="headerlink" title="故障的转移"></a>故障的转移</h4><ul><li>sentinel给选举出的slave节点发送<code>replicaof on one</code>命令，让其脱离从节点，升级为主节点</li><li>将其他从节点发送slaveof命令，指向新的主节点，从新的master同步数据</li><li>通知应用程序客户端RedisClient主节点的变更信息即新的主节点的地址</li><li>修改原主节点即故障节点的配置文件，将其标记为slave，当故障节点恢复后会自动变成新主节点的从节点</li></ul><p><img src="https://s2.loli.net/2023/01/11/ceygupXdiRS1KvA.png" alt="img"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2023/01/11/j7OHkP8ZvyfdAwl.png" alt="image-20230111103827196"></p><h3 id="搭建哨兵集群"><a href="#搭建哨兵集群" class="headerlink" title="搭建哨兵集群"></a>搭建哨兵集群</h3><p><img src="https://s2.loli.net/2023/01/11/5l3JuFkQ7RvZdjN.png" alt="image-20230111103943735"></p><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">port</span> <span class="string">&lt;port&gt;</span><span class="comment"># 哨兵实例运行端口</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">announce-ip</span> <span class="string">&lt;ip&gt;</span><span class="comment"># 哨兵指定ip地址 </span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">&lt;master_name&gt;</span> <span class="string">&lt;master_ip&gt;</span> <span class="string">&lt;master_port&gt;</span> <span class="string">&lt;quonum&gt;</span> <span class="comment"># 哨兵指定主节点自定义名称、ip、端口以及用于选举的quonum</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">down-after-milliseconds</span> <span class="string">&lt;master_name&gt;</span> <span class="number">5000</span> <span class="comment"># 主观判定不可达时间</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">failover-timeout</span> <span class="string">&lt;master_name&gt;</span> <span class="number">5000</span> <span class="comment"># 故障转移超时时间</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">auth-pass</span> <span class="string">&lt;master_name&gt;</span> <span class="string">&lt;master_password&gt;</span> <span class="comment"># 设置master与slave验证密码</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span> <span class="comment"># 工作目录</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/11/SgwAqWyi6fN7D8o.png" alt="image-20230111110631501"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">port</span> <span class="number">27001</span></span><br><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">mymaster</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span> <span class="number">6376 </span><span class="number">2</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">down-after-milliseconds</span> <span class="string">mymaster</span> <span class="number">5000</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">parallel-syncs</span> <span class="string">mymaster</span> <span class="number">1</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">failover-timeout</span> <span class="string">mymaster</span> <span class="number">18000</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">auth-pass</span> <span class="string">mymaster</span> <span class="number">123456</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure><h4 id="编写Docker-compose-yml配置文件"><a href="#编写Docker-compose-yml配置文件" class="headerlink" title="编写Docker-compose.yml配置文件"></a>编写Docker-compose.yml配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27001</span><span class="string">:27001</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/sentinel/conf/sentinel1/:/usr/local/etc/redis/</span></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">27002</span><span class="string">:27002</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/sentinel/conf/sentinel2/:/usr/local/etc/redis/</span></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27003</span><span class="string">:27003</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-sentinel</span> <span class="string">/usr/local/etc/redis/sentinel.conf</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mydata/sentinel/conf/sentinel3/:/usr/local/etc/redis/</span></span><br></pre></td></tr></table></figure><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><p><img src="https://s2.loli.net/2023/01/16/NTxzeSFrURqapDM.png" alt="image-20230116014331859"></p><h4 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mydata/sentinel/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/16/znLDU26ph8EXZrY.png"></p><p><img src="https://s2.loli.net/2023/01/18/U98BmP4QbYrMFjc.png" alt="image-20230118171244229"></p><h4 id="测试故障转移"><a href="#测试故障转移" class="headerlink" title="测试故障转移"></a>测试故障转移</h4><h5 id="关闭主节点"><a href="#关闭主节点" class="headerlink" title="关闭主节点"></a>关闭主节点</h5><p><img src="https://s2.loli.net/2023/01/16/1z3JrFyKgIOpAtm.png" alt="image-20230116231427217"></p><h5 id="查看sentinel日志"><a href="#查看sentinel日志" class="headerlink" title="查看sentinel日志"></a>查看sentinel日志</h5><p><img src="https://s2.loli.net/2023/01/16/RCj95xe8zGABnqb.png" alt="image-20230116231417144"></p><h5 id="查看转移的主节点"><a href="#查看转移的主节点" class="headerlink" title="查看转移的主节点"></a>查看转移的主节点</h5><p><img src="https://s2.loli.net/2023/01/16/CIVN1vlhLrxWXBo.png" alt="image-20230116231716032"></p><h3 id="RedisTemplate哨兵模式"><a href="#RedisTemplate哨兵模式" class="headerlink" title="RedisTemplate哨兵模式"></a>RedisTemplate哨兵模式</h3><blockquote><p>Sentinel集群监管下的Redis主从集群中，其主节点会由于自动故障转移而发生变化，Redis客户端必须感知变化并及时更新连接信息。Spring的<code>RedisTemplate</code>底层利用<code>lettuce</code>实现了节点感知和自动切换。</p></blockquote><h4 id="Spring配置哨兵模式"><a href="#Spring配置哨兵模式" class="headerlink" title="Spring配置哨兵模式"></a>Spring配置哨兵模式</h4><h5 id="引入redis的starter依赖"><a href="#引入redis的starter依赖" class="headerlink" title="引入redis的starter依赖"></a>引入redis的starter依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件指定sentinel信息"><a href="#配置文件指定sentinel信息" class="headerlink" title="配置文件指定sentinel信息"></a>配置文件指定sentinel信息</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">level:</span></span><br><span class="line">  <span class="attr">io.lettuce.core:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10000ms</span></span><br><span class="line">  <span class="attr">lettuce:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">10</span> <span class="comment"># 连接池最大连接数</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池最大空闲连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">2</span> <span class="comment"># 连接池最小空闲连接数</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间，负值表示没有限制</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">master:</span> <span class="string">mymaster</span> <span class="comment"># 指定主节点名称</span></span><br><span class="line">    <span class="attr">nodes:</span> <span class="comment"># 指定redis-sentinel集群信息</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:27001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:27002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1.117</span><span class="number">.34</span><span class="number">.49</span><span class="string">:27003</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># Redis服务器连接密码</span></span><br></pre></td></tr></table></figure><h5 id="配置主从读写分离"><a href="#配置主从读写分离" class="headerlink" title="配置主从读写分离"></a>配置主从读写分离</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="title function_">lettuceClientConfigurationBuilderCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clientConfigurationBuilder -&gt; clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReadFrom是读取策略：</p><ul><li><code>MASTER</code>：从主节点读取</li><li><code>MASTER_PREFERRED</code>：优先从主节点读取，主机点不可用才读取从节点</li><li><code>REPLICA</code>：从从节点读取</li><li><code>REPLICA_PREFERRED</code>：优先从从节点读取，所有的从节点不可用才读取主节点</li></ul><p><img src="https://s2.loli.net/2023/01/17/6Hcq9KVOjbSBuJy.png" alt="image-20230117000659492"></p><h2 id="Redis分片集群"><a href="#Redis分片集群" class="headerlink" title="Redis分片集群"></a>Redis分片集群</h2><h3 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h3><blockquote><p><code>主从集群</code>和<code>哨兵模式</code>解决了高可用，高读并发的问题，但是写能力和存储能力无法进行扩展：    </p><ul><li>海量数据存储问题</li><li>高并发写问题</li></ul><p>主节点分片集群的可以存储海量数据，同时吸收高写并发能力：</p><ul><li>集群中有多个主节点，每个主节点存储不同的数据</li><li>每个主节点分片可以有多个从节点</li><li>主节点之间通过ping监控彼此健康状态，实现故障转移</li><li>客户端请求可以访问集群中任意的节点并且被转发到正确的节点上</li></ul></blockquote><p><img src="https://s2.loli.net/2023/01/18/sADR2nWN8bTlUSt.png" alt="image-20230118232513698"></p><h3 id="散列插槽"><a href="#散列插槽" class="headerlink" title="散列插槽"></a>散列插槽</h3><h3 id="集群伸缩"><a href="#集群伸缩" class="headerlink" title="集群伸缩"></a>集群伸缩</h3><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><h3 id="RedisTemplate访问分片分配"><a href="#RedisTemplate访问分片分配" class="headerlink" title="RedisTemplate访问分片分配"></a>RedisTemplate访问分片分配</h3><h2 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h2><h2 id="Redis最佳实践"><a href="#Redis最佳实践" class="headerlink" title="Redis最佳实践"></a>Redis最佳实践</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis分布式缓存&quot;&gt;&lt;a href=&quot;#Redis分布式缓存&quot; class=&quot;headerlink&quot; title=&quot;Redis分布式缓存&quot;&gt;&lt;/a&gt;Redis分布式缓存&lt;/h1&gt;&lt;h2 id=&quot;Redis集群&quot;&gt;&lt;a href=&quot;#Redis集群&quot; class</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis实战</title>
    <link href="http://example.com/2022/12/01/Redis%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/2022/12/01/Redis%E5%AE%9E%E6%88%98/</id>
    <published>2022-12-01T00:31:22.000Z</published>
    <updated>2023-01-07T10:33:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis实战"><a href="#Redis实战" class="headerlink" title="Redis实战"></a>Redis实战</h1><p><img src="https://s2.loli.net/2022/12/02/gn1vIATkdyBReVE.png" alt="image-20221202102058814"></p><h2 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h2><h3 id="基于Session实现登录"><a href="#基于Session实现登录" class="headerlink" title="基于Session实现登录"></a>基于Session实现登录</h3><p><img src="https://s2.loli.net/2022/12/02/l3MVEFtr7CZzu4q.png" alt="image-20221202103316067"></p><p><img src="https://s2.loli.net/2022/12/04/dqQxjSwV5sgUkaL.png" alt="image-20221204210746963"></p><h3 id="session共享问题"><a href="#session共享问题" class="headerlink" title="session共享问题"></a>session共享问题</h3><blockquote><p>多台Tomcat不共享session存储空间，当请求切换到不同的Tomcat服务时导致数据丢失的问题</p></blockquote><p>session的替代方案应该满足：</p><ul><li>数据共享</li><li>内存存储</li><li>key-value结构</li></ul><p><img src="https://s2.loli.net/2022/12/05/N4uUS6LXwR7KqWF.png" alt="image-20221205120908299"></p><h3 id="基于Redis实现共享session登录"><a href="#基于Redis实现共享session登录" class="headerlink" title="基于Redis实现共享session登录"></a>基于Redis实现共享session登录</h3><p><img src="https://s2.loli.net/2022/12/05/VdxnqT8gij2QHKp.png" alt="image-20221205122834128"></p><p><img src="https://s2.loli.net/2022/12/05/kZMPGNa2hDvCo7m.png" alt="image-20221205122911443"></p><p><img src="https://s2.loli.net/2022/12/05/7ZVrOBa6fHtxAYS.png" alt="image-20221205123132178"></p><p><img src="https://s2.loli.net/2022/12/05/qyh7i12XMdZxklU.png" alt="image-20221205123306145"></p><h4 id="redis代替session考虑的问题"><a href="#redis代替session考虑的问题" class="headerlink" title="redis代替session考虑的问题"></a>redis代替session考虑的问题</h4><ul><li>选择合适的数据结构</li><li>设置合适的key</li><li>选择合适的存储粒度</li><li>设置合适的有效期</li></ul><h3 id="解决状态登录刷新的问题"><a href="#解决状态登录刷新的问题" class="headerlink" title="解决状态登录刷新的问题"></a>解决状态登录刷新的问题</h3><p><img src="https://s2.loli.net/2022/12/06/NKk5lG4Qdi93Ian.png" alt="image-20221206100256416"></p><p>值得注意，这里需要登录的路径才会走拦截器刷新token有效期，导致不需要登录即未拦截的路径没有刷新token有效期。</p><p><img src="https://s2.loli.net/2022/12/06/cfiluKA7GBn3oPm.png" alt="image-20221206100835173"></p><h2 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><blockquote><p>缓存就是数据交换的缓存区（称作Cache）,是存贮数据的临时的地方，一般读写性能较高。</p></blockquote><p><img src="https://s2.loli.net/2022/12/06/qgDXHVkPJr4CQb3.png" alt="image-20221206104611652"></p><p><img src="https://s2.loli.net/2022/12/06/Bd6HixR1eAZoSVp.png" alt="image-20221206104759767"></p><h3 id="添加Redis缓存"><a href="#添加Redis缓存" class="headerlink" title="添加Redis缓存"></a>添加Redis缓存</h3><p><img src="https://s2.loli.net/2022/12/06/7ByN1vuk8lFRjfC.png" alt="image-20221206220709634"></p><h3 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h3><p><img src="https://s2.loli.net/2022/12/07/FfCSi97R1EmkUso.png" alt="image-20221207105308463"></p><h4 id="三种常见的缓存读写策略"><a href="#三种常见的缓存读写策略" class="headerlink" title="三种常见的缓存读写策略"></a>三种常见的缓存读写策略</h4><h5 id="Cache-Aside-Pattern（旁路缓存模式）"><a href="#Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="Cache Aside Pattern（旁路缓存模式）"></a>Cache Aside Pattern（旁路缓存模式）</h5><blockquote><p>在更新数据库的同时更新缓存</p><p>这是平时比较多的缓存读写模式，比较适合读多写少的场景</p></blockquote><p><img src="https://s2.loli.net/2022/12/07/KPiDqZF8Cljydtk.png" alt="image-20221207105745436"></p><p><img src="https://s2.loli.net/2022/12/07/q2X5eHuyI4mFhd3.png" alt="image-20221207130436342"></p><ul><li>同步时时，尽量选择删除缓存，在读少写多的场景下，避免对于缓存过多无效的写操作</li><li>如何保证缓存和数据库数据的同步<ul><li>单体系统：将缓存和数据库操作放到一个事务里</li><li>分布式事务，利用TTC等分布式事务方案</li></ul></li><li>先操作数据库，再删除缓存，原因如下图所示</li></ul><p><img src="https://s2.loli.net/2022/12/07/3l9o5Ljei7Ww6UN.png" alt="image-20221207130033856"></p><h4 id="Read-Write-Through-Pattern（读写穿透）"><a href="#Read-Write-Through-Pattern（读写穿透）" class="headerlink" title="Read/Write Through Pattern（读写穿透）"></a>Read/Write Through Pattern（读写穿透）</h4><blockquote><p>将缓存和数据库的同步整合为一个服务，由服务来维护一致性，减轻应用程序的职责。调用者调用该服务，无需关心缓存的一致性的问题。开发比较少遇到的原因是性能问题以及服务开发和维护成本。</p></blockquote><h4 id="Write-Behind-Caching-Pattern（异步缓存写入）"><a href="#Write-Behind-Caching-Pattern（异步缓存写入）" class="headerlink" title="Write Behind Caching Pattern（异步缓存写入）"></a>Write Behind Caching Pattern（异步缓存写入）</h4><blockquote><p>调用者操作缓存后，由其他线程异步的将缓存数据持久化到数据库，保证数据的一致性。缺点是数据一致性难以保证，存在数数据库还没有更新，缓存服务宕机的风险。</p><p>常用于一些数据经常变化，但是对数据一致性要求没有太高的场景，比如浏览量、点赞量等。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/12/07/hMVGkb5TuntivD3.png" alt="image-20221207130139744"></p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><blockquote><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，缓存不会生效，这些请求会到存储层去查询，大量请求就会落到数据库中。</p><p>攻击者利用不存在的key频繁攻击应用，大量请求攻击数据库，导致数据库压力过大甚至引起数据库服务的宕机。</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>接口校验</p><p>在接口层增加权限校验，拦截一些不符合逻辑的请求</p></li><li><p>缓存空对象</p><p>缓存和数据库都没有时，将key-value写成key-空对象写入缓存，设置较短缓存有效期（减少数据一致性带来影响），有效降低攻击者短时间内反复用同一个id暴力攻击</p><p>缺点：占用缓存中额外的内存开销，有可能造成短时间内数据不一致的问题</p></li><li><p>布隆（bloomfilter类似于hash set结构）</p><p>用于判断某个元素是否存在于集合中，不存在就直接返回。该过滤器的关键就是hash算法和容器的大小</p><p>缺点：实现复杂，存在误判的可能性</p></li></ul><p><img src="https://s2.loli.net/2022/12/07/zFZL4klGurU5nsh.png" alt="image-20221207151744982"></p><h4 id="缓存空对象"><a href="#缓存空对象" class="headerlink" title="缓存空对象"></a>缓存空对象</h4><p><img src="https://s2.loli.net/2022/12/07/kSb1oFrZdg7LwCt.png" alt="image-20221207153521213"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/12/07/nVrTpmGehDBR1tc.png" alt="image-20221207165554772"></p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>缓存雪崩指数据大量缓存的key同时失效或者redis宕机，导致大量请求到达数据库。</p></blockquote><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>缓存数据的过期时间TTL设置随机，防止大量数据同一时间过期</li><li>搭建redis集群将热点数据均匀分布到不用的缓存数据库，提高服务的可用性</li><li>缓存业务添加降低限流策略</li><li>添加多级缓存（nginx，jvm等）</li></ul><p><img src="https://s2.loli.net/2022/12/07/GYOMxliwnWsDJKX.png" alt="image-20221207165927327"></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><blockquote><p>缓存击穿问题又称为热点key问题，一个高并发访问并且缓存重建业务较为复杂的Key过期，大量请求访问会在瞬间给数据库带来巨大的压力</p></blockquote><p><img src="https://s2.loli.net/2022/12/07/ztaTWlLHi8nA4h7.png" alt="image-20221207175832982"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>设置热点数据永不过期</p></li><li><p>接口限流和熔断降级</p></li><li><p>加互斥锁</p><blockquote><p>缺点是线程等待，性能较差</p></blockquote></li></ul><p><img src="https://s2.loli.net/2022/12/07/kF6sXAYJ2vfzD8E.png" alt="image-20221207232540016"></p><ul><li>逻辑过期</li></ul><p><img src="https://s2.loli.net/2022/12/07/H6amPdi5CQcXE98.png" alt="image-20221207233126773"></p><p><img src="https://s2.loli.net/2022/12/07/5J3YcuEqb7f48Fh.png" alt="image-20221207233151021"></p><h4 id="基于互斥锁方式解决缓存击穿问题"><a href="#基于互斥锁方式解决缓存击穿问题" class="headerlink" title="基于互斥锁方式解决缓存击穿问题"></a>基于互斥锁方式解决缓存击穿问题</h4><p><img src="https://s2.loli.net/2022/12/07/LkSYNiWOZIyQUA7.png" alt="image-20221207234809088"></p><p><img src="https://s2.loli.net/2022/12/07/5L8SGvTHeBCzjZ6.png" alt="image-20221207234342417"></p><h4 id="基于逻辑过期方式解决缓存击穿问题"><a href="#基于逻辑过期方式解决缓存击穿问题" class="headerlink" title="基于逻辑过期方式解决缓存击穿问题"></a>基于逻辑过期方式解决缓存击穿问题</h4><p><img src="https://s2.loli.net/2022/12/08/KmPabMiYlzNRBeD.png" alt="image-20221208110609702"></p><h3 id="缓存工具封装"><a href="#缓存工具封装" class="headerlink" title="缓存工具封装"></a>缓存工具封装</h3><h2 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h2><h3 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h3><p> <img src="https://s2.loli.net/2022/12/09/slDtdWVB3NoS8cK.png" alt="image-20221209134143378"></p><h4 id="全局ID生成器"><a href="#全局ID生成器" class="headerlink" title="全局ID生成器"></a>全局ID生成器</h4><blockquote><p>一种分布式系统下用来生成全局唯一ID的工具</p></blockquote><p><img src="https://s2.loli.net/2022/12/09/bXzjd5K2T8aZYm6.png" alt="image-20221209134432906"></p><p><img src="https://s2.loli.net/2022/12/09/lJLkDCiUfyn4Bh8.png" alt="image-20221209134920012"></p><p>ID的组成部分</p><ul><li>符号位：1bit，0表示正数</li><li>时间戳：31bit，以秒为单位</li><li>序列号：32bit，秒以内的计数器，支持每秒产生2^32不同的ID</li></ul><p><img src="https://s2.loli.net/2022/12/09/G4hw72B91jHMElX.png" alt="image-20221209160509685"></p><h4 id="实现优惠券秒杀下单"><a href="#实现优惠券秒杀下单" class="headerlink" title="实现优惠券秒杀下单"></a>实现优惠券秒杀下单</h4><p><img src="https://s2.loli.net/2022/12/09/WJ3Q7SLM6KvxVgw.png" alt="image-20221209163723219"></p><h3 id="库存超卖问题分析"><a href="#库存超卖问题分析" class="headerlink" title="库存超卖问题分析"></a>库存超卖问题分析</h3><p><img src="https://s2.loli.net/2022/12/12/eGF71HCacu5BLzK.png" alt="image-20221212093954792"></p><p><img src="https://s2.loli.net/2022/12/12/6DoUxsu2c8RpeXP.png" alt="image-20221211224102371"></p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul><li>版本号法</li></ul><blockquote><p>通过版本标识数据有没有变化</p></blockquote><p><img src="https://s2.loli.net/2022/12/12/t78GfzwIYuF2ea1.png" alt="image-20221212094057983"></p><ul><li>CAS(compare and swap)法</li></ul><blockquote><p>使用库存代替版本</p></blockquote><p><img src="https://s2.loli.net/2022/12/12/BRTgX7YwUbiA9xh.png" alt="image-20221212094557983"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/12/12/yhasicjBFZ1LfVk.png" alt="image-20221212132007970"></p><h3 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h3><p><img src="https://s2.loli.net/2022/12/12/GEkdUqSaF4nyvBp.png" alt="image-20221212133704520"></p><h3 id="集群下的并发安全问题"><a href="#集群下的并发安全问题" class="headerlink" title="集群下的并发安全问题"></a>集群下的并发安全问题</h3><p><img src="https://s2.loli.net/2022/12/12/x3hNzmYkgry9bJR.png" alt="image-20221212155303894"></p><p><img src="https://s2.loli.net/2022/12/12/1co8Ar7NpsXnOik.png" alt="image-20221212155642926"></p><h4 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h4><blockquote><p>synchronized是通过JVM内部的监视器控制线程的</p></blockquote><p><img src="https://s2.loli.net/2022/12/12/D8UIathcmLGzYMi.png" alt="image-20221212165424079"></p><h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><p><img src="https://s2.loli.net/2022/12/12/po2scJHA8WqmO6a.png" alt="image-20221212165505662"></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p><img src="https://s2.loli.net/2022/12/12/FExA8zQkMcdDpeX.png" alt="image-20221212165807301"></p><p><img src="https://s2.loli.net/2022/12/12/PtTVmH4O1bEnS9U.png" alt="image-20221212165914742"></p><h3 id="分布式锁简介"><a href="#分布式锁简介" class="headerlink" title="分布式锁简介"></a>分布式锁简介</h3><blockquote><p>分布式锁：满足分布式系统或集群模式下多线程可见并且互斥的锁。</p></blockquote><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20221212170156395.png" alt="image-20221212170156395"></p><h3 id="分布式锁的实现"><a href="#分布式锁的实现" class="headerlink" title="分布式锁的实现"></a>分布式锁的实现</h3><p><img src="https://s2.loli.net/2022/12/12/Sfg4UxAdT5mWMHv.png" alt="image-20221212170954214"></p><h3 id="基于Redis的分布式锁"><a href="#基于Redis的分布式锁" class="headerlink" title="基于Redis的分布式锁"></a>基于Redis的分布式锁</h3><h4 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h4><p><img src="https://s2.loli.net/2022/12/12/RhzDsJ4MfBSVLdT.png" alt="image-20221212172255569"></p><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><p><img src="https://s2.loli.net/2022/12/12/vq19wijQOpNIJKn.png" alt="image-20221212172425586"></p><p><img src="https://s2.loli.net/2022/12/12/FpwEqedZ9kDhMvy.png" alt="image-20221212171913934"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>在setnx和expire语句执行之间，服务发生了宕机，锁的过期时间就添加失败</p><p><img src="https://s2.loli.net/2022/12/12/MbBN1qUjyzlVsxE.png" alt="image-20221212173317049"></p><h4 id="获取锁-1"><a href="#获取锁-1" class="headerlink" title="获取锁"></a>获取锁</h4><p><img src="https://s2.loli.net/2022/12/12/8GQqi7h6j1xdyg3.png" alt="image-20221212173514881"></p><p><img src="https://s2.loli.net/2022/12/12/JC5NpZhe3nAVRSb.png" alt="image-20221212173614905"></p><h3 id="分布式锁误删问题"><a href="#分布式锁误删问题" class="headerlink" title="分布式锁误删问题"></a>分布式锁误删问题</h3><p><img src="https://s2.loli.net/2022/12/13/KfMFde1lV8upT9q.png" alt="image-20221213104203635"></p><p>线程1业务阻塞后锁超时过期，线程2拿到了锁执行业务，此时线程1阻塞业务执行完毕，误删了线程2的锁，导致线程3拿到了锁，执行业务，导致了两个线程同时执行同一个业务</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><blockquote><p>获取锁标识并判断是否一致，释放锁验证是否是该线程的锁</p></blockquote><p><img src="https://s2.loli.net/2022/12/13/J4NEZ1srHaKGiPT.png" alt="image-20221213104353629"></p><p><img src="https://s2.loli.net/2022/12/13/c6hZqDYzUndKMLF.png" alt="image-20221213104836276"></p><h4 id="改进Redis分布式锁"><a href="#改进Redis分布式锁" class="headerlink" title="改进Redis分布式锁"></a>改进Redis分布式锁</h4><p><img src="https://s2.loli.net/2022/12/13/PsGFJ9qAR3CcwD4.png" alt="image-20221213111339279"></p><h3 id="分布式锁的原子性问题"><a href="#分布式锁的原子性问题" class="headerlink" title="分布式锁的原子性问题"></a>分布式锁的原子性问题</h3><p><img src="https://s2.loli.net/2022/12/13/hHWEtOoTYvriAmL.png" alt="image-20221213142911540"></p><p>线程1在获取锁标识判断一致后，将要执行释放锁的操作时，线程1发生由于JVM垃圾回收机制等原因发生了阻塞，锁没有被释放但过期后被释放，线程2执行时获取锁，线程1阻塞结束执行了释放锁的操作，导致线程2的锁被释放，线程3此时获取锁导致了两个线程并行执行。</p><p><img src="https://s2.loli.net/2022/12/13/tnYdmzpeNJVwF83.png" alt="image-20221213143602261"></p><h3 id="Redis的Lua的脚本"><a href="#Redis的Lua的脚本" class="headerlink" title="Redis的Lua的脚本"></a>Redis的Lua的脚本</h3><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。</p><blockquote><p>Lua是一种编程语言，它的基本语法：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p><img src="https://s2.loli.net/2022/12/13/9UXclOxT8QqwH5M.png" alt="image-20221213144906636"></p><h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h4><p><img src="https://s2.loli.net/2022/12/13/xgyQ68DA52fbmoh.png" alt="image-20221213150019865"></p><p><img src="https://s2.loli.net/2022/12/13/Pwo2QAu3it4veRa.png" alt="image-20221213145512377"></p><p><img src="https://s2.loli.net/2022/12/13/Ld3itrB7MsJ9XZc.png" alt="image-20221213145547488"></p><p><img src="https://s2.loli.net/2022/12/13/bvJphKMdcIQEt3z.png" alt="image-20221213150601394"></p><p><img src="https://s2.loli.net/2022/12/13/IceEO5yblYUjqMi.png" alt="image-20221213150614674"></p><h4 id="基于Lua脚本的释放锁"><a href="#基于Lua脚本的释放锁" class="headerlink" title="基于Lua脚本的释放锁"></a>基于Lua脚本的释放锁</h4><p><img src="https://s2.loli.net/2022/12/13/LfFKmXvMG6xkiRq.png" alt="image-20221213153252755"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 比较线程标示与锁中的标示是否一致</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) ==  ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 释放锁 del key</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="Java调用lua脚本改造分布式锁"><a href="#Java调用lua脚本改造分布式锁" class="headerlink" title="Java调用lua脚本改造分布式锁"></a>Java调用lua脚本改造分布式锁</h4><p><img src="https://s2.loli.net/2022/12/13/TgLlKFady2Q475Y.png" alt="image-20221213160450825"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/12/13/hBGUzyZcLJao41C.png" alt="image-20221213164025997"></p><h3 id="基于Redission的分布式锁优化"><a href="#基于Redission的分布式锁优化" class="headerlink" title="基于Redission的分布式锁优化"></a>基于Redission的分布式锁优化</h3><p>基于setnx实现的分布式锁存在下面的问题</p><ul><li>不可重入：同一线程无法多次获取同一把锁</li><li>不可重试：获取锁只尝试一次就返回false，没有重试机制</li><li>超时释放：可以避免死锁，但仍然存在一定的安全隐患。例如业务执行耗时比锁的超时时间长，导致了锁的提前释放等</li><li>主从一致性：Redis提供了主从集群模式，主从同步存在延迟。当主节点宕机时，从节点并未同步主节点的锁数据时，会导致多个线程拿到锁的情况，产生安全问题</li></ul><p><img src="https://s2.loli.net/2022/12/13/6BdIA4WfcgsNRGO.png" alt="image-20221213173148132"></p><h3 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h3><p><img src="https://s2.loli.net/2022/12/13/JMAvl4PRKSVqtZB.png" alt="image-20221213173415985"></p><p>官网：<a href="https://redisson.org/">https://redisson.org/</a></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redisson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;redission.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建配置类</span></span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    <span class="comment">// 添加配置</span></span><br><span class="line">    config.useSingleServer()</span><br><span class="line">            .setAddress(SCHEMA_PREFIX + host + <span class="string">&quot;:&quot;</span> + port)</span><br><span class="line">            .setPassword(password)</span><br><span class="line">            .setTimeout(<span class="number">3000</span>)</span><br><span class="line">            .setPingConnectionInterval(<span class="number">30000</span>)</span><br><span class="line">            .setDatabase(Integer.parseInt(database));</span><br><span class="line">    <span class="comment">// 创建Redisson对象</span></span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用分布式锁"><a href="#使用分布式锁" class="headerlink" title="使用分布式锁"></a>使用分布式锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过Redisson获取可重入锁</span></span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisLockService.getRLock(REDIS_LOCK_COUPON_HISTORY);</span><br><span class="line"><span class="comment">// 尝试获取可重入锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;一人只允许购买一张优惠券&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放可重入锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redisson可重入锁原理"><a href="#Redisson可重入锁原理" class="headerlink" title="Redisson可重入锁原理"></a>Redisson可重入锁原理</h3><p><img src="https://s2.loli.net/2022/12/15/blm7wuRDPcNJahv.png" alt="image-20221215110558010"></p><p><img src="https://s2.loli.net/2022/12/15/WvbasGV4d3BXl9E.png" alt="image-20221215135354623"></p><h4 id="获取可重入锁的Lua脚本"><a href="#获取可重入锁的Lua脚本" class="headerlink" title="获取可重入锁的Lua脚本"></a>获取可重入锁的Lua脚本</h4><p><img src="https://s2.loli.net/2022/12/15/RPEt3FgGyzxqiAK.png" alt="image-20221215140201072"></p><h4 id="释放可重入锁的Lua脚本"><a href="#释放可重入锁的Lua脚本" class="headerlink" title="释放可重入锁的Lua脚本"></a>释放可重入锁的Lua脚本</h4><p><img src="https://s2.loli.net/2022/12/15/9Pd8fHkDFwLCpi2.png" alt="image-20221215140328868"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><blockquote><p>利用一个Hash结构记录获取锁的线程和重入的次数，Redisson底层的核心就是Lua脚本</p></blockquote><h4 id="Redis分布式锁原理"><a href="#Redis分布式锁原理" class="headerlink" title="Redis分布式锁原理"></a><img src="https://s2.loli.net/2022/12/15/hro2GlZju7HIvJb.png" alt="image-20221215153730992">Redis分布式锁原理</h4><ul><li>可重入性：利用ConcurrentMap存储记录线程id和重入次数</li><li>可重试：利用信号量和PubSub功能实现等待、唤醒、获取锁失败的重试机制</li><li>超时续约：利用WatchDog，每隔一段时间（leaseTime/3）,重置超时时间</li></ul><p><img src="https://s2.loli.net/2022/12/15/iyFqvwflOrRx8bK.png" alt="image-20221215182257133"></p><h3 id="Redisson的multiLock原理"><a href="#Redisson的multiLock原理" class="headerlink" title="Redisson的multiLock原理"></a>Redisson的multiLock原理</h3><h4 id="Redisson分布式锁的主从一致性问题"><a href="#Redisson分布式锁的主从一致性问题" class="headerlink" title="Redisson分布式锁的主从一致性问题"></a>Redisson分布式锁的主从一致性问题</h4><p><img src="https://s2.loli.net/2022/12/15/CiguE1vF5LYyJ67.png" alt="image-20221215202909112"></p><p><img src="https://s2.loli.net/2022/12/15/HauGOjnVUyskpY8.png" alt="image-20221215203304279"></p><p><img src="https://s2.loli.net/2022/12/15/GDTR2H7oEnyeYp8.png" alt="image-20221215204206587"></p><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2022/12/16/CR3MFwT4bslUiW1.png" alt="image-20221216094654492"></p><h2 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h2><h3 id="异步秒杀思路"><a href="#异步秒杀思路" class="headerlink" title="异步秒杀思路"></a>异步秒杀思路</h3><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p><img src="https://s2.loli.net/2022/12/16/5zqOeF2WKMn7kmx.png" alt="image-20221216104022591"></p><p><img src="https://s2.loli.net/2022/12/16/uSeKZg9VrMwidnf.png" alt="image-20221216105527671"></p><p><img src="https://s2.loli.net/2022/12/16/Ukw2AD1PGQros5Y.png" alt="image-20221216110149724"></p><p>​    <img src="https://s2.loli.net/2022/12/17/dr7EYAIlDCvUxuP.png" alt="image-20221217005201496"></p><p>使用Lua脚本判断秒杀库存和一人一单状态，保证执行的原子性</p><p><img src="https://s2.loli.net/2022/12/18/FBS9lADK2P6tYdi.png" alt="image-20221218025955470"></p><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><h5 id="秒杀业务的优化思路"><a href="#秒杀业务的优化思路" class="headerlink" title="秒杀业务的优化思路"></a>秒杀业务的优化思路</h5><ul><li>利用Redis和Lua脚本完成校验判断和抢单业务</li><li>将下单业务放到阻塞队列，利用线程池异步下单</li></ul><h5 id="基于阻塞队列的异步秒杀的问题"><a href="#基于阻塞队列的异步秒杀的问题" class="headerlink" title="基于阻塞队列的异步秒杀的问题"></a>基于阻塞队列的异步秒杀的问题</h5><ul><li>阻塞队列的内存限制问题（阻塞队列来自JVM）</li><li>数据安全问题（阻塞队列中的订单没有被消费完，却发生了重启或宕机等事故）</li></ul><h2 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列（Message Queue）存放消息的队列，最简单的消息队列模型包括三个角色</p><ul><li>消费队列：存储和管理消息，称为消息代理（Message Broker）</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列获取消息并处理消息</li></ul><p><img src="https://s2.loli.net/2022/12/18/eqHNGAbi3tCfO4l.png" alt="image-20221218052232089"></p><p><img src="https://s2.loli.net/2022/12/18/WpQygCYOZHcot1B.png" alt="image-20221218052650676"></p><p>Redis提供了三种不同的方式实现消息队列</p><ul><li>List：基于List结构模拟消息队列</li><li>PubSub：基本的点对点消息模型</li><li>Stream：完善的消息队列模型</li></ul><p><img src="https://s2.loli.net/2022/12/18/f8noqXsgz7WCcxH.png" alt="image-20221218052713338"></p><h3 id="基于List模拟消息队列"><a href="#基于List模拟消息队列" class="headerlink" title="基于List模拟消息队列"></a>基于List模拟消息队列</h3><p>消息队列（Message Queue）存放和管理消息的队列，而Redis的List数据结构是一个双向链表。</p><p><img src="https://s2.loli.net/2022/12/18/OAvTkjYcC8QP1U9.png" alt="image-20221218054419266"></p><p><img src="https://s2.loli.net/2022/12/18/Oam4W31Rh8XjYPu.png" alt="image-20221218054947741"></p><p><img src="https://s2.loli.net/2022/12/18/3SiB7kOYKbaheUI.png" alt="image-20221218055421128"></p><p><img src="https://s2.loli.net/2022/12/18/Nx2giLyeI7bQ4mj.png" alt="image-20221218055432386"></p><p><img src="https://s2.loli.net/2022/12/18/kyxBHNrDaYG9V5i.png" alt="image-20221218055445213"></p><p><img src="https://s2.loli.net/2022/12/18/ZAQYL2iFaVXDSH7.png" alt="image-20221218054241305"></p><h3 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h3><blockquote><p>PubSub（发布/订阅）是Redis引入的消息传递模型，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有的订阅者都能收到相关信息。</p></blockquote><p><img src="https://s2.loli.net/2022/12/18/FZtgOT9IQ6vpaSY.png" alt="image-20221218162046630"></p><p><img src="https://s2.loli.net/2022/12/18/bkjiroyzlRn1d74.png" alt="image-20221218162753133"></p><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/12/18/QnTlWRUwjVzv3xb.png" alt="image-20221218162847614"></p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>采用发布订阅模式，支持多生产、多消费</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积存在上限，超出时数据丢失</li><li>消息订阅者停止时，消息发送会丢失</li></ul><h3 id="Stream的单消费模式"><a href="#Stream的单消费模式" class="headerlink" title="Stream的单消费模式"></a>Stream的单消费模式</h3><blockquote><p>Stream是Redis引入的一种新的数据类型，可以实现功能更加完善的消息队列</p></blockquote><p><img src="https://s2.loli.net/2022/12/18/J3omhQuCP6DdB2j.png" alt="image-20221218163659720"></p><h4 id="基于Stream发送消息"><a href="#基于Stream发送消息" class="headerlink" title="基于Stream发送消息"></a>基于Stream发送消息</h4><p><img src="https://s2.loli.net/2022/12/18/bf8GQhn35LtWdDi.png" alt="image-20221218164450534"></p><h4 id="基于Stream读取消息"><a href="#基于Stream读取消息" class="headerlink" title="基于Stream读取消息"></a>基于Stream读取消息</h4><p><img src="https://s2.loli.net/2022/12/18/NsWgVjEA6B5SmJo.png" alt="image-20221218185944434"></p><p><img src="https://s2.loli.net/2022/12/18/9f3XIsNozGWijLp.png" alt="image-20221218185713307"></p><p><img src="https://s2.loli.net/2022/12/18/IROth2TjuwgGYKm.png" alt="image-20221218190349748"></p><p><img src="https://s2.loli.net/2022/12/19/ZebrtSYIOyf1l5Q.png" alt="image-20221219122859992"></p><p><img src="https://s2.loli.net/2022/12/19/q9zJHcZYvIC1GeK.png" alt="image-20221219123108407"></p><p><img src="https://s2.loli.net/2022/12/19/t2OieYqwh3P6x5k.png" alt="image-20221219123158957"></p><blockquote><p>当指定起始ID为$时，代表读取最新的消息，如果处理一条消息的过程中，出现了超过1条以上的消息到达队列，则下次获取时，只能获得最新的一条消息，会出现漏读消息的问题。</p></blockquote><p><img src="https://s2.loli.net/2022/12/19/n2tHJ1PuXhKzIU6.png" alt="image-20221219123354171"></p><h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>支持阻塞读取</li></ul><p>缺点</p><ul><li><p>有消息漏读的风险</p><p><img src="https://s2.loli.net/2022/12/19/M38QX4pJ5KdBHVU.png" alt="image-20221219130332819"></p></li></ul><h3 id="基于Stream的消息队列-消费者组"><a href="#基于Stream的消息队列-消费者组" class="headerlink" title="基于Stream的消息队列-消费者组"></a>基于Stream的消息队列-消费者组</h3><p><img src="https://s2.loli.net/2022/12/19/q397zQa6ZfDdruY.png"></p><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列</p><ul><li>消息分流：队列中的消息会分流给组内的不同的消费者，而不是重复消费，从而加快消费处理的速度</li><li>消息提示：消费者组会维护一个标示，记录最后一个被处理的消息，由于stream中的小消息本身就支持持久化，当消费者宕机重启后，消费者还会从标示之后读取消息，确保每一个消息都会被消费（避免消息漏读的情况）</li><li>消息确认：消费者获取消息后，消息处于pending状态，存入一个pending-list。当处理完成后通过XACK来确认消息，并标记消息为已处理，并从pending-list移除（避免消息丢失的情况）</li></ul><p><img src="https://s2.loli.net/2022/12/19/HT6AkjswJtaeYrZ.png" alt="image-20221219131356818"></p><p><img src="https://s2.loli.net/2022/12/19/xO13leNUS6GmZrX.png" alt="image-20221219132919466"></p><p><img src="https://s2.loli.net/2022/12/19/SEIaOvq7JXibQD8.png" alt="image-20221219135311350"></p><h3 id="基于Stream的消费队列实现异步秒杀"><a href="#基于Stream的消费队列实现异步秒杀" class="headerlink" title="基于Stream的消费队列实现异步秒杀"></a>基于Stream的消费队列实现异步秒杀</h3><h2 id="达人点评"><a href="#达人点评" class="headerlink" title="达人点评"></a>达人点评</h2><h3 id="发布点评笔记"><a href="#发布点评笔记" class="headerlink" title="发布点评笔记"></a>发布点评笔记</h3><p><img src="https://s2.loli.net/2022/12/21/wTZbgtrJ8IlXjMO.png" alt="image-20221221135202338"></p><h3 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h3><p><img src="https://s2.loli.net/2022/12/22/U76oNK1MgXtJP9p.png" alt="image-20221222235253214"></p><h3 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h3><p><img src="https://s2.loli.net/2022/12/22/32NwsSYg5HByKEA.png" alt="image-20221222235326299"></p><p><img src="https://s2.loli.net/2022/12/23/YxDkuRKX82AmPEb.png" alt="image-20221223000128319"></p><p><img src="https://s2.loli.net/2022/12/23/WyPaHSBI39nX8Oh.png" alt="image-20221223000541237"></p><p><img src="https://s2.loli.net/2022/12/23/9shGdCW8XKzPgnx.png" alt="image-20221223000558420"></p><p> <img src="https://s2.loli.net/2022/12/23/plinoqzv9CbNeLm.png" alt="image-20221223222109390"></p><h2 id="好友关注"><a href="#好友关注" class="headerlink" title="好友关注"></a>好友关注</h2><h3 id="关注和取关"><a href="#关注和取关" class="headerlink" title="关注和取关"></a>关注和取关</h3><p><img src="https://s2.loli.net/2023/01/02/rL9peY4AZhSNxiK.png" alt="image-20230102162103145"></p><h3 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h3><blockquote><p>利用Redis中set数据结构实现共同关注功能。</p></blockquote><p><img src="https://s2.loli.net/2023/01/02/qVyfb5gOxhGJC9p.png" alt="image-20230102225058098"></p><h3 id="关注和推送"><a href="#关注和推送" class="headerlink" title="关注和推送"></a>关注和推送</h3><blockquote><p>关注推送也叫Feed流，通过下拉刷新获取新的信息。</p></blockquote><p><img src="https://s2.loli.net/2023/01/03/EboQNnKmeFqxgki.png" alt="image-20230103104020197"></p><p><img src="https://s2.loli.net/2023/01/03/TYRFWujHk13Qtye.png" alt="image-20230103104103941"></p><p><img src="https://s2.loli.net/2023/01/03/AROVxcqECmDMp6h.png" alt="image-20230103104231504"></p><h4 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h4><p><img src="https://s2.loli.net/2023/01/03/vxJl3swmyuF8XD4.png" alt="image-20230103104500644"></p><h4 id="推模式"><a href="#推模式" class="headerlink" title="推模式"></a>推模式</h4><p><img src="https://s2.loli.net/2023/01/03/RI6yB18bQAieDm4.png" alt="image-20230103104655290"></p><h4 id="推拉结合"><a href="#推拉结合" class="headerlink" title="推拉结合"></a>推拉结合</h4><p><img src="https://s2.loli.net/2023/01/03/es3iWCZbFnUawKV.png" alt="image-20230103105213174"></p><p><img src="https://s2.loli.net/2023/01/03/dSgZ2NJkAPXGEYu.png" alt="image-20230103105225498"></p><h4 id="推模式实现粉丝推荐"><a href="#推模式实现粉丝推荐" class="headerlink" title="推模式实现粉丝推荐"></a>推模式实现粉丝推荐</h4><p><img src="https://s2.loli.net/2023/01/03/b4iO16xzQr2jtk5.png" alt="image-20230103121331638"></p><p><img src="https://s2.loli.net/2023/01/03/7PJTIjX5lW4zCaU.png" alt="image-20230103122137899"></p><p><img src="https://s2.loli.net/2023/01/03/wMaXg6inIhUylNZ.png" alt="image-20230103135629197"></p><h4 id="实现关注推送页面的滚动分页查询"><a href="#实现关注推送页面的滚动分页查询" class="headerlink" title="实现关注推送页面的滚动分页查询"></a>实现关注推送页面的滚动分页查询</h4><h5 id="按脚标（排名）查询"><a href="#按脚标（排名）查询" class="headerlink" title="按脚标（排名）查询"></a>按脚标（排名）查询</h5><p><img src="https://s2.loli.net/2023/01/03/aCifNl3t69oKpdL.png" alt="image-20230103171623943"></p><p><img src="https://s2.loli.net/2023/01/03/QgkHxsw1T72LMVt.png" alt="image-20230103172512500"></p><blockquote><p>为了防止score相同的情况下，导致偏移量不准确，所以偏移量应该设置为与上一次分页查询结果中，与最小值一样的元素个数。</p></blockquote><p><img src="https://s2.loli.net/2023/01/03/6SAYORxZqlE1mdL.png" alt="image-20230103173157185"></p><p><img src="https://s2.loli.net/2023/01/03/8sUQ4N9y62ZYzre.png" alt="image-20230103173437310"></p><h2 id="附近店铺"><a href="#附近店铺" class="headerlink" title="附近店铺"></a>附近店铺</h2><blockquote><p>GEO就是Geolocation的缩写，代表地理位置，Redis在3.2版本加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度检索数据</p></blockquote><p><img src="https://s2.loli.net/2023/01/03/1DocHQSzJ58ufGs.png" alt="image-20230103213604903"></p><p><img src="https://s2.loli.net/2023/01/03/DEzGhntcgCPH2bs.png" alt="image-20230103214000937"></p><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><h4 id="添加地理数据"><a href="#添加地理数据" class="headerlink" title="添加地理数据"></a>添加地理数据</h4><p><img src="https://s2.loli.net/2023/01/03/BmFTlNLRj8VS2E7.png" alt="image-20230103214310250"></p><p><img src="https://s2.loli.net/2023/01/03/SrDduofUzCx1WaR.png" alt="image-20230103215308352"></p><p><img src="https://s2.loli.net/2023/01/03/4S5TQWvOYsD79gL.png" alt="image-20230103214435380"></p><h4 id="计算地理距离"><a href="#计算地理距离" class="headerlink" title="计算地理距离"></a>计算地理距离</h4><p><img src="https://s2.loli.net/2023/01/03/8xM3fuybP5BldsR.png" alt="image-20230103214727360"></p><h4 id="搜索附近地理"><a href="#搜索附近地理" class="headerlink" title="搜索附近地理"></a>搜索附近地理</h4><p><img src="https://s2.loli.net/2023/01/03/aRlxMINOPFSdAkU.png" alt="image-20230103215157957"></p><h3 id="附近商铺搜索"><a href="#附近商铺搜索" class="headerlink" title="附近商铺搜索"></a>附近商铺搜索</h3><p><img src="https://s2.loli.net/2023/01/03/jg7VODUwRd2l48T.png" alt="image-20230103215914946"></p><p><img src="https://s2.loli.net/2023/01/04/u7SFLRBOJfvklZb.png" alt="image-20230103222141774"></p><h2 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h2><p><img src="https://s2.loli.net/2023/01/05/4NeS2lRfC6YvdTk.png" alt="image-20230105134359071"></p><p><img src="https://s2.loli.net/2023/01/05/vkZdQowE5e2cntr.png" alt="image-20230105134641859"></p><p><img src="https://s2.loli.net/2023/01/05/x7DRPZh1FarT6XQ.png" alt=" "></p><p><img src="https://s2.loli.net/2023/01/05/9P7RDoxhimOF1kd.png" alt="image-20230105144620835"></p><p><img src="https://s2.loli.net/2023/01/05/UIlAyjMvYtmNKrT.png" alt="image-20230105144855288"></p><p><img src="https://s2.loli.net/2023/01/05/SdmHPvwAGVDsU42.png" alt="image-20230105144913949"></p><p><img src="https://s2.loli.net/2023/01/05/4mk1SlbOMrTL7Zf.png" alt="image-20230105145028242"></p><p><img src="https://s2.loli.net/2023/01/05/ljiJWQdx5MCeqvu.png" alt="image-20230105145127510"></p><p><img src="https://s2.loli.net/2023/01/05/QinpjsxveaB5CLN.png" alt="image-20230105145543477"></p><p><img src="https://s2.loli.net/2023/01/05/8Uc1murhMTEjb67.png" alt="image-20230105145712440"></p><h3 id="实现签到功能"><a href="#实现签到功能" class="headerlink" title="实现签到功能"></a>实现签到功能</h3><p><img src="https://s2.loli.net/2023/01/05/yBWLzCURwpshZVf.png" alt="image-20230105150653344"></p><h3 id="统计签到"><a href="#统计签到" class="headerlink" title="统计签到"></a>统计签到</h3><p><img src="https://s2.loli.net/2023/01/06/s6E5UeOfMhI1Kz9.png" alt="image-20230106192904777"></p><h2 id="UV统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h2><h3 id="HyperLogLog用法"><a href="#HyperLogLog用法" class="headerlink" title="HyperLogLog用法"></a>HyperLogLog用法</h3><p><img src="https://s2.loli.net/2023/01/07/BK2liXp4aYVRnfQ.png" alt="image-20230107011541737"></p><p><img src="https://s2.loli.net/2023/01/07/tGIelPjYsNR4iCh.png" alt="image-20230107011601838"></p><p><img src="https://s2.loli.net/2023/01/07/NwSxAOndQmzuPyj.png" alt="image-20230107014901129"></p><h3 id="实现UV统计"><a href="#实现UV统计" class="headerlink" title="实现UV统计"></a>实现UV统计</h3><h4 id="配置UV统计拦截器"><a href="#配置UV统计拦截器" class="headerlink" title="配置UV统计拦截器"></a>配置UV统计拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UVInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;redis.key.uv&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String UVKey;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                             HttpServletResponse response,</span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> LocalDateTime.now()</span><br><span class="line">                .format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> MemberHolder.get().getId();</span><br><span class="line">        redisTemplate.opsForHyperLogLog().add(UVKey + date, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h4><p><img src="https://s2.loli.net/2023/01/07/IWZYGX9ETybakzB.png" alt="image-20230107182657453"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis实战&quot;&gt;&lt;a href=&quot;#Redis实战&quot; class=&quot;headerlink&quot; title=&quot;Redis实战&quot;&gt;&lt;/a&gt;Redis实战&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/12/02/gn1vIATkd</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>分布式搜索-ElasticSearch</title>
    <link href="http://example.com/2022/11/06/ElasticSearch/"/>
    <id>http://example.com/2022/11/06/ElasticSearch/</id>
    <published>2022-11-06T14:30:55.000Z</published>
    <updated>2022-11-08T08:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式搜索-ElasticSearch"><a href="#分布式搜索-ElasticSearch" class="headerlink" title="分布式搜索-ElasticSearch"></a>分布式搜索-ElasticSearch</h1><h2 id="ElasticSearch的定义"><a href="#ElasticSearch的定义" class="headerlink" title="ElasticSearch的定义"></a>ElasticSearch的定义</h2><blockquote><p>ElasticSearch是一款强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。</p><p>ElasticSearch结合kibana、logstash、beats即elastic stack(ELK)，被广泛应用在日志数据分析、实时监控等领域。ElasticSearch是elastic stack的核心、负责存储、搜索、分析数据。</p></blockquote><p><img src="https://s2.loli.net/2022/11/01/RZ7ISUChr3mwf1k.png" alt="image-20221101223809820"></p><p>Lucene是一个Java语言的搜索引擎类库，具有易扩展、高性能（基于倒排索引）的优势，但是只限于Java语言开发、学习复杂、不支持水平扩展。</p><p>2010年、Shay Banon重写了Compass，取名为ElasticSearch，相比于Lucene,ElasticSearch具备下列优势：支持分布式，可水平扩展；提供Restful接口，可被任何语言调用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>ElasticSearch是一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能。</p></blockquote><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>传统数据库（例如MySQL）采用正向索引，实例tb_goods中id插件索引：</p><p><img src="https://s2.loli.net/2022/11/02/O5w84dQCXZsAaNE.png" alt="image-20221102132601679"></p><p>ElasticSearch采用倒排索引：</p><ul><li>文档（document）：每条数据就是一个文档</li><li>词条（term）：文档按照语义分成的词语</li></ul><p><img src="https://s2.loli.net/2022/11/02/wPRIqp9SuXmzEDf.png" alt="image-20221102140722916"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h4 id="什么是文档和词条"><a href="#什么是文档和词条" class="headerlink" title="什么是文档和词条"></a>什么是文档和词条</h4><ul><li>每一条数据是一个文档</li><li>对文档中的内容分词，得到词语就是词条</li></ul><h4 id="什么是正向索引"><a href="#什么是正向索引" class="headerlink" title="什么是正向索引"></a>什么是正向索引</h4><ul><li>基于文档id创建索引。查询词条时必须先找到文档，而后判断是否包含词条</li></ul><h4 id="什么是倒排索引"><a href="#什么是倒排索引" class="headerlink" title="什么是倒排索引"></a>什么是倒排索引</h4><ul><li>对文档内容分词，对词条创建索引，并记录词条所在文档的信息。查询时根据词条查询文档id，而后获取到文档。</li></ul><p><img src="https://s2.loli.net/2022/11/02/lcJgpw2fOmnuTkj.png" alt="image-20221102141650173"></p><h2 id="ElasticSearch与MySQL的概念对比"><a href="#ElasticSearch与MySQL的概念对比" class="headerlink" title="ElasticSearch与MySQL的概念对比"></a>ElasticSearch与MySQL的概念对比</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>ElasticSearch是面向文档存储的，可以是数据库中的一条商品数据、一个订单数据。</p><p>文档数据会被序列化为Json格式后存储在ElasticSearch中</p></blockquote><p><img src="https://s2.loli.net/2022/11/02/SkCAXlB8YIuqFRH.png" alt="image-20221102141743483"></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote><p>索引（index）:相同类型的文档的集合</p><p>映射（mapping）:索引中文档的字段约束信息，类似表的结构约束</p></blockquote><p><img src="https://s2.loli.net/2022/11/04/3Jo4IlYBT9sUbwj.png" alt="image-20221104110451665"></p><h3 id="概念对比"><a href="#概念对比" class="headerlink" title="概念对比"></a>概念对比</h3><p><img src="https://s2.loli.net/2022/11/04/VPOdSqDBKkw5pza.png" alt="image-20221104110614232"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><blockquote><p>MySQL：擅长事务类型操作，可以确保数据的安全和一致性</p><p>ElasticSearch：擅长海量数据的搜索、分析和计算</p></blockquote><p><img src="https://s2.loli.net/2022/11/04/ShYJ9strKiEVQTO.png" alt="image-20221104111240108"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>索引：同类型文档的集合</li><li>文档：一个数据就是一个文档，在es中是JSON格式</li><li>字段：JSON文档中的字段</li><li>映射：索引中文档的约束，比如字段名称、类型</li></ul><p>elasticsearch与数据库的关系</p><ul><li>数据库负责事务类型操作</li><li>elasticsearch负责海量数据的搜索、分析和计算</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h3><ul><li><h4 id="拉取ElasticSearch镜像"><a href="#拉取ElasticSearch镜像" class="headerlink" title="拉取ElasticSearch镜像"></a>拉取ElasticSearch镜像</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="启动ElasticSearch服务"><a href="#启动ElasticSearch服务" class="headerlink" title="启动ElasticSearch服务"></a>启动ElasticSearch服务</h4><blockquote><p>可以使用ES_JAVA_OPTS设置占用内存大小</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;cluster.name=elasticsearch&quot; \</span><br><span class="line">-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx1024m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-d elasticsearch:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="修改挂载数据目录的访问权限"><a href="#修改挂载数据目录的访问权限" class="headerlink" title="修改挂载数据目录的访问权限"></a>修改挂载数据目录的访问权限</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data/</span><br></pre></td></tr></table></figure><ul><li><h4 id="安装中文分词器IKAnalyzer"><a href="#安装中文分词器IKAnalyzer" class="headerlink" title="安装中文分词器IKAnalyzer"></a>安装中文分词器IKAnalyzer</h4><blockquote><p>注意下载与ElasticSearch对应的版本</p><p>​    下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>下载完成后解压至Elasticsearch的<code>/mydata/elasticsearch/plugins</code>目录下</p></blockquote></li></ul><p><img src="https://s2.loli.net/2022/11/04/5HZ8QzN4oCbYkds.png" alt="image-20221104142632603"></p><p><img src="https://s2.loli.net/2022/11/04/ngfKyveu5oNckr1.png" alt="image-20221104143353023"></p><ul><li><h4 id="重新启动服务"><a href="#重新启动服务" class="headerlink" title="重新启动服务"></a>重新启动服务</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><ul><li><h4 id="访问返回版本信息"><a href="#访问返回版本信息" class="headerlink" title="访问返回版本信息"></a>访问返回版本信息</h4><p><a href="http://ip:9200/">http://ip:9200/</a></p></li></ul><p><img src="https://s2.loli.net/2022/11/04/qYwBU2b4e6ugnOX.png" alt="image-20221104145102525"></p><h3 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h3><ul><li><h4 id="拉取Kibana镜像"><a href="#拉取Kibana镜像" class="headerlink" title="拉取Kibana镜像"></a>拉取Kibana镜像</h4><blockquote><p>注意版本的一致性</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="启动Kibana服务"><a href="#启动Kibana服务" class="headerlink" title="启动Kibana服务"></a>启动Kibana服务</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -p 5601:5601 \</span><br><span class="line">--link elasticsearch:es \</span><br><span class="line">-e &quot;elasticsearch.hosts=http://es:9200&quot; \</span><br><span class="line">-d kibana:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="访问地址测试：http-ip-5601"><a href="#访问地址测试：http-ip-5601" class="headerlink" title="访问地址测试：http://ip:5601/"></a>访问地址测试：<a href="http://ip:5601/">http://ip:5601/</a></h4></li></ul><p><img src="https://s2.loli.net/2022/11/04/NIox6GYX2trMAJw.png" alt="image-20221104150025676"></p><ul><li><h4 id="通过Dev-Tools输入DSL语句操作ES"><a href="#通过Dev-Tools输入DSL语句操作ES" class="headerlink" title="通过Dev Tools输入DSL语句操作ES"></a>通过Dev Tools输入DSL语句操作ES</h4></li></ul><p><img src="https://s2.loli.net/2022/11/04/UlSaf3KxY4DZpJb.png" alt="image-20221104150950989"></p><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>ElasticSearch创建倒排索引时需对文档进行分词，在搜索时，需要对用户输入内容分词。</p><p>但是默认的分词规则对中文处理并不友好，可以在Kibana中的DevTools中进行测试</p><p><img src="https://s2.loli.net/2022/11/04/bxqUo2y8LlVNaWt.png" alt="image-20221104152745589"></p><p><img src="https://s2.loli.net/2022/11/04/iCOqGosUXAYyKbt.png" alt="image-20221104160915452"></p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>处理中文分词，一般使用<strong>IK分词器</strong></p><blockquote><p>IK分词器包含两种模式：ik_smart-最少切分 ik_max_word-最细切分</p></blockquote><p>前面已经安装过了IK分词器插件，下面进行测试：</p><p><img src="https://s2.loli.net/2022/11/04/JjPrQisfuoKhDIg.png" alt="image-20221104162000656"></p><p><img src="https://s2.loli.net/2022/11/04/m6tdvHiXs8YGeWh.png" alt="image-20221104162032629"></p><h3 id="IK分词器的拓展和停用字典"><a href="#IK分词器的拓展和停用字典" class="headerlink" title="IK分词器的拓展和停用字典"></a>IK分词器的拓展和停用字典</h3><p><img src="https://s2.loli.net/2022/11/04/iZWchlkxtM5z2Fe.png" alt="image-20221104162652489"></p><h4 id="扩展词库"><a href="#扩展词库" class="headerlink" title="扩展词库"></a>扩展词库</h4><blockquote><p>修改ik分词器config目录中的IkAnalyzer.cfg.xml文件，扩展ik分词库的词库</p></blockquote><p><img src="https://s2.loli.net/2022/11/06/JZgQwzWhDKHGnfT.png" alt="image-20221106022514407"></p><h4 id="停用词库"><a href="#停用词库" class="headerlink" title="停用词库"></a>停用词库</h4><blockquote><p>修改ik分词器config目录中的IkAnalyzer.cfg.xml文件，禁用敏感词条</p></blockquote><p><img src="https://s2.loli.net/2022/11/06/F5xJLqZT1EUAMNY.png" alt="image-20221106173408187"></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="添加dic文件"><a href="#添加dic文件" class="headerlink" title="添加dic文件"></a>添加dic文件</h4><p><img src="https://s2.loli.net/2022/11/06/139BQCV6RIlrWJa.png" alt="image-20221106173715801"></p><p><img src="https://s2.loli.net/2022/11/06/Ym8jh9dISNr3G5K.png" alt="image-20221106174024806"></p><h4 id="修改xml配置"><a href="#修改xml配置" class="headerlink" title="修改xml配置"></a>修改xml配置</h4><p><img src="https://s2.loli.net/2022/11/06/awlfRLWkK5Ad2mI.png" alt="image-20221106174157183"></p><h4 id="添加词库内容"><a href="#添加词库内容" class="headerlink" title="添加词库内容"></a>添加词库内容</h4><p><img src="https://s2.loli.net/2022/11/06/MUHYKb5fxtnvSZy.png" alt="image-20221106174317422"></p><p><img src="https://s2.loli.net/2022/11/06/1UJnT7rvz2RbYSG.png" alt="image-20221106174356105"></p><h4 id="重启ElasticSearch服务"><a href="#重启ElasticSearch服务" class="headerlink" title="重启ElasticSearch服务"></a>重启ElasticSearch服务</h4><p><img src="https://s2.loli.net/2022/11/06/gDFho6VvOcRLirb.png" alt="image-20221106174624133"></p><h4 id="查看分词结果"><a href="#查看分词结果" class="headerlink" title="查看分词结果"></a>查看分词结果</h4><p><img src="https://s2.loli.net/2022/11/06/82Kqor5PUhlFGeZ.png" alt="image-20221106174816802"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><h4 id="分词器的作用"><a href="#分词器的作用" class="headerlink" title="分词器的作用"></a>分词器的作用</h4><ul><li>创建倒排索引时，对文档进行分词</li><li>用户搜索时，对输入的内容进行分词</li></ul><h4 id="IK分词器的模式"><a href="#IK分词器的模式" class="headerlink" title="IK分词器的模式"></a>IK分词器的模式</h4><ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><h4 id="IK分词器的拓展和停用词条"><a href="#IK分词器的拓展和停用词条" class="headerlink" title="IK分词器的拓展和停用词条"></a>IK分词器的拓展和停用词条</h4><ul><li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条和停用词条</li></ul><p> <img src="https://s2.loli.net/2022/11/06/Puf3QSZYD7iEB94.png" alt="image-20221106175236631"></p><h2 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h2><h3 id="mapping属性"><a href="#mapping属性" class="headerlink" title="mapping属性"></a>mapping属性</h3><blockquote><p>mapping是对索引库中文档的约束，常见的mapping属性包括如下：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text-可分词的文本 keyword-精确值（例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪些分词器</li><li>properties：字段的子字段</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/06/HhelSVEGADjFgr8.png" alt="image-20221106220204637"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/11/06/3NVRKZAlW4hCs8p.png" alt="image-20221106220252286"></p><h3 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h3><blockquote><p>ElasticSearch中通过Restful请求操作索引库、文档。</p><p>请求内容用DSL语句来表示</p></blockquote><h4 id="创建索引库和mapping的DSL语法"><a href="#创建索引库和mapping的DSL语法" class="headerlink" title="创建索引库和mapping的DSL语法"></a>创建索引库和mapping的DSL语法</h4><p><img src="https://s2.loli.net/2022/11/06/38clkXCgNWOBoud.png" alt="image-20221106220731752"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引库</span><br><span class="line">PUT /test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;email&quot;: &#123;</span><br><span class="line">         &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">         &quot;index&quot;: false</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;name&quot;: &#123;</span><br><span class="line">         &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">         &quot;properties&quot;: &#123;</span><br><span class="line">           &quot;firstName&quot;: &#123;</span><br><span class="line">             &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">            &quot;lastName&quot;: &#123;</span><br><span class="line">             &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/Rwf3cjgB6kIzxts.png" alt="image-20221106221428024"></p><h3 id="查询索引库"><a href="#查询索引库" class="headerlink" title="查询索引库"></a>查询索引库</h3><p><img src="https://s2.loli.net/2022/11/06/BX2FU9EinwvLZ1I.png" alt="image-20221106221613047"></p><p><img src="https://s2.loli.net/2022/11/06/8ywquOIojrdLBR6.png" alt="image-20221106221706156"></p><h3 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h3><p><img src="https://s2.loli.net/2022/11/06/hlHSWn1okwfNUCM.png" alt="image-20221106221725757"></p><h3 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h3><blockquote><p>索引库和mapping一旦创建无法修改，但是可以添加新的字段</p></blockquote><p> <img src="https://s2.loli.net/2022/11/06/ZaDkxv5z6Mmjgbi.png" alt="image-20221106221911810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#  修改索引库 只可以添加mapping</span><br><span class="line">PUT /test/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/SbokiOca2X4yPpu.png" alt="image-20221106222135336"></p><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2022/11/06/VnfJQluhDcARv7U.png" alt="image-20221106222304902"></p><p><img src="https://s2.loli.net/2022/11/06/9ORE36zaMFBqjhT.png" alt="image-20221106222323719"></p><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h3><p><img src="https://s2.loli.net/2022/11/06/wyhT3CQsVtWl5kH.png" alt="image-20221106222443667"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 新增文档</span><br><span class="line">POST /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;你好，世界&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;xx@qq.com&quot;,</span><br><span class="line">  &quot;name&quot;: &#123;</span><br><span class="line">    &quot;firstName&quot;: &quot;Yuan&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;JianWei&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;age&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/3easSmhl6DgUBpq.png" alt="image-20221106222805589"></p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p><img src="https://s2.loli.net/2022/11/06/rZw4mMSVXQAhRDP.png" alt="image-20221106223018859"></p><p><img src="https://s2.loli.net/2022/11/06/uExSyBld4JKCPUv.png" alt="image-20221106223254350"></p><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p><img src="https://s2.loli.net/2022/11/06/lhTLawj9kBCcWRy.png" alt="image-20221106223332596"></p><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><h4 id="方式一：全量修改，删除旧文档、添加新文档"><a href="#方式一：全量修改，删除旧文档、添加新文档" class="headerlink" title="方式一：全量修改，删除旧文档、添加新文档"></a>方式一：全量修改，删除旧文档、添加新文档</h4><p><img src="https://s2.loli.net/2022/11/06/l6oVLWyc7hjerGR.png" alt="image-20221106223458498"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 全量修改文档</span><br><span class="line">PUT /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;你好，世界&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;xx@123.com&quot;,</span><br><span class="line">  &quot;name&quot;: &#123;</span><br><span class="line">    &quot;firstName&quot;: &quot;Yuan&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;JianWei&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;age&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/2ZDQOgq39C6oHIK.png" alt="image-20221106224226454"></p><h4 id="方式二：增量修改，修改指定字段值"><a href="#方式二：增量修改，修改指定字段值" class="headerlink" title="方式二：增量修改，修改指定字段值"></a>方式二：增量修改，修改指定字段值</h4><p><img src="https://s2.loli.net/2022/11/06/kOLPBCTuQRhc1jM.png" alt="image-20221106223941573"></p><p><img src="https://s2.loli.net/2022/11/06/FhD7qmdwzPnaiCS.png" alt="image-20221106224259997"></p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><ul><li>新增文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>查询文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>删除文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>全量修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>增量修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_update/文档id</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/VadnOjkPsTL96Hu.png" alt="image-20221106224648435"></p><h2 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h2><blockquote><p>ElasticSearch官方提供了各种不同语言的客户端，用来操作ElasticSearch。</p><p>这些客户端的本质是组装DSL语句，通过http请求发送给ElasticSearch服务器。</p><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p></blockquote><p><img src="https://s2.loli.net/2022/11/06/JPL3USxHtw2kM1F.png" alt="image-20221106225826771"></p><p><img src="https://s2.loli.net/2022/11/06/I1uJcNMfKn5Tr2E.png" alt="image-20221106225956266"></p><h3 id="数据结构分析"><a href="#数据结构分析" class="headerlink" title="数据结构分析"></a>数据结构分析</h3><p><img src="https://s2.loli.net/2022/11/07/JDkzrFC7Iwn3pgO.png" alt="image-20221107110832616"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># hotel mapping</span><br><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/07/8riQd4hENVqeXaI.png" alt="image-20221107131920561"></p><blockquote><p>ElasticSearch支持两种地理坐标的数据类型：</p><ul><li>geo_point：由纬度（latitude）和经度（longitude）确定一个点</li><li>geo_shape：有多个geo_point组成的复杂几何图形</li></ul></blockquote><p>字段拷贝可以使用copy_to属性将当前字段拷贝到指定字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># hotel mapping</span><br><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;all&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化RestClient"><a href="#初始化RestClient" class="headerlink" title="初始化RestClient"></a>初始化RestClient</h3><p><img src="https://s2.loli.net/2022/11/07/WJPng24f8jxIvOw.png" alt="image-20221107154836321"></p><h4 id="引入ElasticSearchRestHighLevelClient依赖"><a href="#引入ElasticSearchRestHighLevelClient依赖" class="headerlink" title="引入ElasticSearchRestHighLevelClient依赖"></a>引入ElasticSearchRestHighLevelClient依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.17.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/07/km9ZPu3zlUDOht1.png" alt="image-20221107155725626"></p><h4 id="覆盖SpringBoot默认的ElasticSearch版本"><a href="#覆盖SpringBoot默认的ElasticSearch版本" class="headerlink" title="覆盖SpringBoot默认的ElasticSearch版本"></a>覆盖SpringBoot默认的ElasticSearch版本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.17.3<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="初始化RestHignLevelClient"><a href="#初始化RestHignLevelClient" class="headerlink" title="初始化RestHignLevelClient"></a>初始化RestHignLevelClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestClientTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://1.117.34.49:5601&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.restHighLevelClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/07/Mhxyf8Ne4jlFb1g.png" alt="image-20221107170814816"></p><h3 id="创建索引库-1"><a href="#创建索引库-1" class="headerlink" title="创建索引库"></a>创建索引库</h3><p><img src="https://s2.loli.net/2022/11/07/vEcn8dhrf3yiL71.png" alt="image-20221107220024274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createProductIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建CreateIndexRequest对象</span></span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">createIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置请求参数：PRODUCT_TEMPLATE-DSL语句 XContentType.JSON</span></span><br><span class="line">    createIndexRequest.source(PRODUCT_TEMPLATE, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引库-1"><a href="#删除索引库-1" class="headerlink" title="删除索引库"></a>删除索引库</h3><p><img src="https://s2.loli.net/2022/11/08/snwbd5fWMAu1IFQ.png" alt="image-20221108002842447"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteProductIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建DeleteIndexRequest对象</span></span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">deleteIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断索引库是否存在"><a href="#判断索引库是否存在" class="headerlink" title="判断索引库是否存在"></a>判断索引库是否存在</h3><p><img src="https://s2.loli.net/2022/11/08/IR9XueovcAS1CFx.png" alt="image-20221108100749983"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">existsProductIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建GetIndexRequest对象</span></span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">getIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求，接收结果</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists ? <span class="string">&quot;索引库存在&quot;</span> : <span class="string">&quot;索引库不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><h4 id="索引库操作的基本步骤"><a href="#索引库操作的基本步骤" class="headerlink" title="索引库操作的基本步骤"></a>索引库操作的基本步骤</h4><ul><li>初始化RestHighLevelClient</li><li>创建IndexRequest</li><li>准备DSL语句</li><li>发送请求，调用restHighLevelClient.indices()的API</li></ul><p><img src="https://s2.loli.net/2022/11/08/RD8tV1Fs6AGQaZj.png" alt="image-20221108102633467"></p><h2 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档</h2><h3 id="初始化RestClient-1"><a href="#初始化RestClient-1" class="headerlink" title="初始化RestClient"></a>初始化RestClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestDocumentTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PmsProductService pmsProductService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化RestHighLevelClient</span></span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://1.117.34.49:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 关闭客户端资源</span></span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.restHighLevelClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增文档-1"><a href="#新增文档-1" class="headerlink" title="新增文档"></a>新增文档</h3><p><img src="https://s2.loli.net/2022/11/08/k4lInau52tiJEpP.png" alt="image-20221108103310381"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取Json对象</span></span><br><span class="line">    <span class="type">PmsProduct</span> <span class="variable">pmsProduct</span> <span class="operator">=</span> pmsProductService.getPmsProductById(<span class="number">1L</span>);</span><br><span class="line">    <span class="type">EsProduct</span> <span class="variable">esProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsProduct</span>();</span><br><span class="line">    <span class="comment">// 拷贝为es商品信息实体</span></span><br><span class="line">    BeanUtils.copyProperties(pmsProduct, esProduct);</span><br><span class="line">    <span class="comment">// 序列化为JSON</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> JSONUtil.toJsonStr(esProduct);</span><br><span class="line">    <span class="comment">// 创建Request对象</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;product&quot;</span>).id(String.valueOf(esProduct.getId()));</span><br><span class="line">    <span class="comment">// 设置请求参数</span></span><br><span class="line">    indexRequest.source(source, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/08/96XnDj1cywrVNTM.png" alt="image-20221108145456192"></p><h3 id="查询文档-1"><a href="#查询文档-1" class="headerlink" title="查询文档"></a>查询文档</h3><p><img src="https://s2.loli.net/2022/11/08/6GlP1J9s8hjwKey.png" alt="image-20221108150917208"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">// 创建GetRequest对象</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 获取source</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> getResponse.getSourceAsString();</span><br><span class="line">    <span class="comment">// 将json放序列化为对象</span></span><br><span class="line">    <span class="type">EsProduct</span> <span class="variable">esProduct</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, EsProduct.class);</span><br><span class="line">    System.out.println(esProduct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改文档-1"><a href="#修改文档-1" class="headerlink" title="修改文档"></a>修改文档</h3><blockquote><p>修改文档数据有两种方式：</p><ul><li>方式一：全量更新：写入id和之前一样的文档，就会删除旧文档，添加新文档</li><li>方式二：局部更新：只更新部分字段</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/08/xoujXBhdIFyt41K.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建UpdateRequest对象</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备参数</span></span><br><span class="line">    updateRequest.doc(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;128&quot;</span>, <span class="string">&quot;sale&quot;</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建DeleteRequest对象</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量导入文档"><a href="#批量导入文档" class="headerlink" title="批量导入文档"></a>批量导入文档</h3><p><img src="https://s2.loli.net/2022/11/08/4mdQPqZkIL3iw2H.png" alt="image-20221108160643218"></p><p><img src="https://s2.loli.net/2022/11/08/s4KruGkY2nFld9D.png" alt="image-20221108160700715"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bulkIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    List&lt;PmsProduct&gt; pmsProducts = pmsProductService.getPmsProducts(<span class="keyword">new</span> <span class="title class_">PmsProduct</span>());</span><br><span class="line">    pmsProducts.forEach(pmsProduct -&gt; &#123;</span><br><span class="line">        <span class="comment">// 对象赋值</span></span><br><span class="line">        <span class="type">EsProduct</span> <span class="variable">esProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsProduct</span>(pmsProduct);</span><br><span class="line">        <span class="comment">// 遍历添加准备参数</span></span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;product&quot;</span>)</span><br><span class="line">                .id(String.valueOf(esProduct.getId()))</span><br><span class="line">                .source(JSONUtil.toJsonStr(esProduct), XContentType.JSON));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2022/11/08/p7lvCwMs1UuHqIt.png" alt="image-20221108154330652"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式搜索-ElasticSearch&quot;&gt;&lt;a href=&quot;#分布式搜索-ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;分布式搜索-ElasticSearch&quot;&gt;&lt;/a&gt;分布式搜索-ElasticSearch&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>消息队列 MQ</title>
    <link href="http://example.com/2022/11/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/"/>
    <id>http://example.com/2022/11/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/</id>
    <published>2022-11-01T14:25:22.000Z</published>
    <updated>2022-11-01T14:25:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息队列-MQ"><a href="#消息队列-MQ" class="headerlink" title="消息队列-MQ"></a>消息队列-MQ</h1><h2 id="同步通讯和异步通讯"><a href="#同步通讯和异步通讯" class="headerlink" title="同步通讯和异步通讯"></a>同步通讯和异步通讯</h2><p><img src="https://s2.loli.net/2022/10/07/W4mJYnc1TodEset.png" alt="image-20221007163138062"></p><h2 id="同步调用的问题"><a href="#同步调用的问题" class="headerlink" title="同步调用的问题"></a>同步调用的问题</h2><p>微服务间基于Feign的调用属于同步方式，存在一些问题。</p><p><img src="https://s2.loli.net/2022/10/07/1L3rbYpWaITHjZR.png" alt="image-20221007163406290"></p><p><img src="https://s2.loli.net/2022/10/07/hvCNMBnrF5d8y9w.png" alt="image-20221007163727790"></p><p><img src="https://s2.loli.net/2022/10/07/wo1W2keUlB59tRE.png" alt="image-20221007171324820"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="同步调用的优点"><a href="#同步调用的优点" class="headerlink" title="同步调用的优点"></a>同步调用的优点</h4><ul><li>时效性强、立即获得结果</li></ul><h4 id="同步调用的问题-1"><a href="#同步调用的问题-1" class="headerlink" title="同步调用的问题"></a>同步调用的问题</h4><ul><li>耦合性高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败的问题</li></ul><h2 id="异步调用方案"><a href="#异步调用方案" class="headerlink" title="异步调用方案"></a>异步调用方案</h2><p>异步调用常见的实现是事件驱动模式</p><p><img src="https://s2.loli.net/2022/10/07/2mtNF9DsxYQyfCr.png" alt="image-20221007181054098"></p><p>异步通信的优点：</p><ul><li>优势一：通过事件发布完成服务解耦，耦合度低</li><li>优势二：性能提升，吞吐量提高</li><li>优势三：服务没有强依赖，不担心级联失败问题，故障隔离</li><li>优势四：流量削峰</li></ul><p>异步通信的缺点：</p><ul><li>依赖于Broken的可靠性，安全性，吞吐能力</li><li>架构复杂，业务没有明显的流程线，不易于追踪管理</li></ul><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><p>MQ（Message Queue）是消息队列，存放消息的队列，就是事件驱动架构的Broker。</p><p><img src="https://s2.loli.net/2022/10/10/im2g4uOMUFkW7z3.png" alt="image-20221010211020957"></p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ是基于Erlang语言开发的开源通信中间件。</p><h4 id="RabbitMQ部署"><a href="#RabbitMQ部署" class="headerlink" title="RabbitMQ部署"></a>RabbitMQ部署</h4><h5 id="下载docker镜像"><a href="#下载docker镜像" class="headerlink" title="下载docker镜像"></a>下载docker镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.9-management</span><br></pre></td></tr></table></figure><h5 id="启动RabbitMQ服务"><a href="#启动RabbitMQ服务" class="headerlink" title="启动RabbitMQ服务"></a>启动RabbitMQ服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 5672:5672 -p 15672:15672 \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">--hostname rabbitmq1 \</span><br><span class="line">-d rabbitmq:3.9-management</span><br></pre></td></tr></table></figure><h5 id="访问地址："><a href="#访问地址：" class="headerlink" title="访问地址："></a>访问地址：</h5><p>http://{ip}:15672/</p><p>输入初始的账号密码：guest guset</p><p><img src="https://s2.loli.net/2022/10/18/1FjJvbPXgi8KmHp.png" alt="image-20221018182241708"></p><h5 id="RabbitMQ的结构和概念"><a href="#RabbitMQ的结构和概念" class="headerlink" title="RabbitMQ的结构和概念"></a>RabbitMQ的结构和概念</h5><p><img src="https://s2.loli.net/2022/10/18/eo2MaWnsyb41TCj.png" alt="image-20221018182812550"></p><h5 id="RabbitMQ的概念"><a href="#RabbitMQ的概念" class="headerlink" title="RabbitMQ的概念"></a>RabbitMQ的概念</h5><h6 id="channel：操作队列的工具"><a href="#channel：操作队列的工具" class="headerlink" title="channel：操作队列的工具"></a>channel：操作队列的工具</h6><h6 id="exchange：路由消息到队列中"><a href="#exchange：路由消息到队列中" class="headerlink" title="exchange：路由消息到队列中"></a>exchange：路由消息到队列中</h6><h6 id="queue：缓存消息"><a href="#queue：缓存消息" class="headerlink" title="queue：缓存消息"></a>queue：缓存消息</h6><h6 id="virtual：虚拟主机是对queue和exchange等资源的逻辑分组"><a href="#virtual：虚拟主机是对queue和exchange等资源的逻辑分组" class="headerlink" title="virtual：虚拟主机是对queue和exchange等资源的逻辑分组"></a>virtual：虚拟主机是对queue和exchange等资源的逻辑分组</h6><h4 id="RabbitMQ常见消息模型"><a href="#RabbitMQ常见消息模型" class="headerlink" title="RabbitMQ常见消息模型"></a>RabbitMQ常见消息模型</h4><ul><li>基本消息队列（BasicQueue）</li><li>工作消息队列（WorkQueue）</li><li>发布订阅（Publish\Subscribe）<ul><li>Fanout Exchange：广播</li><li>Direct Exchange：路由</li><li>Topic Exchange：主题</li></ul></li></ul><p><img src="https://s2.loli.net/2022/10/18/aEizt8sZYn1H4rf.png" alt="image-20221018220302269"></p><h5 id="基本消息队列"><a href="#基本消息队列" class="headerlink" title="基本消息队列"></a>基本消息队列</h5><p>最基本的消息队列模型只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><p><img src="https://s2.loli.net/2022/10/18/sWgC73Zxd94myXH.png" alt="image-20221018220806394"></p><h5 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h5><p><img src="https://s2.loli.net/2022/10/19/7VMkeAN9xhF6rUQ.png" alt="image-20221019101819705"></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring AMQP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生产者测试类</p><p><img src="https://s2.loli.net/2022/10/19/hZeGkNP463QaDps.png" alt="image-20221019102020346"></p><p>消费者测试类</p><p><img src="https://s2.loli.net/2022/10/19/qvwyZIWVGp2nf4C.png" alt="image-20221019102048266"></p><p>基本消息队列的消息发送流程</p><ul><li>建立connect</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel向队列发送消息</li></ul><p>基本消息队列的消息接收流程</p><ul><li>建立connect</li><li>创建channel</li><li>利用channel声明队列</li><li>定义consumer的消息行为handleDelivery()</li><li>利用channel将消费者和与队列绑定</li></ul><p><img src="https://s2.loli.net/2022/10/19/bKL8cMOSs9hCki6.png"></p><h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><p><img src="https://s2.loli.net/2022/10/19/xK4sr5XeITyUbot.png" alt="image-20221019103336534"></p><p>AMQP(Advance Message Queuing Protocol)，用于在应用程序或之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p><p>Spring AMQP是基于AMQP协议定义的一套 API规范，提供了模板来发送和接收消息，包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现。</p><p><img src="https://s2.loli.net/2022/10/19/qdbR2DHLJf8IKWs.png" alt="image-20221019141304343"></p><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><blockquote><p>简单模式是最简单的消费模式，它包含一个生产者，一个消费者和一个队列。生产者向队列里发送消息。消费者从队列中获取消息并消费。</p></blockquote><p><img src="https://s2.loli.net/2022/10/25/Yi2xXCyqfzsOvke.png" alt="img"></p><p><img src="https://s2.loli.net/2022/10/19/5ocE8deRZhAC2UD.png" alt="image-20221019142246296"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="在父工程中引入spring-amqp依赖"><a href="#在父工程中引入spring-amqp依赖" class="headerlink" title="在父工程中引入spring-amqp依赖"></a>在父工程中引入spring-amqp依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring AMQP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写application-yml配置文件"><a href="#编写application-yml配置文件" class="headerlink" title="编写application.yml配置文件"></a>编写application.yml配置文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.37</span><span class="number">.84</span><span class="number">.213</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h5 id="注入RabbitTemplate完成消息的发送"><a href="#注入RabbitTemplate完成消息的发送" class="headerlink" title="注入RabbitTemplate完成消息的发送"></a>注入RabbitTemplate完成消息的发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello rabbitmq&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(QUEUE_NAME, message);</span><br><span class="line">        log.info(<span class="string">&quot;send message: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过-RabbitListener注解接受方法"><a href="#通过-RabbitListener注解接受方法" class="headerlink" title="通过@RabbitListener注解接受方法"></a>通过@RabbitListener注解接受方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;receive : &#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过controller测试发送和接受方法"><a href="#通过controller测试发送和接受方法" class="headerlink" title="通过controller测试发送和接受方法"></a>通过controller测试发送和接受方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SimpleSender simpleSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;简单模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/simpleSend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">simpleSend</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            simpleSender.send();</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/10/25/3rw5XaWpMq7ZzmI.png" alt="image-20221025152509407"></p><p><img src="https://s2.loli.net/2022/10/25/demnPLopafgxbH4.png" alt="image-20221025154616188"></p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><blockquote><p>工作模式是指向多个相互竞争的消费者发送消息的模式，它包含一个生产者、两个消费者和一个队列。两个消费者同时绑定到一个队列上，当消费者获取消息处理耗时任务时，空闲的消费者从队列中获取并消费消息。</p></blockquote><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="https://s2.loli.net/2022/10/25/rD4H18tuE5mX3IV.png" alt="img"></p><h5 id="添加相关配置，注入队列、生产者和消费者"><a href="#添加相关配置，注入队列、生产者和消费者" class="headerlink" title="添加相关配置，注入队列、生产者和消费者"></a>添加相关配置，注入队列、生产者和消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">workQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;work.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WorkReceiver <span class="title function_">workReceiver1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WorkReceiver</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WorkReceiver <span class="title function_">workReceiver2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WorkReceiver</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WorkSender <span class="title function_">workSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WorkSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者通过send方法向队列中发送消息"><a href="#生产者通过send方法向队列中发送消息" class="headerlink" title="生产者通过send方法向队列中发送消息"></a>生产者通过send方法向队列中发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello work&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limitIndex; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(QUEUE_NAME, message);</span><br><span class="line">        log.info(<span class="string">&quot;send message: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者从队列中获取消息"><a href="#消费者从队列中获取消息" class="headerlink" title="消费者从队列中获取消息"></a>消费者从队列中获取消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkReceiver</span><span class="params">(<span class="type">int</span> instance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instance = instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive &#123;&#125;&quot;</span>, <span class="built_in">this</span>.instance, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; Done in &#123;&#125;&quot;</span>, <span class="built_in">this</span>.instance, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : message.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/10/25/Y1tRyaQ3j8LUnJe.png" alt="image-20221025162106610"></p><h3 id="发布订阅模式（Publish-Subscribe）"><a href="#发布订阅模式（Publish-Subscribe）" class="headerlink" title="发布订阅模式（Publish/Subscribe）"></a>发布订阅模式（Publish/Subscribe）</h3><blockquote><p>发布订阅模式与之前模式的区别是允许将同一消息发送给多个消费者，实现方式是加入exchange(交换机)。</p><p>发布/订阅模式是指同时向多个消费者发送消息的模式（类似广播的形式），它包含一个生产者、两个消费者、两个队列和一个交换机。两个消费者同时绑定到不同的队列中去，两个队列绑定到交换机上去，生产者通过发送消息到交换机，所有消息者接收并消费消息。</p><p>Fanout Exchange会将接收到的消息路由到每一个跟其绑定的queue。</p></blockquote><p><img src="https://s2.loli.net/2022/10/27/fmSr3JL4utwo1de.png" alt="img"></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="https://s2.loli.net/2022/10/30/R9u1sOfBlWqbdnP.png" alt="image-20221030221012471"></p><h5 id="添加发布-订阅模式相关Java配置"><a href="#添加发布-订阅模式相关Java配置" class="headerlink" title="添加发布/订阅模式相关Java配置"></a>添加发布/订阅模式相关Java配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布/订阅消息队列配置类</span></span><br><span class="line"><span class="comment"> * Created by YuanJW on 2022/10/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding1</span><span class="params">(FanoutExchange fanoutExchange, Queue fanoutQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding2</span><span class="params">(FanoutExchange fanoutExchange, Queue fanoutQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutSender <span class="title function_">fanoutSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutReceiver <span class="title function_">fanoutReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutReceiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者向交换机发送消息"><a href="#生产者向交换机发送消息" class="headerlink" title="生产者向交换机发送消息"></a>生产者向交换机发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limitIndex; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">        log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者从绑定的匿名队列中获取消息"><a href="#消费者从绑定的匿名队列中获取消息" class="headerlink" title="消费者从绑定的匿名队列中获取消息"></a>消费者从绑定的匿名队列中获取消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message, <span class="type">int</span> receiver)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive &#123;&#125;&quot;</span>, receiver, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; done in &#123;&#125;s&quot;</span>, receiver, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : message.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller中添加测试接口"><a href="#controller中添加测试接口" class="headerlink" title="controller中添加测试接口"></a>controller中添加测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FanoutSender fanoutSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;发布/订阅模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/fanout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fanoutSender.send(i);</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><h5 id="交换机的作用："><a href="#交换机的作用：" class="headerlink" title="交换机的作用："></a>交换机的作用：</h5><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p><img src="https://s2.loli.net/2022/10/30/rjIlwdf4iXEQvke.png" alt="image-20221030222616265"></p><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><blockquote><p>路由模式是可以根据路由键选择性给多个消费者发送消息的模式，它包含一个生产者、两个消费者、两个队列和一个交换机。两个消费者同时绑定到不同的队列上去，两个队列通过路由键绑定到交换机上去，生产者发送消息到交换机，交换机通过路由键转发到不不同的队列中，队列绑定的消费者接收并消费消息。</p></blockquote><p><img src="https://s2.loli.net/2022/10/30/R1v7uBQiKAMJh3e.png" alt="img"></p><h4 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h4><p><img src="https://s2.loli.net/2022/10/30/HkeFym1pOzCuTso.png" alt="image-20221030224244880"></p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="添加路由模式相关Java配置"><a href="#添加路由模式相关Java配置" class="headerlink" title="添加路由模式相关Java配置"></a>添加路由模式相关Java配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingRed1</span><span class="params">(DirectExchange directExchange, Queue directQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingBlack1</span><span class="params">(DirectExchange directExchange, Queue directQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingYellow2</span><span class="params">(DirectExchange directExchange, Queue directQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingBlack2</span><span class="params">(DirectExchange directExchange, Queue directQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectSender <span class="title function_">directSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectReceiver <span class="title function_">directReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectReceiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者使用不同的路由键发送消息"><a href="#生产者使用不同的路由键发送消息" class="headerlink" title="生产者使用不同的路由键发送消息"></a>生产者使用不同的路由键发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">directExchange</span> <span class="operator">=</span> <span class="string">&quot;direct.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] keys = &#123;<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;black&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys[limitIndex];</span><br><span class="line">        sb.append(key).append(<span class="string">&#x27; &#x27;</span>).append(index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(directExchange, key, message);</span><br><span class="line">        log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者从绑定的队列中获取消息"><a href="#消费者从绑定的队列中获取消息" class="headerlink" title="消费者从绑定的队列中获取消息"></a>消费者从绑定的队列中获取消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message, <span class="type">int</span> receive)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive : &#123;&#125;&quot;</span>, receive, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; done in &#123;&#125;s&quot;</span>, receive, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : message.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-RabbitListener注入和绑定"><a href="#使用-RabbitListener注入和绑定" class="headerlink" title="使用@RabbitListener注入和绑定"></a>使用@RabbitListener注入和绑定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue3&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;direct.exchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;green&quot;, &quot;black&quot;&#125;</span></span><br><span class="line"><span class="meta">        ))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive3</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    receive(message, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller中添加测试接口-1"><a href="#controller中添加测试接口-1" class="headerlink" title="controller中添加测试接口"></a>controller中添加测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DirectSender directSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;路由模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/direct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">direct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            directSender.send(i);</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/10/31/MyL5D9iWI6EncNj.png" alt="image-20221031180227318"></p><h3 id="通配符模式"><a href="#通配符模式" class="headerlink" title="通配符模式"></a>通配符模式</h3><blockquote><p>通配符模式是可以根据<strong>路由键匹配规则</strong>选择性给多个消费者发送消息的模式，它包含一个生产者、两个消费者、两个队列和一个交换机。</p><p>两个消费者同时绑定到不同的队列上去，两个队列通过<strong>路由键匹配规则</strong>绑定到交换机上去，生产者发送消息到交换机，交换机通过<strong>路由键匹配规则</strong>转发到不同的队列，队列绑定的消费者接收并消费消息。</p></blockquote><h4 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h4><blockquote><p>TopicExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以.分割</p></blockquote><p><img src="https://s2.loli.net/2022/11/01/IYJ1MFTc9XymoN8.png" alt="image-20221101162655587"></p><h4 id="特殊匹配符号"><a href="#特殊匹配符号" class="headerlink" title="特殊匹配符号"></a>特殊匹配符号</h4><ul><li>*：只能匹配一个单词</li><li>#：可以匹配零个或多个单词</li></ul><p><img src="https://s2.loli.net/2022/10/31/orAvR5WiqLbGFE2.png" alt="img"></p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="添加路由模式相关配置"><a href="#添加路由模式相关配置" class="headerlink" title="添加路由模式相关配置"></a>添加路由模式相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">TopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topic.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TopicBinding1a</span><span class="params">(TopicExchange topicExchange, Queue topicQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(topicExchange).with(<span class="string">&quot;a.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TopicBinding1b</span><span class="params">(TopicExchange topicExchange, Queue topicQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(topicExchange).with(<span class="string">&quot;*.b.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TopicBinding2b</span><span class="params">(TopicExchange topicExchange, Queue topicQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2).to(topicExchange).with(<span class="string">&quot;*.*.c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicSender <span class="title function_">topicSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicReceiver <span class="title function_">topicReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicReceiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="路由模式生产者发送消息"><a href="#路由模式生产者发送消息" class="headerlink" title="路由模式生产者发送消息"></a>路由模式生产者发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;topic.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] keys =&#123;<span class="string">&quot;a.z.1&quot;</span>, <span class="string">&quot;1.b.2&quot;</span>, <span class="string">&quot;1.3.c&quot;</span>, <span class="string">&quot;2.d.1&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % keys.length;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys[limitIndex];</span><br><span class="line">        sb.append(key).append(<span class="string">&#x27; &#x27;</span>).append(index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(TOPIC_EXCHANGE, key, message);</span><br><span class="line">        log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="路由模式生产者接收消息"><a href="#路由模式生产者接收消息" class="headerlink" title="路由模式生产者接收消息"></a>路由模式生产者接收消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(value = @Queue(&quot;topic.queue3&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;topic.exchange&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;#.d.#&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive3</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message, <span class="type">int</span> receive)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive : &#123;&#125;&quot;</span>, receive, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; done in &#123;&#125;s&quot;</span>, receive, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String in)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : in.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/5SZpVEKsTCvhtcO.png" alt="image-20221101170653303"></p><h5 id="controller中添加测试接口-2"><a href="#controller中添加测试接口-2" class="headerlink" title="controller中添加测试接口"></a>controller中添加测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DirectSender directSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;适配器模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/topic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">topic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            topicSender.send(i);</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/LzsAn2MbK9kGh8U.png" alt="image-20221101170301498"></p><h3 id="MessageConverter消息转换器"><a href="#MessageConverter消息转换器" class="headerlink" title="MessageConverter消息转换器"></a>MessageConverter消息转换器</h3><blockquote><p>默认情况下，消息体被转换为二进制的数据方式进行传输，SpringAMQP将对象通过JDK的方式进行序列化，这种序列化方式存在一些问题：性能比较差，安全性存在隐患。</p></blockquote><h4 id="基于JDK的ObjectOutputStream进行序列化"><a href="#基于JDK的ObjectOutputStream进行序列化" class="headerlink" title="基于JDK的ObjectOutputStream进行序列化"></a>基于JDK的ObjectOutputStream进行序列化</h4><h5 id="新建队列"><a href="#新建队列" class="headerlink" title="新建队列"></a>新建队列</h5><p><img src="https://s2.loli.net/2022/11/01/HaSeQrKYhJBC6bD.png" alt="image-20221101175545469"></p><h5 id="对指定队列发送消息"><a href="#对指定队列发送消息" class="headerlink" title="对指定队列发送消息"></a>对指定队列发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendObject</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(OBJECT_QUEUE, map);</span><br><span class="line">    log.info(<span class="string">&quot;send message: &#123;&#125;&quot;</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/6XGWVuKeESrRfjm.png" alt="image-20221101173403725"></p><h4 id="使用JSON方式进行序列化"><a href="#使用JSON方式进行序列化" class="headerlink" title="使用JSON方式进行序列化"></a>使用JSON方式进行序列化</h4><p><img src="https://s2.loli.net/2022/11/01/HDXnsqv6TA1Odtl.png" alt="image-20221101175642565"></p><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入MessageConvert"><a href="#注入MessageConvert" class="headerlink" title="注入MessageConvert"></a>注入MessageConvert</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/CVzaqkP85upyHh9.png" alt="image-20221101174602598"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;消息队列-MQ&quot;&gt;&lt;a href=&quot;#消息队列-MQ&quot; class=&quot;headerlink&quot; title=&quot;消息队列-MQ&quot;&gt;&lt;/a&gt;消息队列-MQ&lt;/h1&gt;&lt;h2 id=&quot;同步通讯和异步通讯&quot;&gt;&lt;a href=&quot;#同步通讯和异步通讯&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="消息队列" scheme="http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="http://example.com/2022/07/31/Jenkins/"/>
    <id>http://example.com/2022/07/31/Jenkins/</id>
    <published>2022-07-31T14:30:55.000Z</published>
    <updated>2022-08-07T14:48:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><h2 id="Jenkins简介"><a href="#Jenkins简介" class="headerlink" title="Jenkins简介"></a>Jenkins简介</h2><blockquote><p>Jenkins是开源CI&amp;CD软件领导者，提供超过1000个插件来支持构建、部署、自动化，满足任何项目的需要。</p><p>我们可以利用Jenkins来构建和部署我们的项目，它可以实现从代码仓库获取代码，将代码打包成可执行文件并通过远程的ssh工具执行脚本来运行我们的项目。</p></blockquote><p><img src="https://s2.loli.net/2022/08/04/gYiXZ1eEJ6pGNTd.png" alt="image-20220804133922012"></p><h2 id="Jenkins的安装及配置"><a href="#Jenkins的安装及配置" class="headerlink" title="Jenkins的安装及配置"></a>Jenkins的安装及配置</h2><h3 id="Docker环境下的安装"><a href="#Docker环境下的安装" class="headerlink" title="Docker环境下的安装"></a>Docker环境下的安装</h3><h4 id="Docker拉取Jenkins镜像"><a href="#Docker拉取Jenkins镜像" class="headerlink" title="Docker拉取Jenkins镜像"></a>Docker拉取Jenkins镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><h4 id="创建并运行Jenkins容器"><a href="#创建并运行Jenkins容器" class="headerlink" title="创建并运行Jenkins容器"></a>创建并运行Jenkins容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins \</span><br><span class="line">-p 8090:8080 -p 50000:5000 \</span><br><span class="line">-u root \</span><br><span class="line">-v /mydata/jenkins_home:/var/jenkins_home \</span><br><span class="line">-d jenkins/jenkins</span><br></pre></td></tr></table></figure><h3 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h3><h4 id="访问地址登录"><a href="#访问地址登录" class="headerlink" title="访问地址登录"></a>访问地址登录</h4><p>访问：<a href="http://ip:8090/">http://ip:8090/</a>  登录Jenkins</p><p>第一次登录需要输入管理员密码</p><p><img src="https://s2.loli.net/2022/07/31/2BWi4KlMGbZShoJ.png" alt="image-20220731210839012"></p><h4 id="从容器启动日志中获取管理密码"><a href="#从容器启动日志中获取管理密码" class="headerlink" title="从容器启动日志中获取管理密码"></a>从容器启动日志中获取管理密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs jenkins</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/31/EaN7eB5fJcOdytr.png" alt="image-20220731211050415"></p><h4 id="选择安装插件方式"><a href="#选择安装插件方式" class="headerlink" title="选择安装插件方式"></a>选择安装插件方式</h4><p><img src="https://s2.loli.net/2022/07/31/qvhQWOmyfEIapxj.png" alt="image-20220731211149198"></p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p><img src="https://s2.loli.net/2022/07/31/k4Tq1UyVX2wRzOD.png" alt="image-20220731211433814"></p><h4 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h4><p><img src="https://s2.loli.net/2022/07/31/KO3CWL7BrQmUedf.png" alt="image-20220731234318802"></p><h4 id="实例配置和URL"><a href="#实例配置和URL" class="headerlink" title="实例配置和URL"></a>实例配置和URL</h4><p><img src="https://s2.loli.net/2022/07/31/31ofj2SZpXdFRti.png" alt="image-20220731234553887"></p><h4 id="Jenkins首页"><a href="#Jenkins首页" class="headerlink" title="Jenkins首页"></a>Jenkins首页</h4><p><img src="https://s2.loli.net/2022/07/31/Ar8KLOsRhSPecnl.png" alt="image-20220731234720277"></p><h4 id="自定义插件安装"><a href="#自定义插件安装" class="headerlink" title="自定义插件安装"></a>自定义插件安装</h4><p><img src="https://s2.loli.net/2022/08/02/otOWaRM8INLqeK3.png" alt="image-20220802164924015"></p><h5 id="安装Docker构建插件"><a href="#安装Docker构建插件" class="headerlink" title="安装Docker构建插件"></a>安装Docker构建插件</h5><p><img src="https://s2.loli.net/2022/08/02/3VLnBNPZuizwfF2.png" alt="image-20220802223252918"></p><h5 id="安装角色管理插件"><a href="#安装角色管理插件" class="headerlink" title="安装角色管理插件"></a>安装角色管理插件</h5><p><img src="https://s2.loli.net/2022/08/02/MRckG5AvDF2p13f.png" alt="image-20220802223530182"></p><h5 id="安装SSH插件"><a href="#安装SSH插件" class="headerlink" title="安装SSH插件"></a>安装SSH插件</h5><p><img src="https://s2.loli.net/2022/08/02/4NUmuZdRkGtS6az.png" alt="image-20220802223821538"></p><h5 id="安装Email插件"><a href="#安装Email插件" class="headerlink" title="安装Email插件"></a>安装Email插件</h5><p><img src="https://s2.loli.net/2022/08/02/7gsDwSGOj9f6d8B.png" alt="image-20220802224256544"></p><h5 id="安装Maven项目打包插件"><a href="#安装Maven项目打包插件" class="headerlink" title="安装Maven项目打包插件"></a>安装Maven项目打包插件</h5><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220806214702640.png" alt="image-20220806214702640"></p><h4 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h4><h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p><img src="https://s2.loli.net/2022/08/03/LzaqCbgJ2EkQF15.png" alt="image-20220803093615629"></p><h5 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5><p><img src="https://s2.loli.net/2022/08/03/3FhdPVIKLjespvG.png" alt="image-20220803093953255"></p><h4 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h4><h5 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h5><p><img src="https://s2.loli.net/2022/08/02/NclUrxQKO3XFTCu.png" alt="image-20220802225402573"></p><h3 id="角色权限管理"><a href="#角色权限管理" class="headerlink" title="角色权限管理"></a>角色权限管理</h3><blockquote><p>通过Jenkins的角色管理插件来管理Jenkins的用户，比如我们可以给管理员赋予所有权限，运维人员赋予执行任务的相关权限，其他人员只赋予查看权限。</p></blockquote><h4 id="系统管理-gt-全局安全配置界面"><a href="#系统管理-gt-全局安全配置界面" class="headerlink" title="系统管理-&gt;全局安全配置界面"></a>系统管理-&gt;全局安全配置界面</h4><p><img src="https://s2.loli.net/2022/08/04/jMga8YrpFZRSqV6.png" alt="image-20220804131700882"></p><h4 id="启用基于角色的权限管理"><a href="#启用基于角色的权限管理" class="headerlink" title="启用基于角色的权限管理"></a>启用基于角色的权限管理</h4><p><img src="https://s2.loli.net/2022/08/04/YnThUx9impN2wkM.png" alt="image-20220804132005082"></p><h4 id="系统管理-gt-Manage-and-Assign-Roles界面"><a href="#系统管理-gt-Manage-and-Assign-Roles界面" class="headerlink" title="系统管理-&gt;Manage and Assign Roles界面"></a>系统管理-&gt;Manage and Assign Roles界面<img src="https://s2.loli.net/2022/08/04/M5XspnC1E4xIqot.png"></h4><p><img src="https://s2.loli.net/2022/08/04/M5XspnC1E4xIqot.png" alt="image-20220804132044412"></p><p><img src="https://s2.loli.net/2022/08/04/yqT5bEvWNrn4gsZ.png" alt="image-20220804132151926"></p><h5 id="添加角色和权限关系"><a href="#添加角色和权限关系" class="headerlink" title="添加角色和权限关系"></a>添加角色和权限关系</h5><p><img src="https://s2.loli.net/2022/08/04/oehJwEMbDNfymY3.png" alt="image-20220804132619633"></p><h5 id="给用户分配角色"><a href="#给用户分配角色" class="headerlink" title="给用户分配角色"></a>给用户分配角色</h5><p><img src="https://s2.loli.net/2022/08/04/3gb6j8x2wZ9VrXz.png" alt="image-20220804132806012"></p><h2 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h2><blockquote><p>GitLab 是一款使用MIT许可证的基于网络的Git仓库管理项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务。</p></blockquote><h3 id="GitLab服务端搭建"><a href="#GitLab服务端搭建" class="headerlink" title="GitLab服务端搭建"></a>GitLab服务端搭建</h3><h4 id="拉取Gitlab镜像"><a href="#拉取Gitlab镜像" class="headerlink" title="拉取Gitlab镜像"></a>拉取Gitlab镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h4 id="创建并运行Gitlab容器"><a href="#创建并运行Gitlab容器" class="headerlink" title="创建并运行Gitlab容器"></a>创建并运行Gitlab容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --publish 10443:443 --publish 1080:80 --publish 1022:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /mydata/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /mydata/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /mydata/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><blockquote><p>将Gitlab的Http服务运行在宿主机的1080端口上</p><p>将Gitlab的配置、日志以及数据目录映射到宿主机的指定文件夹下，防止重新创建容器后丢失数据</p></blockquote><p><img src="https://s2.loli.net/2022/08/04/b6KxIU5CkdH7TYa.png" alt="image-20220804173347200"></p><h4 id="开启防火墙的指定端口"><a href="#开启防火墙的指定端口" class="headerlink" title="开启防火墙的指定端口"></a>开启防火墙的指定端口</h4><h5 id="开启1080端口"><a href="#开启1080端口" class="headerlink" title="开启1080端口"></a>开启1080端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=1080/tcp --permanent </span><br></pre></td></tr></table></figure><h5 id="重启防火墙生效"><a href="#重启防火墙生效" class="headerlink" title="重启防火墙生效"></a>重启防火墙生效</h5><blockquote><p>只有重启防火墙，开发端口才生效</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h5 id="查看已经开发的端口"><a href="#查看已经开发的端口" class="headerlink" title="查看已经开发的端口"></a>查看已经开发的端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/04/k47zJwplcOEVnrW.png" alt="image-20220804222130047"></p><h4 id="访问Gitlab"><a href="#访问Gitlab" class="headerlink" title="访问Gitlab"></a>访问Gitlab</h4><h5 id="访问地址：http-xx-xxx-xxx-xxx-1080"><a href="#访问地址：http-xx-xxx-xxx-xxx-1080" class="headerlink" title="访问地址：http://xx.xxx.xxx.xxx:1080/"></a>访问地址：<a href="http://xx.xxx.xxx.xxx:1080/">http://xx.xxx.xxx.xxx:1080/</a></h5><p><img src="https://s2.loli.net/2022/08/04/V8o6qUN9Yt2nQED.png" alt="image-20220804223454356"></p><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs gitlab -f</span><br></pre></td></tr></table></figure><h5 id="初次重置root账号密码"><a href="#初次重置root账号密码" class="headerlink" title="初次重置root账号密码"></a>初次重置root账号密码</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"><span class="comment"># 进入控制台</span></span><br><span class="line">gitlab-rails console -e production</span><br><span class="line"><span class="comment"># 查询id为1的用户-超级管理员</span></span><br><span class="line">user = User.<span class="built_in">where</span>(<span class="built_in">id</span>:1).first</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">user.password=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment"># 保存密码</span></span><br><span class="line">user.save!</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p><img src="https://s2.loli.net/2022/08/04/tMEPjIaYfyGgwiB.png" alt="image-20220804225950579"></p><h5 id="选择创建项目、创建组织、创建账号"><a href="#选择创建项目、创建组织、创建账号" class="headerlink" title="选择创建项目、创建组织、创建账号"></a>选择创建项目、创建组织、创建账号</h5><p><img src="https://s2.loli.net/2022/08/06/5EmXiAa4xsIwhQy.png" alt="image-20220806195727566"></p><h5 id="创建组织"><a href="#创建组织" class="headerlink" title="创建组织"></a>创建组织</h5><p><img src="https://s2.loli.net/2022/08/06/l15FJx8Yj24cpGS.png" alt="image-20220806195930430"></p><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><h6 id="进入添加用户界面"><a href="#进入添加用户界面" class="headerlink" title="进入添加用户界面"></a>进入添加用户界面</h6><p><img src="https://s2.loli.net/2022/08/06/T36el2zKFfQ8RAw.png" alt="image-20220806200319437"></p><p><img src="https://s2.loli.net/2022/08/06/wQpRblBvsak9VYH.png" alt="image-20220806200424138"></p><h6 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h6><p><img src="https://s2.loli.net/2022/08/06/bgiZIhT8GvceSKH.png" alt="image-20220806200739851"></p><h6 id="编辑页面中修改用户密码"><a href="#编辑页面中修改用户密码" class="headerlink" title="编辑页面中修改用户密码"></a>编辑页面中修改用户密码</h6><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/08/06/85wkLZfnMXoljC4.png" alt="image-20220806200950920"></h6><p><img src="https://s2.loli.net/2022/08/06/2VJk1jPlW8EivAo.png" alt="image-20220806201032717"></p><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p><img src="https://s2.loli.net/2022/08/06/2B9VUzFDuri6Mj5.png" alt="image-20220806201200515"></p><p><img src="https://s2.loli.net/2022/08/06/KYG1MAyzTZ3QnJL.png" alt="image-20220806201145180"></p><p><img src="https://s2.loli.net/2022/08/06/6chXSEmjrqFxK9y.png" alt="image-20220806201253761"></p><h5 id="将用户分配组织"><a href="#将用户分配组织" class="headerlink" title="将用户分配组织"></a>将用户分配组织</h5><p><img src="https://s2.loli.net/2022/08/06/9Wino6RGZ2Ml7Xr.png" alt="image-20220806201620424"></p><h5 id="本地推送"><a href="#本地推送" class="headerlink" title="本地推送"></a>本地推送</h5><h6 id="克隆url"><a href="#克隆url" class="headerlink" title="克隆url"></a>克隆url</h6><p><img src="https://s2.loli.net/2022/08/06/WFu8TM5zDsRmc2U.png" alt="image-20220806202639878"></p><h6 id="IDEA绑定远程"><a href="#IDEA绑定远程" class="headerlink" title="IDEA绑定远程"></a>IDEA绑定远程</h6><p><img src="https://s2.loli.net/2022/08/06/XkU2nmvu5jLT7QN.png" alt="image-20220806202939887"></p><p><img src="https://s2.loli.net/2022/08/06/pthyoQqRWzs35Mm.png" alt="image-20220806202955038"></p><h6 id="输入用户名和密码"><a href="#输入用户名和密码" class="headerlink" title="输入用户名和密码"></a>输入用户名和密码</h6><p><img src="https://s2.loli.net/2022/08/06/u5kGnR9EBrMbl7I.png" alt="image-20220806202920027"></p><h6 id="推送本地仓库"><a href="#推送本地仓库" class="headerlink" title="推送本地仓库"></a>推送本地仓库</h6><p><img src="https://s2.loli.net/2022/08/06/5d9TvSKjyPBYMqI.png" alt="image-20220806203101897"></p><h6 id="推送远端仓库"><a href="#推送远端仓库" class="headerlink" title="推送远端仓库"></a>推送远端仓库</h6><p><img src="https://s2.loli.net/2022/08/06/RPLcoQCfJ9x41Ur.png" alt="image-20220806203815604"></p><h6 id="推送成功"><a href="#推送成功" class="headerlink" title="推送成功"></a>推送成功</h6><p><img src="https://s2.loli.net/2022/08/06/kxfl2T73YRFurKz.png" alt="image-20220806204147005"></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><h5 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h5 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d  \</span><br><span class="line">-v /mydata/mysql/log:/logs \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><h5 id="进入运行MySQL的docker容器"><a href="#进入运行MySQL的docker容器" class="headerlink" title="进入运行MySQL的docker容器"></a>进入运行MySQL的docker容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><h5 id="使用MySQL命令打开客户端"><a href="#使用MySQL命令打开客户端" class="headerlink" title="使用MySQL命令打开客户端"></a>使用MySQL命令打开客户端</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot --default-character-set=utf8</span><br></pre></td></tr></table></figure><h5 id="创建一个reader-123456帐号并修改权限"><a href="#创建一个reader-123456帐号并修改权限" class="headerlink" title="创建一个reader:123456帐号并修改权限"></a>创建一个<code>reader:123456</code>帐号并修改权限</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;reader&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* to &#x27;reader&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><h5 id="拉取Redis镜像"><a href="#拉取Redis镜像" class="headerlink" title="拉取Redis镜像"></a>拉取Redis镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h5 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure><h5 id="进入运行Redis的docker容器"><a href="#进入运行Redis的docker容器" class="headerlink" title="进入运行Redis的docker容器"></a>进入运行Redis的docker容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure><h4 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h4><h5 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h5 id="运行容器拷贝配置文件"><a href="#运行容器拷贝配置文件" class="headerlink" title="运行容器拷贝配置文件"></a>运行容器拷贝配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h5 id="将容器内的配置文件拷贝到指定目录"><a href="#将容器内的配置文件拷贝到指定目录" class="headerlink" title="将容器内的配置文件拷贝到指定目录"></a>将容器内的配置文件拷贝到指定目录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container cp nginx:/etc/nginx /mydata/nginx/</span><br></pre></td></tr></table></figure><h5 id="修改文件名称"><a href="#修改文件名称" class="headerlink" title="修改文件名称"></a>修改文件名称</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mydata/nginx</span><br><span class="line">mv nginx conf</span><br></pre></td></tr></table></figure><h5 id="终止并删除容器"><a href="#终止并删除容器" class="headerlink" title="终止并删除容器"></a>终止并删除容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker rm nginx</span><br></pre></td></tr></table></figure><h5 id="启动Nginx服务"><a href="#启动Nginx服务" class="headerlink" title="启动Nginx服务"></a>启动Nginx服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h3 id="准备执行脚本"><a href="#准备执行脚本" class="headerlink" title="准备执行脚本"></a>准备执行脚本</h3><blockquote><p>脚本文件存放在项目的/document/sh目录下</p></blockquote><h4 id="修改脚本文件的换行符格式为LF"><a href="#修改脚本文件的换行符格式为LF" class="headerlink" title="修改脚本文件的换行符格式为LF"></a>修改脚本文件的换行符格式为LF</h4><p><img src="https://s2.loli.net/2022/08/07/QE3xNC9LiadmS2g.png"></p><h4 id="上传脚本文件至指定目录"><a href="#上传脚本文件至指定目录" class="headerlink" title="上传脚本文件至指定目录"></a>上传脚本文件至指定目录</h4><blockquote><p>将所有的脚本文件上传至/mydata/sh目录下</p></blockquote><p><img src="https://s2.loli.net/2022/08/07/RkQwzPKvGDdAOJm.png" alt="image-20220807022412347"></p><h4 id="所有的脚本文件修改为可执行文件"><a href="#所有的脚本文件修改为可执行文件" class="headerlink" title="所有的脚本文件修改为可执行文件"></a>所有的脚本文件修改为可执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./demo-admin.sh</span><br></pre></td></tr></table></figure><h3 id="创建执行任务"><a href="#创建执行任务" class="headerlink" title="创建执行任务"></a>创建执行任务</h3><h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><p><img src="https://s2.loli.net/2022/08/06/EyJiIrb9etWCS8u.png" alt="image-20220806230804597"></p><h4 id="选择构建软件项目"><a href="#选择构建软件项目" class="headerlink" title="选择构建软件项目"></a>选择构建软件项目</h4><p><img src="https://s2.loli.net/2022/08/06/LBXbq8oU6KHwzmc.png" alt="image-20220806230836921"></p><h4 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h4><h5 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h5><p><img src="https://s2.loli.net/2022/08/06/I2ZreOU43o8FyRk.png" alt="image-20220806231912987"></p><h5 id="添加凭证"><a href="#添加凭证" class="headerlink" title="添加凭证"></a>添加凭证</h5><p><img src="https://s2.loli.net/2022/08/06/7j2vk9STgsd3aUi.png" alt="image-20220806232043170"></p><h5 id="选择凭证"><a href="#选择凭证" class="headerlink" title="选择凭证"></a>选择凭证</h5><p><img src="https://s2.loli.net/2022/08/06/oduhxkfWvNsHPCS.png" alt="image-20220806232110904"></p><h5 id="添加调用顶层maven目标的构建"><a href="#添加调用顶层maven目标的构建" class="headerlink" title="添加调用顶层maven目标的构建"></a>添加调用顶层maven目标的构建</h5><blockquote><p>用于把源码打包成Docker镜像并上传到Docker镜像仓库    </p></blockquote><p>先构建项目的依赖模块，否则当构建可运行的服务模块时会因为无法找到这些模块而构建失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean install -pl demo-common</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/07/o7CwriaUMdmFy2e.png" alt="image-20220807024029026"></p><p><img src="https://s2.loli.net/2022/08/07/its6yEFB5omnjzQ.png" alt="image-20220807024157644"></p><h5 id="添加一个执行远程shell脚本的构建"><a href="#添加一个执行远程shell脚本的构建" class="headerlink" title="添加一个执行远程shell脚本的构建"></a>添加一个执行远程shell脚本的构建</h5><blockquote><p>用于在镜像打包完成后执行启动Docker容器的.sh脚本</p></blockquote><p><img src="https://s2.loli.net/2022/08/07/kBNtoK2dSyzbQZx.png" alt="image-20220807024249753"></p><h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><p><img src="https://s2.loli.net/2022/08/07/saTQqZlxyfzLrXY.png" alt="image-20220807224609871"></p><h5 id="运行成功访问-Swagger-API文档"><a href="#运行成功访问-Swagger-API文档" class="headerlink" title="运行成功访问 Swagger API文档"></a>运行成功访问 Swagger API文档</h5><p><img src="https://s2.loli.net/2022/08/07/nGKs5OlYM6JickB.png" alt="image-20220807224823488"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jenkins&quot;&gt;&lt;a href=&quot;#Jenkins&quot; class=&quot;headerlink&quot; title=&quot;Jenkins&quot;&gt;&lt;/a&gt;Jenkins&lt;/h1&gt;&lt;h2 id=&quot;Jenkins简介&quot;&gt;&lt;a href=&quot;#Jenkins简介&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Jenkins" scheme="http://example.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba（三） Seata</title>
    <link href="http://example.com/2022/07/24/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%89%EF%BC%89Seata/"/>
    <id>http://example.com/2022/07/24/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%89%EF%BC%89Seata/</id>
    <published>2022-07-24T12:35:22.000Z</published>
    <updated>2022-08-08T14:49:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba（三）Seata"><a href="#Spring-Cloud-Alibaba（三）Seata" class="headerlink" title="Spring Cloud Alibaba（三）Seata"></a>Spring Cloud Alibaba（三）Seata</h1><blockquote><p>Seate是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><p>Seata将为用户提供了AT、TCC、SAGA和XA事务模型，为用户打造一站式的分布式解决方案。    </p></blockquote><p><img src="https://s2.loli.net/2022/07/25/F4Y3lbW6nKVSiRx.png" alt="img"></p><h2 id="项目场景搭建"><a href="#项目场景搭建" class="headerlink" title="项目场景搭建"></a>项目场景搭建</h2><h3 id="逻辑约定"><a href="#逻辑约定" class="headerlink" title="逻辑约定"></a>逻辑约定</h3><blockquote><p>图书借阅流程：调用图书服务书籍数量减1-&gt;添加借阅记录-&gt;调用用户服务可借阅数减1</p><p>约束：每个用户最多同时借阅2本不用的书，图书馆中的所有书都有且仅有3本</p></blockquote><h3 id="数据库修改"><a href="#数据库修改" class="headerlink" title="数据库修改"></a>数据库修改</h3><h4 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h4><p>添加字段book_count记录用户可借阅书籍数量</p><p><img src="https://s2.loli.net/2022/07/25/GwQxjFXoKHWsvtd.png" alt="image-20220725104408740"></p><h4 id="书籍表"><a href="#书籍表" class="headerlink" title="书籍表"></a>书籍表</h4><p>添加字段count记录书籍剩余数量</p><p><img src="https://s2.loli.net/2022/07/25/Ser7pQMnhFjltcK.png" alt="image-20220725104307273"></p><h3 id="服务修改"><a href="#服务修改" class="headerlink" title="服务修改"></a>服务修改</h3><h4 id="borrow-service"><a href="#borrow-service" class="headerlink" title="borrow-service"></a>borrow-service</h4><h5 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h5><h6 id="BorrowMapper-java"><a href="#BorrowMapper-java" class="headerlink" title="BorrowMapper.java"></a>BorrowMapper.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BorrowMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询借阅列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Borrow&gt; <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增借阅记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BorrowMapper-xml"><a href="#BorrowMapper-xml" class="headerlink" title="BorrowMapper.xml"></a>BorrowMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.dao.BorrowMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBorrow&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Borrow&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM borrow_info</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uid != null&quot;</span>&gt;</span> uid = #&#123;uid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bid != null&quot;</span>&gt;</span> and bid = #&#123;bid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBorrow&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.test.entity.Borrow&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO borrow_info (id, uid, bid)</span><br><span class="line">        VALUES (null, #&#123;uid&#125;, #&#123;bid&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><h6 id="BorrowService-java"><a href="#BorrowService-java" class="headerlink" title="BorrowService.java"></a>BorrowService.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span>;</span><br><span class="line"></span><br><span class="line">    BookBorrowDetail <span class="title function_">getBorrowByBook</span><span class="params">(Long bid)</span>;</span><br><span class="line"></span><br><span class="line">    BorrowDetail <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">borrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BorrowServiceImpl-java"><a href="#BorrowServiceImpl-java" class="headerlink" title="BorrowServiceImpl.java"></a>BorrowServiceImpl.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;AliControlFlowStatementWithoutBraces&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowMapper borrowMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">borrow</span><span class="params">(Long uid, Long bid)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询用户余量</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(uid);</span><br><span class="line">        log.info(<span class="string">&quot;&quot;</span> + user);</span><br><span class="line">        <span class="keyword">if</span> (user.getCount() &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户借阅数达到上限&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询图书余量</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(bid);</span><br><span class="line">        <span class="keyword">if</span> (book.getCount() &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;图书数量不足&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用图书服务：图书数量减1</span></span><br><span class="line">        <span class="keyword">if</span> (!bookService.borrow(bid)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;调用图书服务出错&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用借阅服务：先查后插</span></span><br><span class="line">        <span class="keyword">if</span> (!borrowMapper.getBorrow(uid, bid).isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户已经借阅过此书&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (borrowMapper.addBorrow(uid, bid) &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;借阅信息添加失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用用户服务：可借阅数减1</span></span><br><span class="line">        <span class="keyword">if</span> (!userService.borrow(bid)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;调用用户服务出错&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h5><h6 id="BorrowController-java"><a href="#BorrowController-java" class="headerlink" title="BorrowController.java"></a>BorrowController.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;UserController&quot;, description = &quot;用户信息管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;图书借阅&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/&#123;uid&#125;/&#123;bid&#125;&quot;, produces = &quot;application/json;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">borrow</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span> <span class="meta">@ApiParam(&quot;用户id&quot;)</span> Long uid,</span></span><br><span class="line"><span class="params">                             <span class="meta">@PathVariable(&quot;bid&quot;)</span> <span class="meta">@ApiParam(&quot;图书id&quot;)</span> Long bid)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加借阅信息</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> borrowService.borrow(uid, bid);</span><br><span class="line">        <span class="comment">// 创建JSON对象并返回</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            jsonObject.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">            jsonObject.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            jsonObject.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;借阅成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        jsonObject.put(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;借阅失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h2><h3 id="XA-2PC"><a href="#XA-2PC" class="headerlink" title="XA-2PC"></a>XA-2PC</h3><blockquote><p>XA是一种典型的两阶段提交（2PC，Two-phase commit protocal）</p><p>两阶段提交协议 ，它分为两个阶段，一个是准备一个是提交。</p><p>整个过程的参与者一共有两个角色，一个是事务的执行者，一个是事务的协调者，实际上整个分布式事务的运作都需要依靠协调者来维持。</p></blockquote><p>为了实现二阶段提交算法的成立基于以下假设：</p><ul><li>该分布式系统中，存在一个节点作为协调者（Coordinator），其他节点作为参与者（Cohorts），节点之间可以进行网络通信</li><li>所有节点都采用预写式日志，且日志被写入后即保持在可靠的存储设备上，即使损坏不会导致日志数据的消失</li><li>所有节点不会永久性损坏，即使损坏后仍然可以恢复</li></ul><h4 id="第一阶段（投票阶段）"><a href="#第一阶段（投票阶段）" class="headerlink" title="第一阶段（投票阶段）"></a>第一阶段（投票阶段）</h4><p>1、协调者节点向所有参与者节点询问是否可以执行提交操作（vote），并开始等待各参与者节点的响应</p><p>2、参与者节点执行询问发起为止的所有事务操作，并将Undo信息和Redo信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）</p><p>3、各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个“同意”消息；如果参与者节点的事务操作失败实际执行失败，则它返回一个“中止”消息</p><h4 id="第二阶段（提交执行阶段）"><a href="#第二阶段（提交执行阶段）" class="headerlink" title="第二阶段（提交执行阶段）"></a>第二阶段（提交执行阶段）</h4><p>当协调者节点从所有参与者节点获得响应消息都为“同意”时：</p><ol><li>协调者节点向所有参与者节点发出”正式提交(commit)”的请求。</li><li>参与者节点正式完成操作，并释放在整个事务期间内占用的资源。</li><li>参与者节点向协调者节点发送”完成”消息。</li><li>协调者节点受到所有参与者节点反馈的”完成”消息后，完成事务。</li></ol><p>如果任一参与者节点在第一阶段返回的响应消息为”中止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：</p><ol><li>协调者节点向所有参与者节点发出”回滚操作(rollback)”的请求。</li><li>参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</li><li>参与者节点向协调者节点发送”回滚完成”消息。</li><li>协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。</li></ol><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><h3 id="TTC"><a href="#TTC" class="headerlink" title="TTC"></a>TTC</h3><h3 id="SAGA"><a href="#SAGA" class="headerlink" title="SAGA"></a>SAGA</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Alibaba（三）Seata&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba（三）Seata&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba（三）Seata&quot;&gt;&lt;/a&gt;Sp</summary>
      
    
    
    
    
    <category term="Spring Cloud Alibaba" scheme="http://example.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="http://example.com/2022/07/01/MyBatis-Plus/"/>
    <id>http://example.com/2022/07/01/MyBatis-Plus/</id>
    <published>2022-07-01T00:30:56.000Z</published>
    <updated>2022-07-05T13:54:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MyBatis-Plus（简称 MP）是一个MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><ul><li>官网：<a href="https://baomidou.com/">https://baomidou.com/</a></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="基于SpringBoot使用MyBatisPlus"><a href="#基于SpringBoot使用MyBatisPlus" class="headerlink" title="基于SpringBoot使用MyBatisPlus"></a>基于SpringBoot使用MyBatisPlus</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p><img src="https://s2.loli.net/2022/07/04/VlYCpIkfAzgH3wu.png" alt="image-20220704195430412"></p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><img src="https://s2.loli.net/2022/07/03/IbSVdrEvmGskcR8.png" alt="image-20220703221600684"></p><p><img src="https://s2.loli.net/2022/07/03/nxTRcVYSGKyzojF.png" alt="image-20220703221718341"></p><p><img src="https://s2.loli.net/2022/07/03/mGOnHF9SVepd7wc.png" alt="image-20220703221735710"></p><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220703221754550.png" alt="image-20220703221754550"></p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><img src="https://s2.loli.net/2022/07/04/WNrlHYELyPmvM89.png" alt="image-20220704194517877"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><p><img src="https://s2.loli.net/2022/07/04/n1XYzKqtGIxOwTE.png" alt="image-20220704194831358"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: 13851176590++</span><br></pre></td></tr></table></figure><h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><p><img src="https://s2.loli.net/2022/07/04/nNHxoRC62AKiP1X.png" alt="image-20220704201230606"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyBatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p><img src="https://s2.loli.net/2022/07/04/xZJjp12CBfMNdO5.png" alt="image-20220704195648242"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Dao接口"><a href="#创建Dao接口" class="headerlink" title="创建Dao接口"></a>创建Dao接口</h3><p><img src="https://s2.loli.net/2022/07/04/aTIiVPgX5UFDtQe.png" alt="image-20220704195842852"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><p><img src="https://s2.loli.net/2022/07/04/K7SR9CkpzJMLx83.png" alt="image-20220704201317232"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusApplicationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyBatisPlusApplicationTest.class);</span><br><span class="line">    <span class="comment">// 查询列表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;用户列表：&quot;</span> + users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化日志输出"><a href="#简化日志输出" class="headerlink" title="简化日志输出"></a>简化日志输出</h3><h3 id="新建logback-xml配置文件"><a href="#新建logback-xml配置文件" class="headerlink" title="新建logback.xml配置文件"></a>新建logback.xml配置文件</h3><p><img src="https://s2.loli.net/2022/07/04/g9joR5d32ipSMfu.png" alt="image-20220704210131509"></p><h3 id="编辑配置-1"><a href="#编辑配置-1" class="headerlink" title="编辑配置"></a>编辑配置</h3><p><img src="https://s2.loli.net/2022/07/04/webUG67Zi1frnXu.png" alt="image-20220704210209383"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关闭Banner"><a href="#关闭Banner" class="headerlink" title="关闭Banner"></a>关闭Banner</h3><p><img src="https://s2.loli.net/2022/07/04/yESZHwJNGojrAvP.png" alt="image-20220704210523918"></p><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><img src="https://s2.loli.net/2022/07/04/T2s6JyKiP3NGrvA.png" alt="image-20220704201439508"></p><h2 id="标准数据层开发"><a href="#标准数据层开发" class="headerlink" title="标准数据层开发"></a>标准数据层开发</h2><p><img src="https://s2.loli.net/2022/07/04/WiwxaTBCVAgXKpk.png" alt="image-20220704202159031"></p><h3 id="新增操作"><a href="#新增操作" class="headerlink" title="新增操作"></a>新增操作</h3><p><img src="https://s2.loli.net/2022/07/04/ObWy1VauPNn6Xq4.png" alt="image-20220704202540481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>().setName(<span class="string">&quot;xiaohong&quot;</span>).setAge(<span class="number">21</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setTel(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/L4m8MXiF61YOjnE.png" alt="image-20220704202602872"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p><img src="https://s2.loli.net/2022/07/04/gfOkiT3swq4VuCc.png" alt="image-20220704202734472"></p><p><img src="https://s2.loli.net/2022/07/04/xcamHV8PCr1bNF6.png" alt="image-20220704202937068"></p><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><p><img src="https://s2.loli.net/2022/07/04/BfHdWkt7qgc1lPT.png" alt="image-20220704203046171"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>().setId(<span class="number">1L</span>).setAge(<span class="number">50</span>);</span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/Xr2EgxCIiRbKSGU.png" alt="image-20220704203202535"></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><h4 id="配置分页拦截器"><a href="#配置分页拦截器" class="headerlink" title="配置分页拦截器"></a>配置分页拦截器</h4><p><img src="https://s2.loli.net/2022/07/04/RKXDzwpqsF95f1B.png" alt="image-20220704204825107"></p><h4 id="编辑测试类"><a href="#编辑测试类" class="headerlink" title="编辑测试类"></a>编辑测试类</h4><p><img src="https://s2.loli.net/2022/07/04/iEoGZmYV9SxWPDB.png" alt="image-20220704203919463"></p><p><img src="https://s2.loli.net/2022/07/04/IybNWstEjixXU2B.png" alt="image-20220704204928225"></p><h3 id="添加日志输出"><a href="#添加日志输出" class="headerlink" title="添加日志输出"></a>添加日志输出</h3><p><img src="https://s2.loli.net/2022/07/04/NH62nAzhuaQF45L.png" alt="image-20220704205216716"></p><p><img src="https://s2.loli.net/2022/07/04/lTjzZktCs3cogQv.png" alt="image-20220704205339781"></p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="查看Wrapper抽象类"><a href="#查看Wrapper抽象类" class="headerlink" title="查看Wrapper抽象类"></a>查看Wrapper抽象类</h4><p><img src="https://s2.loli.net/2022/07/04/OSJUMWFP6Bqcys5.png" alt="image-20220704210847732"></p><p><img src="https://s2.loli.net/2022/07/04/CtLXeD4TWjhYOd5.png" alt="image-20220704213548048"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">// 方法一：常规格式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        queryWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).lt(<span class="string">&quot;age&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法二：lambda格式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByQueryWrapperForLambda</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        queryWrapper.lambda().gt(User::getAge, <span class="number">20</span>).lt(User::getAge, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法三：lambda</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        <span class="comment">// 条件：age &gt; 20 and age &lt; 40</span></span><br><span class="line">        lambdaQueryWrapper.gt(User::getAge, <span class="number">20</span>).lt(User::getAge, <span class="number">40</span>);</span><br><span class="line">        <span class="comment">// 条件: age &lt; 20 or age &gt; 40</span></span><br><span class="line"><span class="comment">//        lambdaQueryWrapper.gt(User::getAge, 40).or().lt(User::getAge, 20);</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/uz7eTqv5EBdWP18.png" alt="image-20220704213630003"></p><h3 id="空值判定"><a href="#空值判定" class="headerlink" title="空值判定"></a>空值判定</h3><h4 id="新建用户查询条件类"><a href="#新建用户查询条件类" class="headerlink" title="新建用户查询条件类"></a>新建用户查询条件类</h4><p><img src="https://s2.loli.net/2022/07/04/nkEQNXK3FyjUCRJ.png" alt="image-20220704214625224"></p><h4 id="空值测试"><a href="#空值测试" class="headerlink" title="空值测试"></a>空值测试</h4><p><img src="https://s2.loli.net/2022/07/04/8dep1DPFxrmGWMy.png" alt="image-20220704215213584"></p><p><img src="https://s2.loli.net/2022/07/04/N5BaEh83bZP419D.png" alt="image-20220704215230612"></p><h4 id="空值判定方法"><a href="#空值判定方法" class="headerlink" title="空值判定方法"></a>空值判定方法</h4><h5 id="方法一：if条件语句控制"><a href="#方法一：if条件语句控制" class="headerlink" title="方法一：if条件语句控制"></a>方法一：if条件语句控制</h5><p><img src="https://s2.loli.net/2022/07/04/DlBUVuJ8HvCy174.png" alt="image-20220704220102139"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">![image-<span class="number">20220704220336783</span>](C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-<span class="number">20220704220336783.</span>png)    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByIfNull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">        userQuery.setLowerAge(<span class="number">20</span>).setUpperAge(<span class="number">40</span>);</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        <span class="keyword">if</span> (userQuery.getLowerAge() != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.gt(User::getAge, userQuery.getLowerAge());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userQuery.getUpperAge()![image-<span class="number">20220704220336783</span>](C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-<span class="number">20220704220336783.</span>png) != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.lt(User::getAge, userQuery.getUpperAge());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="方法二：条件参数控制"><a href="#方法二：条件参数控制" class="headerlink" title="方法二：条件参数控制"></a>方法二：条件参数控制</h5><p><img src="https://s2.loli.net/2022/07/04/fPRTK49H3zQ6ivN.png" alt="image-20220704220338824"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">    userQuery.setLowerAge(<span class="number">20</span>).setUpperAge(<span class="number">40</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.gt(userQuery.getLowerAge() !=<span class="literal">null</span>, User::getAge, userQuery.getLowerAge())</span><br><span class="line">            .lt(userQuery.getUpperAge() != <span class="literal">null</span>, User::getAge, userQuery.getUpperAge());</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h3><h4 id="情况一：LambdaQueryWrapper"><a href="#情况一：LambdaQueryWrapper" class="headerlink" title="情况一：LambdaQueryWrapper"></a>情况一：LambdaQueryWrapper</h4><p><img src="https://s2.loli.net/2022/07/04/8qbWkxlPuX9Iymt.png" alt="image-20220704223005342"></p><h4 id="情况二：QueryWrapper"><a href="#情况二：QueryWrapper" class="headerlink" title="情况二：QueryWrapper"></a>情况二：QueryWrapper</h4><p><img src="https://s2.loli.net/2022/07/04/louSRdXyOmbzP3K.png" alt="image-20220704223342994"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://s2.loli.net/2022/07/04/fTQmj3rYMwJekhF.png" alt="image-20220704223443857"></p><p><img src="https://s2.loli.net/2022/07/04/vq9ChcgLHtP4jXE.png" alt="image-20220704224013893"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计映射</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">// 统计</span></span><br><span class="line">    queryWrapper.select(<span class="string">&quot;count(*) as total&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">// 分组</span></span><br><span class="line">    queryWrapper.groupBy(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; map = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/muenaT4qJSXiglC.png" alt="image-20220704224108616"></p><h3 id="查询条件设置"><a href="#查询条件设置" class="headerlink" title="查询条件设置"></a>查询条件设置</h3><blockquote><p>API查询地址：<a href="https://baomidou.com/pages/10c804/#nested">https://baomidou.com/pages/10c804/#nested</a></p></blockquote><h4 id="等值查询"><a href="#等值查询" class="headerlink" title="等值查询"></a>等值查询</h4><p><img src="https://s2.loli.net/2022/07/05/A4HdYjKVQlfoWmL.png" alt="image-20220705143514861"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录验证</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 等值设置</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.eq(User::getName, <span class="string">&quot;xiaomi&quot;</span>).eq(User::getPassword, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(lambdaQueryWrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/WzVSnBEOF4iLfR2.png" alt="image-20220705143605575"></p><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><p><img src="https://s2.loli.net/2022/07/05/z6NPrpcSVRQ5g3G.png" alt="image-20220705144336093"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 范围查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">between</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.between(User::getAge, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    users.forEach(user -&gt; &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/es7DbcGPHTV91Ng.png" alt="image-20220705144401989"></p><h4 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h4><p><img src="https://s2.loli.net/2022/07/05/iLc9gv7Wwz6jRXB.png" alt="image-20220705150836409"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 模糊匹配</span><br><span class="line">@Test</span><br><span class="line">void like() &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.like(User::getName, &quot;xiao&quot;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/mjPoTyDbBru6f8J.png" alt="image-20220705150855577"></p><h3 id="映射匹配"><a href="#映射匹配" class="headerlink" title="映射匹配"></a>映射匹配</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><img src="https://s2.loli.net/2022/07/05/WCPMvJeKpEqwXbm.png" alt="image-20220705161614345"></p><h4 id="实体类映射"><a href="#实体类映射" class="headerlink" title="实体类映射"></a>实体类映射</h4><p><img src="https://s2.loli.net/2022/07/05/IpW5PfzvLd3yJit.png" alt="image-20220705153154091"></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p><img src="https://s2.loli.net/2022/07/05/83eSRXGUdr47OPC.png" alt="image-20220705153059547"></p><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><h4 id="id生成策略控制"><a href="#id生成策略控制" class="headerlink" title="id生成策略控制"></a>id生成策略控制</h4><h5 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h5><p><img src="https://s2.loli.net/2022/07/05/whrVJzOZ9PjQX32.png" alt="image-20220705153402857"></p><p><img src="https://s2.loli.net/2022/07/05/2d1gYXCO4ieHKyr.png" alt="image-20220705162607843"></p><h5 id="TableId-注释"><a href="#TableId-注释" class="headerlink" title="@TableId()注释"></a>@TableId()注释</h5><p><img src="https://s2.loli.net/2022/07/05/DBLzAexgcXUFOJr.png" alt="image-20220705162205585"></p><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><p><img src="https://s2.loli.net/2022/07/05/cgwSDZmkHB7p8UF.png" alt="image-20220705162417709"></p><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><p><img src="https://s2.loli.net/2022/07/05/BAChWpUK2GSYOvw.png" alt="image-20220705163327730"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment"># MybatisPlus日志输出</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span>  <span class="comment"># 关闭MybatisPlus的banner</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span> <span class="comment"># id生成算法全局配置</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">ums_</span> <span class="comment"># 表名前缀</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/BqRU3z8GOaibAD9.png" alt="image-20220705163517590"></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p><img src="https://s2.loli.net/2022/07/05/Ccr8Gd1kY9Ighil.png" alt="image-20220705164213057"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">batchDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 数组转List</span></span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">1544234982638149633L</span>, <span class="number">1544235553495506945L</span>&#125;);</span><br><span class="line">    <span class="comment">// 批量删除</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/xj8K5t3P7i1ygvc.png" alt="image-20220705164313573"></p><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><h5 id="数据库添加逻辑删除字段"><a href="#数据库添加逻辑删除字段" class="headerlink" title="数据库添加逻辑删除字段"></a>数据库添加逻辑删除字段</h5><p><img src="https://s2.loli.net/2022/07/05/rcDVjAvUZdJy9gT.png" alt="image-20220705164959329"></p><h5 id="实体类添加字段并设定逻辑删除标记字段"><a href="#实体类添加字段并设定逻辑删除标记字段" class="headerlink" title="实体类添加字段并设定逻辑删除标记字段"></a>实体类添加字段并设定逻辑删除标记字段</h5><p><img src="https://s2.loli.net/2022/07/05/FbgmX5f2xr1Lypv.png" alt="image-20220705165955206"></p><h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><p><img src="https://s2.loli.net/2022/07/05/bSvn3OKD7qirkcE.png" alt="image-20220705165752771"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByLogic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/oka1gPs5QYwj7y3.png" alt="image-20220705170207379"></p><p><img src="https://s2.loli.net/2022/07/05/zf4xI1H3yVTQarn.png" alt="image-20220705170231137"></p><p><img src="https://s2.loli.net/2022/07/05/W6FEfJpzAuXLYoh.png" alt="image-20220705170936129"></p><p><img src="https://s2.loli.net/2022/07/05/56EolZ7DBLyRWiN.png" alt="image-20220705170909635"></p><h5 id="全局配置-1"><a href="#全局配置-1" class="headerlink" title="全局配置"></a>全局配置</h5><p><img src="https://s2.loli.net/2022/07/05/OicB8YvU3Cb6XRe.png" alt="image-20220705170536943"></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><blockquote><p>当更新一条记录时，希望这条记录没有被别人更新</p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时，set version = newVersion where version = oldVersion </li><li>如果version不对，更新失败</li></ul><h5 id="数据库添加字段"><a href="#数据库添加字段" class="headerlink" title="数据库添加字段"></a>数据库添加字段</h5><p><img src="https://s2.loli.net/2022/07/05/ENG2Kzlu1fRI5vb.png" alt="image-20220705173918160"></p><h5 id="实体类添加字段"><a href="#实体类添加字段" class="headerlink" title="实体类添加字段"></a>实体类添加字段</h5><p><img src="https://s2.loli.net/2022/07/05/ODw1Xk7B35MVc2z.png" alt="image-20220705174101440"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span><span class="comment">/*对象链式赋值*/</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="comment">//@TableName(&quot;ums_user&quot;)/*表名映射*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//    @TableId(type = IdType.ASSIGN_ID)/*id生成策略*/</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;pwd&quot;, select = false)</span><span class="comment">/*表名映射*/</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;is_delete&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;<span class="comment">/*乐观锁Version*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h5><p><img src="https://s2.loli.net/2022/07/05/GVY9r2ilmWX1MSL.png" alt="image-20220705174204504"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatisPlus配置类</span></span><br><span class="line"><span class="comment"> * Created by YuanJW on 2022/7/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定义MyBatisPlus拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加乐观锁拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h5><p><img src="https://s2.loli.net/2022/07/05/EMJO9BXxTzNf3aZ.png" alt="image-20220705175322928"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乐观锁</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>().setId(<span class="number">3L</span>).setName(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">            .setVersion(<span class="number">1</span>); <span class="comment">// setVersion()开启锁机制</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/5kiRXcB7jhpKYDr.png" alt="image-20220705175127188"></p><h5 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h5><p><img src="https://s2.loli.net/2022/07/05/qBsbxmpDEkZOMiz.png" alt="image-20220705180306328"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并发测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateByConcurrency</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.selectById(<span class="number">3L</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">3L</span>);</span><br><span class="line">    user1.setName(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count1</span> <span class="operator">=</span> userMapper.updateById(user1);</span><br><span class="line">    user2.setName(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count2</span> <span class="operator">=</span> userMapper.updateById(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/tGpS3bOjHLc1NrQ.png" alt="image-20220705180403752"></p><p><img src="https://s2.loli.net/2022/07/05/kz6JydZq7DF8cLT.png" alt="image-20220705180423160"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><img src="https://s2.loli.net/2022/07/05/g8SZmydK2lGXM1H.png" alt="image-20220705211930870"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MP代码生成器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- velocity模板引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加代码自动生成器类"><a href="#添加代码自动生成器类" class="headerlink" title="添加代码自动生成器类"></a>添加代码自动生成器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码自动生成器</span></span><br><span class="line"><span class="comment"> * Created by YuanJW on 2022/7/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代码生成器对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSourceConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;13851176590++&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">        <span class="comment">// 设置全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setOutputDir(<span class="string">&quot;D:\\Users\\YuanJW\\Desktop\\Java Learn\\MyBatis-Plus\\MyBatisPlusGenerator\\src\\main\\java&quot;</span>)  <span class="comment">//文件输出位置</span></span><br><span class="line">                .setOpen(<span class="literal">false</span>)</span><br><span class="line">                .setAuthor(<span class="string">&quot;xiaoyuanjw&quot;</span>)</span><br><span class="line">                .setFileOverride(<span class="literal">true</span>)</span><br><span class="line">                .setMapperName(<span class="string">&quot;%sMapper&quot;</span>)</span><br><span class="line">                .setIdType(IdType.ASSIGN_ID);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        <span class="comment">// 设置包名相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.example.demo&quot;</span>)</span><br><span class="line">                .setEntity(<span class="string">&quot;domain&quot;</span>)</span><br><span class="line">                .setMapper(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">        <span class="comment">// 策略设置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;ums_user&quot;</span>)</span><br><span class="line">                .setTablePrefix(<span class="string">&quot;ums_&quot;</span>)</span><br><span class="line">                .setRestControllerStyle(<span class="literal">true</span>)</span><br><span class="line">                .setVersionFieldName(<span class="string">&quot;version&quot;</span>)</span><br><span class="line">                .setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>)</span><br><span class="line">                .setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line">        <span class="comment">// 执行代码生成器</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成结构"><a href="#生成结构" class="headerlink" title="生成结构"></a>生成结构</h3><p><img src="https://s2.loli.net/2022/07/05/1E6pqCjr5xTSsDL.png" alt="image-20220705214654400"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-Plus&quot;&gt;&lt;a href=&quot;#MyBatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;MyBatis-Plus&quot;&gt;&lt;/a&gt;MyBatis-Plus&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="MyBatis-Plus" scheme="http://example.com/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2022/06/26/Docker/"/>
    <id>http://example.com/2022/06/26/Docker/</id>
    <published>2022-06-26T02:31:22.000Z</published>
    <updated>2023-01-11T06:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>大型项目组件和运行环境相对复杂，部署时会碰到很多问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境存在差异，不同部署的服务器存在差异</li></ul><p><img src="https://s2.loli.net/2022/06/26/r5743fEk9wOiKhv.png" alt="image-20220626105249118"></p><h4 id="Docker问题解决"><a href="#Docker问题解决" class="headerlink" title="Docker问题解决"></a>Docker问题解决</h4><p>Docker如何解决依赖兼容问题</p><ul><li><p>将应用的Libs（函数库），Deps（依赖）、配置与应用一起打包</p></li><li><p>将某个应用放到一个隔离容器去运行，避免相互干扰</p></li></ul><p>Docker如何解决不同环境的操作系统不同的问题：</p><p>要解决这个问题，先要了解一下操作系统结构</p><p><img src="https://s2.loli.net/2022/06/26/DHvj5VXgmzCwYaS.png"></p><blockquote><p>内核与硬件交互，提供操作硬件的指令</p><p>系统应用封装内核指令为函数，便于程序员调用，用户程序基于系统函数库实现功能</p></blockquote><p>例如：Ubuntu和CentOS都是基于Linux内核，只是系统应用不同，提供的函数库存在差异，这就是用户程序不能跨系统运行的原因。</p><ul><li>Docker将用户程序与所需要调用的系统函数库一起打包</li><li>用户程序在运行到不同操作系统时，直接基于打包好的库函数，借助于操作系统的Linux内核来运行</li></ul><p><img src="https://s2.loli.net/2022/06/26/iKTZhF1REUst5e4.png" alt="image-20220626111505029"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Docker是一个开源的应用容器引擎</p><ul><li><p>Docker允许将开发中将应用、依赖、函数库、配置打包形成可移植的镜像</p></li><li><p>Docker应用运行在容器中，使用沙箱机制，相互隔离</p></li><li><p>Docker镜像中包含完整运行环境，包括系统库函数，仅依赖系统的Linux内核，因此可以发布到任意Linux操作系统上运行，实现虚拟化</p></li></ul><h3 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h3><p><img src="https://s2.loli.net/2022/07/12/ei2P8JBlgIRf7zM.png" alt="image-20220630181037698"></p><p>Docker是一个系统进程，而虚拟机是操作系统中的操作系统</p><p> 虚拟机在操作系统中模拟硬件设备，然后运行另一个操作系统，例如在window系统中运行一个Ubuntu系统。</p><p>可以运行任意的Ubuntu应用。</p><p><img src="https://s2.loli.net/2022/06/26/vfJxEPaWudS8htT.png" alt="image-20220626121645356"></p><table><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>性能</td><td>接近原生</td><td>性能较差</td></tr><tr><td>硬盘占用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p><img src="https://s2.loli.net/2022/07/12/b19DXow3ejd7qgi.png" alt="image-20220630184857540"></p><p>Docker包括三个基本概念</p><ul><li><p>镜像（Image）：相当于一个root文件系统，Docker将应用程序及其依赖、函数库、环境、配置等文件打包在一起形成镜像文件。</p></li><li><p>容器（Container）：镜像中的应用程序运行后形成的进程就是容器，Docker对容器进行隔离，有独立的CPU、内存 等，对外不可见。</p><blockquote><p>镜像和容器的关系，类似于面向对象程序设计中的类和实例一样，Docker容器通过Docker镜像来创建。镜像是静态的定义,时用于创建Docker容器的模板，容器是镜像运行时的实体，是独立运行的一个或一组应用。容器可以被创建、启动、停止、删除、暂停等。</p></blockquote><p><img src="https://s2.loli.net/2022/06/26/zVtjlXbnEsQu6CT.png" alt="image-20220626125142458"></p></li><li><p>仓库（Repository）：一个代码控制中心，用来保存镜像。</p></li></ul><p><img src="https://s2.loli.net/2022/06/26/DpigMkWVTxPrv9N.png" alt="image-20220626124824925"></p><p>Docker使用客户端-服务端（C/S）架构模式</p><p><img src="https://s2.loli.net/2022/06/26/479uHrjBdZ6IQWv.png" alt="img"></p><ul><li>服务端（server）：Docker守护进程，负责处理Docker指令、管理镜像、容器等</li><li>客户端（client）：通过命令或RestAPI向Docker服务端发送指令，与Docker的守护进程通信。</li></ul><p><img src="https://s2.loli.net/2022/06/26/D9wCelVNydBpKWU.png" alt="image-20220626125845647"></p><h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><h3 id="CentOS-Docker安装"><a href="#CentOS-Docker安装" class="headerlink" title="CentOS Docker安装"></a>CentOS Docker安装</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><h5 id="查看已经安装的docker"><a href="#查看已经安装的docker" class="headerlink" title="查看已经安装的docker"></a>查看已经安装的docker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed |grep docker</span><br></pre></td></tr></table></figure><h5 id="下载已经安装的docker"><a href="#下载已经安装的docker" class="headerlink" title="下载已经安装的docker"></a>下载已经安装的docker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove xxx</span><br></pre></td></tr></table></figure><h5 id="删除旧版本即其相关依赖项"><a href="#删除旧版本即其相关依赖项" class="headerlink" title="删除旧版本即其相关依赖项"></a>删除旧版本即其相关依赖项</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装Docker-Engine-Community"><a href="#安装Docker-Engine-Community" class="headerlink" title="安装Docker Engine-Community"></a>安装Docker Engine-Community</h4><blockquote><p>使用 Docker 仓库即Docker Engine-Community进行安装</p><p>在新主机安装Docker Engine-Community前，需要设置Docker仓库，之后可以从仓库安装和更新Docker</p></blockquote><h5 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/8adFTPgOYx6wfDv.png" alt="image-20220626210712373"></p><h5 id="设置稳定仓库"><a href="#设置稳定仓库" class="headerlink" title="设置稳定仓库"></a>设置稳定仓库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/8BivwWVtUyIg3kf.png" alt="image-20220626210628192"></p><h5 id="安装Docker-Engine-Community-1"><a href="#安装Docker-Engine-Community-1" class="headerlink" title="安装Docker Engine-Community"></a>安装Docker Engine-Community</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/Di92yF4EO6RWuTw.png" alt="image-20220626211100004"></p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/b8mBlpvDMurXg6Y.png" alt="image-20220626132908943"></p><h4 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl status docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/GH635EITaPvzWiA.png" alt="image-20220626133049860"></p><h4 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/eSZQqO39kFYt6jR.png" alt="image-20220626211521257"></p><h4 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h4><p>阿里容器镜像服务地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p><img src="https://s2.loli.net/2022/06/26/CgsplG6LcAraZm4.png" alt="image-20220626211723068"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://fsfhxt97.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h2><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><p>镜像名称一般分两部分组成：[repository]:[tag]</p><blockquote><p>没有指定tag时，默认是latest，代表最新版本的镜像</p></blockquote><p><img src="https://s2.loli.net/2022/06/26/37jHDyA8S1flMYz.png" alt="image-20220626212326961"></p><h3 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h3><p>通过Dockerfile构建本地构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure><p>从Docker Registry镜像服务器拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi</span><br></pre></td></tr></table></figure><p>推送镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push</span><br></pre></td></tr></table></figure><p>镜像压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save</span><br></pre></td></tr></table></figure><p>加载压缩镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/1BFy2okuU94wtTb.png" alt="image-20220626212914211"></p><p>查看docker命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br><span class="line">docker xxx </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/1HKiPmadVqhY9yx.png" alt="image-20220626213134386"></p><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p><img src="https://s2.loli.net/2022/07/09/wOaoPthBv8ZgYA1.png" alt="image-20220709164840868"></p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li><p>docker run：创建并运行一个容器</p></li><li><p>-name：容器名称</p></li><li><p>-p 8080:80： 端口进行映射，将宿主机端口与容器端口映射，将本地 8080 端口映射到容器内部的 80 端口</p></li><li><p>-d nginx： 设置容器在后台运行</p></li><li><p>niginx：后台名称</p></li></ul></blockquote><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nginx</span><br></pre></td></tr></table></figure><blockquote><p>-f   持续更新日志信息</p></blockquote><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it nginx bash</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li>docker exec：进入容器内部，执行命令</li><li>-it：给当前进入的容器构建一个标准输入输出终端，实现与容器的交互</li><li>bash：进入容器后执行的命令，bash是一个Linux终端交互命令</li></ul></blockquote><h2 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h2><h3 id="查看可用MySQL版本"><a href="#查看可用MySQL版本" class="headerlink" title="查看可用MySQL版本"></a>查看可用MySQL版本</h3><p>访问 MySQL 镜像库地址：<a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p><p><img src="https://s2.loli.net/2022/06/26/R2cBAZDhO8XtWav.png" alt="image-20220626213644151"></p><h3 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><blockquote><p> Dockerhub没有提供arm64架构的MySQL，但是MySQL官方提供了mysql/mysql-server</p></blockquote><p>arm架构下拉取MySQL镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql/mysql-server</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/x4NVdpZn78uoKbW.png" alt="image-20220626224920659"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull --platform linux/x86_64 mysql</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/QywWo7JFVDuieqX.png" alt="image-20220627091852496"></p><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/bd2Skcmn8grwRCD.png" alt="image-20220627091949600"></p><h3 id="搜索可用镜像"><a href="#搜索可用镜像" class="headerlink" title="搜索可用镜像"></a>搜索可用镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/FizNbMqhpwWCZya.png" alt="image-20220627101743575"></p><h3 id="运行MySQL"><a href="#运行MySQL" class="headerlink" title="运行MySQL"></a>运行MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d  mysql</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li><strong>-p 3306:3306</strong> ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务</li><li><strong>MYSQL_ROOT_PASSWORD=123456</strong>：设置 MySQL 服务 root 用户的密码</li></ul></blockquote><p><img src="https://s2.loli.net/2022/07/09/TW4DoMgOteXNSnj.png" alt="image-20220709153240490"></p><h4 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d  \</span><br><span class="line">-v /mydata/mysql/log:/logs \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><blockquote><p>arm架构下运行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql/mysql-server</span><br></pre></td></tr></table></figure><blockquote><p>–name：容器命名</p><p>-p：端口映射</p></blockquote><p><img src="https://s2.loli.net/2022/06/27/PMCQYl9m57UIy2K.png" alt="image-20220627202412060"></p><h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/UGgCWoljKZxSwHT.png"></p><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><h4 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#添加远程登录用户</span><br><span class="line">CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line">#</span><br><span class="line">GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;；</span><br><span class="line">flush privileges;</span><br><span class="line">#修改密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;13851176590++&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/6ghaeCGo15cmDdy.png" alt="image-20220627210219722"></p><h4 id="查看用户数据库"><a href="#查看用户数据库" class="headerlink" title="查看用户数据库"></a>查看用户数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use mysql;</span><br><span class="line">select host, user, plugin from user;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/gnCJSlbzGy3HWV2.png" alt="image-20220627210420003"></p><h4 id="远程连接测试"><a href="#远程连接测试" class="headerlink" title="远程连接测试"></a>远程连接测试</h4><p><img src="https://s2.loli.net/2022/06/27/Ptq6WZL9RdjBJNl.png" alt="image-20220627211152025"></p><p><img src="https://s2.loli.net/2022/06/27/VX71Qtwv4ByNsfW.png" alt="image-20220627211216753"></p><h2 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h2><h3 id="查看可用Nginx版本"><a href="#查看可用Nginx版本" class="headerlink" title="查看可用Nginx版本"></a>查看可用Nginx版本</h3><p>访问Nginx镜像库版本地址：<a href="https://hub.docker.com/_/nginx">https://hub.docker.com/_/nginx</a></p><p><img src="https://s2.loli.net/2022/06/27/bsDTCmwg6iEX9qj.png" alt="image-20220627212318153"></p><h3 id="拉取Nginx镜像"><a href="#拉取Nginx镜像" class="headerlink" title="拉取Nginx镜像"></a>拉取Nginx镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/G4lPrCzxdRiKcSE.png" alt="image-20220627212905626"></p><h3 id="查看本地镜像-1"><a href="#查看本地镜像-1" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/CYQADKfuhZpoqHF.png" alt="image-20220627213027744"></p><h3 id="运行Nginx"><a href="#运行Nginx" class="headerlink" title="运行Nginx"></a>运行Nginx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/pGgndqcEivYKoyM.png" alt="image-20220627213342836"></p><p>参数说明：</p><blockquote><ul><li><strong>–name nginx</strong>：容器名称</li><li><strong>-p 8080:80</strong>： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口<ul><li><strong>-d nginx</strong>： 设置容器在在后台一直运行</li></ul></li></ul></blockquote><h3 id="镜像导出和加载"><a href="#镜像导出和加载" class="headerlink" title="镜像导出和加载"></a>镜像导出和加载</h3><h4 id="镜像导出"><a href="#镜像导出" class="headerlink" title="镜像导出"></a>镜像导出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/e6F5AgK9tu13SCs.png" alt="image-20220709155017994"></p><h4 id="镜像加载"><a href="#镜像加载" class="headerlink" title="镜像加载"></a>镜像加载</h4><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/1x2WUYieaoN4bJO.png" alt="image-20220709155218222"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/UyiwadYqObkfHJP.png" alt="image-20220709155420618"></p><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li><strong>–name nginx-test</strong>：容器名称</li><li><strong>-p 8080:80</strong>： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口</li><li><strong>-d nginx</strong>： 设置容器在在后台一直运行</li></ul></blockquote><h3 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h3><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220709164017925.png" alt="image-20220709164017925"></p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/Kix9IsezgZoF46k.png" alt="image-20220709170822636"></p><h2 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h2><h3 id="查看Redis可用版本"><a href="#查看Redis可用版本" class="headerlink" title="查看Redis可用版本"></a>查看Redis可用版本</h3><p><img src="https://s2.loli.net/2022/07/09/1qnMl8STNKvhoaV.png" alt="image-20220709160742122"></p><h3 id="拉取Redis镜像"><a href="#拉取Redis镜像" class="headerlink" title="拉取Redis镜像"></a>拉取Redis镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/Adchiq7RFbPEuKx.png" alt="image-20220709160912161"></p><h3 id="运行Redis容器"><a href="#运行Redis容器" class="headerlink" title="运行Redis容器"></a>运行Redis容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/35EhZDXBjGdgQUL.png" alt="image-20220709161215298"></p><h3 id="持久化运行Redis容器"><a href="#持久化运行Redis容器" class="headerlink" title="持久化运行Redis容器"></a>持久化运行Redis容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 -d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/Yh2McU9m5EOpeXi.png" alt="image-20220709184650774"></p><h3 id="使用Redis客户端"><a href="#使用Redis客户端" class="headerlink" title="使用Redis客户端"></a>使用Redis客户端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/5Yl2MbRAWGgcUBN.png" alt="image-20220709161905065"></p><h3 id="可视化工具连接Redis"><a href="#可视化工具连接Redis" class="headerlink" title="可视化工具连接Redis"></a>可视化工具连接Redis</h3><p><img src="https://s2.loli.net/2022/07/09/NncaSrQ5B8R4j1W.png" alt="image-20220709190614232"></p><h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o redis.tar redis:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/ZRbAUB5VyFCrncT.png" alt="image-20220709162053955"></p><h3 id="删除容器和镜像"><a href="#删除容器和镜像" class="headerlink" title="删除容器和镜像"></a>删除容器和镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm</span><br><span class="line">docker rmi</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/ARQNT9ixhtC6pmZ.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i redis.tar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/OGA5VeUFJBru6h2.png" alt="image-20220709162740876"></p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="数据卷定义"><a href="#数据卷定义" class="headerlink" title="数据卷定义"></a>数据卷定义</h3><blockquote><p>数据卷主要用于解决容器与数据耦合的问题，即将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全。</p></blockquote><p><img src="https://s2.loli.net/2022/07/16/DJxtMSWCkmgQB5o.png" alt="image-20220716114244206"></p><p>数据卷(volume)是一个虚拟目录，指向宿主机文件系统中的一个目录。</p><p><img src="https://s2.loli.net/2022/07/16/zleZEKkjFW5ayqV.png" alt="image-20220716114631748"></p><h3 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure><blockquote><p>docker volume命令是数据卷操作，根据命令后跟随command确定下一步操作</p></blockquote><ul><li>create-创建一个volume</li><li>inspect-显示一个或多个volume的信息</li><li>ls-列出所有的volume</li><li>prune-删除未使用的volume</li><li>rm-删除一个或多个指定的volume</li></ul><p><img src="https://s2.loli.net/2022/07/16/u1FRUSje8QlnWCq.png" alt="image-20220716125125309"></p><p><img src="https://s2.loli.net/2022/07/16/kNRY8gADQxTl24S.png" alt="image-20220716125559541"></p><p><img src="https://s2.loli.net/2022/07/16/9DSWUIhsv5Bn6EV.png" alt="image-20220716125638308"></p><h3 id="数据卷挂载"><a href="#数据卷挂载" class="headerlink" title="数据卷挂载"></a>数据卷挂载</h3><h4 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create html</span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220716135129339.png" alt="image-20220716135129339"></p><h4 id="运行容器并挂载数据卷"><a href="#运行容器并挂载数据卷" class="headerlink" title="运行容器并挂载数据卷"></a>运行容器并挂载数据卷</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -v html:/usr/share/nginx/html -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>数据卷挂载方式：-v nameName : /targetContainerPath</p><p>如果容器运行时Volume不存在，会被自动创建出来</p></blockquote><p><img src="https://s2.loli.net/2022/07/16/IL4EQfiAr21qKtp.png" alt="image-20220716135701171"></p><h4 id="查看挂载目录"><a href="#查看挂载目录" class="headerlink" title="查看挂载目录"></a>查看挂载目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect html</span><br><span class="line">cd /var/lib/docker/volumes/html/_data</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/16/M5tlDuegwx97Y2i.png" alt="image-20220716140349300"></p><h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/16/cNDIsf4ZS1oiqLA.png" alt="image-20220716141200880"></p><h4 id="访问服务-1"><a href="#访问服务-1" class="headerlink" title="访问服务"></a>访问服务</h4><p><img src="https://s2.loli.net/2022/07/19/xsvw6pOES3fVhuX.png" alt="image-20220719225705897"></p><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><blockquote><p>目录挂载和数据卷挂载的语法类似：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[宿主机文件]</li></ul></blockquote><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /tmp/mysql/data</span><br><span class="line">mkdir -p /tmp/mysql/conf</span><br></pre></td></tr></table></figure><blockquote><p>挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>设置MySQL密码</p></blockquote><h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name mysql \ </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \</span><br><span class="line">-v /tmp/mysql/data:/var/lib/mysql \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><h3 id="数据卷挂载方式对比"><a href="#数据卷挂载方式对比" class="headerlink" title="数据卷挂载方式对比"></a>数据卷挂载方式对比</h3><p><img src="https://s2.loli.net/2022/07/19/2GKXxnvreMsHiY3.png" alt="image-20220719232331514"></p><ul><li>数据卷挂载耦合度低，由dokcer来管理目录</li><li>目录挂载耦合高，需要我们自己来管理目录</li></ul><h2 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h2><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><blockquote><p>镜像时将应用程序及其需要的系统函数库、环境、配置、依赖打包而成</p></blockquote><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220719233304550.png" alt="image-20220719233304550"></p><p>镜像是分层结构，每一层称为一个Layer</p><ul><li><p>BaseImage层：包含基本的系统函数库、环境变量、文件系统</p></li><li><p>Entrypoint层：入口，是镜像中应用启动的命令</p></li><li><p>其他层：在BaseImage基础上添加依赖、安装程序、完成整个应用的安装和配置</p></li></ul><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile是一个文本文件，其中包含了一个个指令(Instruction)，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="https://s2.loli.net/2022/07/20/6MqsXBp9juyNeiv.png" alt="image-20220720120921273"></p><h4 id="基于java-8-alpine镜像构建Java项目为镜像"><a href="#基于java-8-alpine镜像构建Java项目为镜像" class="headerlink" title="基于java:8-alpine镜像构建Java项目为镜像"></a>基于java:8-alpine镜像构建Java项目为镜像</h4><ul><li>新建一个空目录，在目录中新建一个文件</li></ul><p><img src="https://s2.loli.net/2022/07/20/4BV8zpP7qYUeC5u.png" alt="image-20220720141558745"></p><ul><li>拷贝jar包到目录</li></ul><p><img src="https://s2.loli.net/2022/07/20/LACTlmpDMqR1j92.png" alt="image-20220720142621552"></p><ul><li>编写Dockerfile文件<ul><li>基于java:8-alpine作为基础镜像</li><li>将app.jar拷贝到镜像中</li><li>暴露端口</li><li>编写人口ENTRYPOINT</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM java:8-alpine</span><br><span class="line"></span><br><span class="line"># 拷贝java项目的包</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8090</span><br><span class="line"># 入口，java项目的启动命令</span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/20/BZCoeyRv8EUucTd.png" alt="image-20220720142611628"></p><ul><li>使用docker build命令构建镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure><blockquote><p>最后的.指从当前目录构建</p></blockquote><p><img src="https://s2.loli.net/2022/07/20/HMjCW9DOutfxvbR.png" alt="image-20220720142801112"></p><ul><li>使用docker run创建容器并运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name javaweb -p 8090:8090 -d javaweb:1.0</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/20/JuRgaCeTK91VUXj.png" alt="image-20220720145638751"></p><ul><li>访问网址：<a href="http://ip:8090/hello/count">http://ip:8090/hello/count</a></li></ul><p><img src="https://s2.loli.net/2022/07/20/Ipw8Jdk1c7nGyah.png" alt="image-20220720145713672"></p><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><blockquote><p>Docker Compose是一个用于定义和运行多个Docker容器应用的工具，</p><p>Docker  Compose可以基于Compose文件帮助我们快速部署分布式应用，而无需手动一个个创建和运行容器。</p><p>Compose使用YAML文件配置应用服务，通过指令定义集群中的每一个容器如何运行。</p></blockquote><p><img src="https://s2.loli.net/2022/07/21/WdSYkMLzcljgHvD.png" alt="image-20220721094915629"></p><h3 id="DockerCompose的安装"><a href="#DockerCompose的安装" class="headerlink" title="DockerCompose的安装"></a>DockerCompose的安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/DoeYcXgaQERKbU5.png" alt="image-20220721110308195"></p><p><img src="https://s2.loli.net/2022/07/21/KuSj45c9rhgCOEA.png" alt="image-20220721110437236"></p><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><blockquote><p>修改文件权限为可执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/64qi9zxDyJIbwKs.png" alt="image-20220721110623950"></p><h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/2TGAwCYW5hIPXJa.png" alt="image-20220721132752027"></p><h4 id="Base自动补全命令"><a href="#Base自动补全命令" class="headerlink" title="Base自动补全命令"></a>Base自动补全命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/25gijMbw1GnFhcD.png" alt="image-20220721133210786"></p><h3 id="Docker-Compose使用步骤"><a href="#Docker-Compose使用步骤" class="headerlink" title="Docker Compose使用步骤"></a>Docker Compose使用步骤</h3><ul><li>使用DockerFile定义应用程序环境，一般需要修改初始镜像行为时才需要使用</li><li>使用docker-compose.yml定义需要部署的应用程序服务</li><li>使用docker-compose up命令将所有应用服务一次性部署</li></ul><h3 id="Docker-compose-yml常用配置"><a href="#Docker-compose-yml常用配置" class="headerlink" title="Docker-compose.yml常用配置"></a>Docker-compose.yml常用配置</h3><h4 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h4><blockquote><p>指定运行镜像的名称</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">&lt;image_name&gt;:&lt;tags&gt;</span></span><br></pre></td></tr></table></figure><h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h4><blockquote><p>配置容器名称</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">&lt;container_name&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h4><blockquote><p>指定宿主机和容器的端口映射（HOST-宿主机端口:CONTAINER-容器端口）</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将宿主机的3306端口映射到容器的3306端口</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;host_port&gt;:&lt;container_port&gt;</span></span><br></pre></td></tr></table></figure><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h4><blockquote><p>将宿主机的文件或目录挂载到容器中（HOST:CONTAINER）</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将宿主机文件挂载到容器内</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;host_volumes&gt;:&lt;container_volumes&gt;</span></span><br></pre></td></tr></table></figure><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h4><blockquote><p>配置环境变量</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;env_param&gt;=&lt;env_value&gt;</span></span><br></pre></td></tr></table></figure><h4 id="links"><a href="#links" class="headerlink" title="links"></a><code>links</code></h4><blockquote><p>连接其他容器的服务（SERVICE:ALIAS）</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以以database为域名访问服务名称为db的容器</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">db:database</span></span><br></pre></td></tr></table></figure><h3 id="Docker-Compose常用命令"><a href="#Docker-Compose常用命令" class="headerlink" title="Docker Compose常用命令"></a>Docker Compose常用命令</h3><h4 id="构建、创建、启动相关容器"><a href="#构建、创建、启动相关容器" class="headerlink" title="构建、创建、启动相关容器"></a>构建、创建、启动相关容器</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -d表示后台运行</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><h4 id="指定文件启动"><a href="#指定文件启动" class="headerlink" title="指定文件启动"></a>指定文件启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><h4 id="停止所有相关容器"><a href="#停止所有相关容器" class="headerlink" title="停止所有相关容器"></a>停止所有相关容器</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker-compose</span> <span class="string">stop</span></span><br></pre></td></tr></table></figure><h4 id="列出所有容器信息"><a href="#列出所有容器信息" class="headerlink" title="列出所有容器信息"></a>列出所有容器信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h2 id="容器网络管理"><a href="#容器网络管理" class="headerlink" title="容器网络管理"></a>容器网络管理</h2><h3 id="网络管理意义"><a href="#网络管理意义" class="headerlink" title="网络管理意义"></a>网络管理意义</h3><blockquote><p>容器的网络默认与宿主机、与其他容器相互隔离，且容器中可以运行一些网络应用，如nginx、web应用、数据库等，如果需要让外部可以访问这些容器中运行的网络应用，需要配置网络来实现。</p><p>不同的需求下，容器和宿主机的通信有不同的业务状态时，需要容器网络管理以达到管理不同业务下相关的网络配置。</p></blockquote><h3 id="Docker网络驱动模式的类型"><a href="#Docker网络驱动模式的类型" class="headerlink" title="Docker网络驱动模式的类型"></a>Docker网络驱动模式的类型</h3><ul><li>bridge-桥接模式：默认的网络模式，类似虚拟机的nat模式</li><li>host-宿主模式：容器与宿主机之间的网络无隔离，即容器直接使用宿主机网路</li><li>none-禁用模式：容器禁用所有网络</li><li>overlay-覆盖模式：利用vxlan实现的bridge模式</li><li>macvlan-模式：容器具备MAC地址，使其在外部看来一台真实的网络设备</li></ul><p>Docker在安装时，会自动创建bridge、host、none三个网络驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2635e0a53f37de6a71092edbcb9df7c8.png" alt="image-20220728101349811"></p><h3 id="Docker网络管理命令"><a href="#Docker网络管理命令" class="headerlink" title="Docker网络管理命令"></a>Docker网络管理命令</h3><h4 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network --help</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/080650e39754817256f875e574850201.png" alt="image-20220728103531652"></p><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3c6e94ae24ae9d3b1901efbc01b4ca02.png" alt="image-20220728103852636"></p><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fe8c0f41e5adc328cb7a7474149d20cb.png" alt="image-20220728104125387"></p><blockquote><p>-d 指定网络的驱动（不指定默认为bridge）</p><p>–  subnet 指定子网网段（192.168.0.0/16）</p><p>– ip-range 指定容器的I范围</p><p>– gateway 子网的网关</p></blockquote><h4 id="网络删除"><a href="#网络删除" class="headerlink" title="网络删除"></a>网络删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network rm</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d661fc8ec44fcb6a7e49ab54db8fc2ab.png" alt="image-20220728105123725"></p><h4 id="查看网络详细信息"><a href="#查看网络详细信息" class="headerlink" title="查看网络详细信息"></a>查看网络详细信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5ee04037b0e0a3a328c184b6bc9e380f.png" alt="image-20220728105257769"></p><h4 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run/create --network </span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，docker创建或启动容器时，会默认使用名为bridge的网络</p></blockquote><h4 id="网络连接与断开"><a href="#网络连接与断开" class="headerlink" title="网络连接与断开"></a>网络连接与断开</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect/disconnect </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6e199f57e6d70218ae3d3c46024e0901.png" alt="image-20220728105838471"></p><h3 id="单主机常见三种Docker网络类型"><a href="#单主机常见三种Docker网络类型" class="headerlink" title="单主机常见三种Docker网络类型"></a>单主机常见三种Docker网络类型</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2be886532787b3da9f2f3f24b07a8b2b.png" alt="image-20220729231934850"></p><p>Docker默认情况下有bridge、host、none三种网络类型</p><h4 id="Centos容器镜像处理"><a href="#Centos容器镜像处理" class="headerlink" title="Centos容器镜像处理"></a>Centos容器镜像处理</h4><h5 id="Centos安装并启用ifconfig命令"><a href="#Centos安装并启用ifconfig命令" class="headerlink" title="Centos安装并启用ifconfig命令"></a>Centos安装并启用ifconfig命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5a12193a12a6dc221d034e942486d8d6.png" alt="image-20220729233311573"></p><h5 id="运行ipconfig命令"><a href="#运行ipconfig命令" class="headerlink" title="运行ipconfig命令"></a>运行ipconfig命令</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/896e1fecf8c2bf43eb1d84d7be4a423c.png" alt="image-20220729235046317"></p><h5 id="拉取centos镜像"><a href="#拉取centos镜像" class="headerlink" title="拉取centos镜像"></a>拉取centos镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:centos7</span><br></pre></td></tr></table></figure><h5 id="运行centos容器并启用ifconfig命令"><a href="#运行centos容器并启用ifconfig命令" class="headerlink" title="运行centos容器并启用ifconfig命令"></a>运行centos容器并启用ifconfig命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos:centos7</span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/43d96a7ba9adc52a6745eb877b6887af.png" alt="image-20220730003749530"></p><h5 id="从容器中创建镜像"><a href="#从容器中创建镜像" class="headerlink" title="从容器中创建镜像"></a>从容器中创建镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit adoring_noyce centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b93dc82c356b8a4598356ea7f2dd115c.png" alt="image-20220730001949456"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/379383b327a0acec97d629062bb70222.png" alt="image-20220730002038580"></p><h4 id="bridge网络模式"><a href="#bridge网络模式" class="headerlink" title="bridge网络模式"></a>bridge网络模式</h4><blockquote><p>容器默认使用的网络类型</p><ul><li>宿主机上需要单独的bridge网卡，docker默认创建的是docker0</li><li>容器之间、容器与主机之间的网络通信是借助为每一个容器生成的一对veth pair虚拟网络设备进行通信的(一个在容器上，另一个在宿主机上)</li><li>每创建一个基于bridge网络的容器，都会自动在宿主机上创建一个veth*虚拟网络设备。 外部无法直接访问容器。需要建立端口映射才能访问</li><li>容器借由veth虚拟设备通过如docker0这种bridge网络设备进行通信</li><li>每一容器具有单独的IP</li><li>bridge网络模式下宿主机与容器服务使用的端口可以重复</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/0a6e4eb9b89cd14fb2741b5b6a671e8c.webp?x-oss-process=image/format,png" alt="img"></p><h5 id="查看宿主机网络信息"><a href="#查看宿主机网络信息" class="headerlink" title="查看宿主机网络信息"></a>查看宿主机网络信息</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/75047e571a74402f528dda3d56ae08c5.png" alt="image-20220730005753492"></p><h5 id="创建桥接模式容器"><a href="#创建桥接模式容器" class="headerlink" title="创建桥接模式容器"></a>创建桥接模式容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos-net   #由于容器创建默认使用桥接模式，所以这里不需要使用--network指定</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a3de866165e449fdec1224153babf3e5.png" alt="image-20220730005943098"></p><blockquote><p>bridge网络模式下的端口映射：由于bridge网络模式的上述特点，访问bridge网络模式的设备时需要端口映射</p></blockquote><h5 id="端口映射格式"><a href="#端口映射格式" class="headerlink" title="端口映射格式"></a>端口映射格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/68dd303cc9d3ebbc898bc5d720b2806e.png" alt="image-20220730010611166"></p><h4 id="host网络模式"><a href="#host网络模式" class="headerlink" title="host网络模式"></a>host网络模式</h4><blockquote><p>容器完全共享宿主机的网络，网络没有隔离，可以说宿主机的网络就是容器的网络</p><ul><li>容器、宿主机上的应用所使用的端口不能重复</li><li>外部能够直接访问容器，不需要端口映射</li><li>容器ip就是宿主机的ip</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/71940ccf7233f016e59b7a8d29428ca4.webp?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=host centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2d6d9e0c541b242deb12a5a8a1556c26.png" alt="image-20220730011055805"></p><h4 id="none网络模式"><a href="#none网络模式" class="headerlink" title="none网络模式"></a>none网络模式</h4><blockquote><p>容器上没有网络，无需任何网络设备，外部无法访问</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=none centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d541690715d041bbdc06f2e0c599c358.png" alt="image-20220730004641932"></p><blockquote><p>只有一个本地回环lo网络设备</p></blockquote><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><h4 id="创建网络-1"><a href="#创建网络-1" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge test</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b78fcb487b9ce0ef955268b5d6828b92.png" alt="image-20220730012139747"></p><h4 id="自定义网络创建容器"><a href="#自定义网络创建容器" class="headerlink" title="自定义网络创建容器"></a>自定义网络创建容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=test centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fa53f37df23a85247d151f5d783ad67b.png" alt="image-20220730012749262"></p><p>成功分配网络内的ip地址（注意不同的网络之间是隔离的）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3112346b7e835df793b05e0f5d4a04ab.png" alt="image-20220730014800371"></p><p>不同的网络是相互隔离的，无法进行通信</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06c3dcaec68c83c394369061b763dc33.png" alt="image-20220730013923962"></p><h4 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect test 881852a511a6</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7f7d9d7c1166d22cdd28d3e8719354d6.png" alt="image-20220730014615772"></p><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/020d377599638397befaeeeb9afdbd3f.png" alt="image-20220730020059128"></p><h3 id="容器通信"><a href="#容器通信" class="headerlink" title="容器通信"></a>容器通信</h3><h4 id="同一网络容器通信"><a href="#同一网络容器通信" class="headerlink" title="同一网络容器通信"></a>同一网络容器通信</h4><blockquote><p>创建两个容器使用同一个网络，在同一个子网分配ip地址，可以相互访问</p><p>因此只要保证两个容器处于同一个网络中，就可以直接通过容器的ip地址在容器间进行通信</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/1fb1cc1e6ce0c0f82ee37b028832dbd9.png" alt="image-20220730115943556"></p><h4 id="Docker域名解析服务器"><a href="#Docker域名解析服务器" class="headerlink" title="Docker域名解析服务器"></a>Docker域名解析服务器</h4><blockquote><p>在大多数场景下，容器部署的ip地址是自动分配的，因此无法提前知道ip地址</p><p>我们可以借助Docker提供的DNS服务器，将域名解析成对应容器的ip地址，这样就直接访问域名来实现通信（注意：域名解析只能在用户自定义网络下生效，默认网络是不行的）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=test01 --network=test centos-net </span><br><span class="line">docker run -it --name=test02 --network=test centos-net</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/a180b2561bf774d950466a3ee52fd30c.png" alt="image-20220730121326930"></h4><h4 id="容器共享网络"><a href="#容器共享网络" class="headerlink" title="容器共享网络"></a>容器共享网络</h4><p>创建并运行一个新的容器，将其网络指定一个容器的网络，使得两个容器使用同一个网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=test03 --network=container:test01 centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/aa2597ff4391dd7ed108a12829927d7b.png" alt="image-20220730121726308"></p><h3 id="容器和外部通信"><a href="#容器和外部通信" class="headerlink" title="容器和外部通信"></a>容器和外部通信</h3><blockquote><p>容器创建默认使用桥接模式，桥接模式创建一个虚拟网络，让容器在虚拟网络中，通过桥接器与外界相连。其中，数据包从容器内部的网络搭到达宿主主机再发送网络的过程最关键的是依靠NATj将地址进行转换，再利用宿主机的ip地址将数据包转发出去。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/efa041e60beb97b4d37b5494d8e48446.png" alt="image-20220702232449520"></p><p>通过NAT，容器可以实现访问外界，但是当外部主动连接容器时，我们可以直接创建容器时配置端口映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>-p：端口映射配置，将容器对外提供访问的端口映射搭到宿主机的端口上</p><p>-p 宿主端口:容器端口</p><p>当外部访问到宿主主机的对应端口时会直接转发给容器内</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba（二） Sentinel</title>
    <link href="http://example.com/2022/06/19/Spring%20Cloud%20Alibaba%EF%BC%88%E4%BA%8C%EF%BC%89Sentinel/"/>
    <id>http://example.com/2022/06/19/Spring%20Cloud%20Alibaba%EF%BC%88%E4%BA%8C%EF%BC%89Sentinel/</id>
    <published>2022-06-19T00:35:22.000Z</published>
    <updated>2022-06-25T14:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba（二）Sentinel"><a href="#Spring-Cloud-Alibaba（二）Sentinel" class="headerlink" title="Spring Cloud Alibaba（二）Sentinel"></a>Spring Cloud Alibaba（二）Sentinel</h1><h2 id="Sentinel介绍"><a href="#Sentinel介绍" class="headerlink" title="Sentinel介绍"></a>Sentinel介绍</h2><blockquote><p>随着微服务的流行，服务与服务之间的稳定性变得越来越重要。Sentinel以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p></blockquote><h2 id="Sentinel特征"><a href="#Sentinel特征" class="headerlink" title="Sentinel特征"></a>Sentinel特征</h2><blockquote><ul><li><strong>丰富的应用场景</strong>： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</li></ul></blockquote><h2 id="Sentinel安装与部署"><a href="#Sentinel安装与部署" class="headerlink" title="Sentinel安装与部署"></a>Sentinel安装与部署</h2><h3 id="Sentinel控制台安装"><a href="#Sentinel控制台安装" class="headerlink" title="Sentinel控制台安装"></a>Sentinel控制台安装</h3><blockquote><p>Sentinel控制台是一个轻量级的控制台应用，它可用于实时查看单机资源监控及集群资源的汇总，并提供一系列的规则管理功能，如流控规则、降级规则、热点规则等。</p></blockquote><p>与Nacos一样，Sentinel也是独立安装与部署的。</p><p>Sentinel下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="https://s2.loli.net/2022/06/22/61vKnDY4PoWRxHg.png" alt="image-20220622143732400"></p><h3 id="IDEA运行Sentinel"><a href="#IDEA运行Sentinel" class="headerlink" title="IDEA运行Sentinel"></a>IDEA运行Sentinel</h3><h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p><img src="https://s2.loli.net/2022/06/22/s5jNmy8HP2dokZl.png" alt="image-20220622144500793"></p><h4 id="导入Jar包"><a href="#导入Jar包" class="headerlink" title="导入Jar包"></a>导入Jar包</h4><p><img src="https://s2.loli.net/2022/06/22/IvnmcpJH5lsgEAW.png" alt="image-20220622144605589"></p><p><img src="https://s2.loli.net/2022/06/22/aoTy82nhLVrHWMI.png" alt="image-20220622144931169"></p><h4 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h4><p><img src="https://s2.loli.net/2022/06/22/9bOLcMDxuIE2QPB.png" alt="image-20220622144859856"></p><h4 id="运行Sentinel"><a href="#运行Sentinel" class="headerlink" title="运行Sentinel"></a>运行Sentinel</h4><p><img src="https://s2.loli.net/2022/06/22/Vyz5Dfb2AcBKgEC.png" alt="image-20220622145133735"></p><p>访问<a href="http://localhost:8858/">http://localhost:8858/</a></p><p><img src="https://s2.loli.net/2022/06/22/h9BoCXt2RdN6KH1.png" alt="image-20220622145412127"></p><p>用户和密码都是：sentinel</p><p><img src="https://s2.loli.net/2022/06/22/uXYdEr2HfTnG4Bl.png" alt="image-20220622150046689"></p><h2 id="Sentinel使用"><a href="#Sentinel使用" class="headerlink" title="Sentinel使用"></a>Sentinel使用</h2><blockquote><p>Sentinel Starter 默认为所有的 HTTP 服务提供了限流埋点，同时我们也可以通过使用@SentinelResource注解来自定义一些限流行为。</p></blockquote><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/22/CJnA9wlYMBWpdhK.png" alt="image-20220622171914457"></p><h4 id="编辑配置-1"><a href="#编辑配置-1" class="headerlink" title="编辑配置"></a>编辑配置</h4><p><img src="https://s2.loli.net/2022/06/22/TZJmqWIpnjC2FLh.png" alt="image-20220622172010394"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 是否是临时实例</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="number">68928803</span><span class="string">-bcbf-40a4-ba9a-1bb84ff12238</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><img src="https://s2.loli.net/2022/06/22/8ycGOIrz4Mhfk5m.png" alt="image-20220622234031959"></p><p>其他模块同理</p><p><img src="https://s2.loli.net/2022/06/22/CXEKJc2TiB89FM6.png" alt="image-20220622234737747"></p><h2 id="Sentinel流量控制"><a href="#Sentinel流量控制" class="headerlink" title="Sentinel流量控制"></a>Sentinel流量控制</h2><h3 id="限流的定义和意义"><a href="#限流的定义和意义" class="headerlink" title="限流的定义和意义"></a>限流的定义和意义</h3><blockquote><p>限流就是对于请求的速率进行限制，避免瞬时的大量请求击垮软件系统，在合理避免高比发请求的同时，也在一定程度上保护服务器不受恶意攻击</p><p>限流可能会导致用户的请求无法被正确处理，但它是权衡了软件系统的稳定性之后的最优解</p></blockquote><h3 id="常见的限流算法"><a href="#常见的限流算法" class="headerlink" title="常见的限流算法"></a>常见的限流算法</h3><h4 id="固定窗口计数器算法"><a href="#固定窗口计数器算法" class="headerlink" title="固定窗口计数器算法"></a>固定窗口计数器算法</h4><p>固定窗口就是时间窗口，固定窗口计数器算法规定了单位时间处理的请求数量。</p><p>固定窗口对某一个时间段内的请求进行计数和限制，假设规定系统中某个接口1分钟只能访问100词的话，使用固定窗口计数器算法的实现思路如下：</p><blockquote><ul><li>给定一个变量 counter 来记录当前接口处理的请求数量，初始值为0，代表接口当前1分钟内暂未处理请求</li><li>1分钟之内每处理一个请求之后就将 counter + 1，当 counter = 100之后，后续的请求就会被全部拒绝</li><li>等到1分钟结束后，将couter重置 0，重新开始计数</li></ul></blockquote><p>这种限流算法无法保证限流速率，无法避免突然激增的流量。</p><p><img src="https://s2.loli.net/2022/06/23/SpeHnFd4oYAPsTR.png" alt="固定窗口计数器算法"></p><h4 id="滑动窗口计数器算法"><a href="#滑动窗口计数器算法" class="headerlink" title="滑动窗口计数器算法"></a>滑动窗口计数器算法</h4><p>相对于固定窗口计数器算法，滑动时间窗口算法更加灵活，它可以动态移动窗口，重新进行计算</p><p>例如我们接口进行限流，每分钟处理60个请求，可以把1分钟分为60个窗口，每隔 1 秒移动一次，每个窗口一秒只能处理 不大于 <code>60(请求数)/60（窗口数）</code> 的请求，如果当前窗口的请求计数总和超过了限制的数量的话就不再处理其他请求。</p><p><img src="https://s2.loli.net/2022/06/23/QIOmVHajWYA9efE.png" alt="滑动窗口计数器算法"></p><p>当滑动窗口的格子划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精确。</p><p>虽然滑动时间窗口算法可以避免固定时间窗口的临界问题，但是它比固定窗口更加耗时。</p><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><p>我们可以把发请求的动作比作注水到桶中，处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。</p><p>算法的实现可以通过一个队列来实现：准备一个队列保存请求，然后定期从队列中拿请求来执行</p><p><img src="https://s2.loli.net/2022/06/23/sSumaHXqJARvNZb.png" alt="漏桶算法"></p><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h4><p>和漏桶算法算法相似，但桶是用来存放令牌的，每隔一段时间向桶中丢入一个令牌，速度可以指定，请求在被处理之前需要拿到一个令牌，请求处理完毕之后将这个令牌丢弃。当桶中的令牌数量不足时，取不到的令牌请求将会被丢弃。我们可以根据限流大小，按照一定的速率往桶里添加令牌。此外，如果桶装满了，就不能继续往里面继续添加令牌了。</p><p><img src="https://s2.loli.net/2022/06/23/4jqicJoIr6LXVBw.png" alt="令牌桶算法"></p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><h4 id="簇点链路"><a href="#簇点链路" class="headerlink" title="簇点链路"></a>簇点链路</h4><p>打开Sentinel管理页面的簇点链路模块</p><p><img src="https://s2.loli.net/2022/06/23/qT5p6kfEOMDPjgS.png" alt="image-20220623231123397"></p><h5 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h5><blockquote><p>直联：只针对当前接口</p><p>关联：当被关联的接口超过阈值时，会导致当前接口被限流</p><p>链路：更细粒度的限流，能精确到具体的方法</p></blockquote><h6 id="直联模式"><a href="#直联模式" class="headerlink" title="直联模式"></a>直联模式</h6><p><img src="https://s2.loli.net/2022/06/23/hyzIHkUjwPJip97.png" alt="image-20220623231516165"></p><p><img src="https://s2.loli.net/2022/06/23/9eN6KiY1hlopSd3.png" alt="image-20220623231621772"></p><h6 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h6><p><img src="https://s2.loli.net/2022/06/23/34V7Fw9HYfuINX6.png" alt="image-20220623233146439"></p><p>Postman批量请求</p><p><img src="https://s2.loli.net/2022/06/23/UW3sfhAR1TJ8gMF.png" alt="                                                                                                                                                                    "></p><p><img src="https://s2.loli.net/2022/06/23/6d9sawUcOxBAkVi.png" alt="image-20220623233336646"></p><p><img src="https://s2.loli.net/2022/06/23/uAkvy87fRLFltc2.png" alt="image-20220623233348177"></p><h6 id="链路模式"><a href="#链路模式" class="headerlink" title="链路模式"></a>链路模式</h6><p>使用<code>@SentinelResource</code></p><p><img src="https://s2.loli.net/2022/06/23/xuVckNpdFEjBY5A.png" alt="image-20220623235059181"></p><p>编辑配置文件</p><p><img src="https://s2.loli.net/2022/06/23/RsOx5BNTAiI3UhW.png" alt="image-20220623235243139"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">  <span class="attr">transport:</span></span><br><span class="line">    <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br><span class="line">  <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭 context 收敛</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/24/NmFIACqYUe78PWz.png" alt="image-20220624000212443"></p><p><img src="https://s2.loli.net/2022/06/23/3OEaRLc6dNVTuly.png" alt="image-20220623235944923"></p><p><img src="https://s2.loli.net/2022/06/24/Gxy5ZQYtAKc97q6.png" alt="image-20220624000010412"></p><h5 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h5><blockquote><p>快速失败：请求在某一时刻高于阈值，不接受新的请求，直接返回一个拒绝信息</p><p>Warm up：基于方案一，缓慢的将阈值提高到指定阈值，形成一个缓存保护</p><p>排队等待：将请求进入队列，在规定时间内如果可以执行则执行，超时则放弃</p></blockquote><h4 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h4><blockquote><p>Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。<br>CPU usage：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0）<br>平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。<br>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。<br>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</p></blockquote><p><img src="https://s2.loli.net/2022/06/24/rNRfcuPAmC2DHQo.png" alt="image-20220624000732211"></p><p><img src="https://s2.loli.net/2022/06/24/irjoQvXtsnf4ZCh.png" alt="image-20220624000759729"></p><h4 id="自定义限流和异常处理"><a href="#自定义限流和异常处理" class="headerlink" title="自定义限流和异常处理"></a>自定义限流和异常处理</h4><h5 id="自定义限流处理Controller类"><a href="#自定义限流处理Controller类" class="headerlink" title="自定义限流处理Controller类"></a>自定义限流处理Controller类</h5><h6 id="定义请求映射"><a href="#定义请求映射" class="headerlink" title="定义请求映射"></a>定义请求映射</h6><p><img src="https://s2.loli.net/2022/06/24/MZnNOuISmlq3eDK.png" alt="image-20220624144520582"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rateLimit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义通用的限流处理逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/customBlockHandler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">blockHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;限流成功&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="设定限流页面"><a href="#设定限流页面" class="headerlink" title="设定限流页面"></a>设定限流页面</h6><p><img src="https://s2.loli.net/2022/06/24/Acj6KwfDSWOTFdl.png" alt="image-20220624144643754"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">  <span class="attr">transport:</span></span><br><span class="line">    <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br><span class="line">  <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭 context 收敛</span></span><br><span class="line">  <span class="attr">block-page:</span> <span class="string">/rateLimit/customBlockHandler</span> <span class="comment"># 自定义限流映射页面</span></span><br></pre></td></tr></table></figure><h6 id="新增流控规则"><a href="#新增流控规则" class="headerlink" title="新增流控规则"></a>新增流控规则</h6><p><img src="https://s2.loli.net/2022/06/24/L75xUB1V8rEzRCc.png" alt="image-20220624144809125"></p><p><img src="https://s2.loli.net/2022/06/24/p9BjMvohrCAQIUt.png" alt="image-20220624144843223"></p><h5 id="自定义限流处理Handler类"><a href="#自定义限流处理Handler类" class="headerlink" title="自定义限流处理Handler类"></a>自定义限流处理Handler类</h5><h6 id="定义限流处理逻辑"><a href="#定义限流处理逻辑" class="headerlink" title="定义限流处理逻辑"></a>定义限流处理逻辑</h6><p><img src="https://s2.loli.net/2022/06/24/huKpDmYRAHy1elX.png" alt="image-20220624153735076"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;getBorrowByBook&quot;, blockHandler = &quot;handlerExceptionByMethod&quot;)</span><span class="comment">/*开启方法限流监控*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BookBorrowDetail <span class="title function_">getBorrowByBook</span><span class="params">(Long bid)</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(<span class="literal">null</span>,bid);</span><br><span class="line">    List&lt;User&gt; users = borrows.stream().map(borrow -&gt; userService.getUserById(borrow.getUid())).collect(Collectors.toList());</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(bid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookBorrowDetail</span>(users, book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BookBorrowDetail <span class="title function_">handlerExceptionByMethod</span><span class="params">(Long bid , BlockException exception)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookBorrowDetail</span>(Collections.emptyList(), <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/24/hGW1Lg9d348KQxr.png" alt="image-20220624153640058"></p><h4 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h4><h5 id="添加热点参数限流测试接口"><a href="#添加热点参数限流测试接口" class="headerlink" title="添加热点参数限流测试接口"></a>添加热点参数限流测试接口</h5><p><img src="https://s2.loli.net/2022/06/25/kDALKvEj9dxZVgX.png" alt="image-20220625121225907"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热点参数限流测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/param&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;param1&quot;, required = false)</span> String param1,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(value = &quot;param2&quot;, required = false)</span> String param2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;param1:&quot;</span> + param1 + <span class="string">&quot;,param2:&quot;</span> + param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/25/TpiLzJaXYr3ux2C.png" alt="image-20220625121536398"></p><h5 id="新增热点参数限流规则"><a href="#新增热点参数限流规则" class="headerlink" title="新增热点参数限流规则"></a>新增热点参数限流规则</h5><p><img src="https://s2.loli.net/2022/06/25/NnSPMpom4JbYDfH.png" alt="image-20220625121935694"></p><p><img src="https://s2.loli.net/2022/06/25/YQo7KE24lTuWPyt.png" alt="image-20220625122042115"></p><p><img src="https://s2.loli.net/2022/06/25/RfLT9oy57OuhJ6m.png" alt="image-20220625122055925"></p><h5 id="添加参数例外项"><a href="#添加参数例外项" class="headerlink" title="添加参数例外项"></a>添加参数例外项</h5><blockquote><p>对于请求的参数值进行限流操作</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/T3qWiGjwMVeZ5kD.png" alt="image-20220625123242671"></p><p><img src="https://s2.loli.net/2022/06/25/BNOwFJy9YSr6ogA.png" alt="image-20220625123057218"></p><p><img src="https://s2.loli.net/2022/06/25/5sMIcb43VDqgmhE.png" alt="image-20220625123421168"></p><p><img src="https://s2.loli.net/2022/06/25/O1dekB5HMynlArq.png" alt="image-20220625123433063"></p><h3 id="熔断和降级"><a href="#熔断和降级" class="headerlink" title="熔断和降级"></a>熔断和降级</h3><blockquote><p>Sentinel支持对服务间调用进行保护，对故障应用进行熔断操作</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/LDtTJqUhlMpS1Hk.jpg" alt="image-20220328124619289"></p><p><img src="https://s2.loli.net/2022/06/25/8Op3DWgnirFA4kS.png" alt="image-20220625201603610"></p><h4 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h4><p><img src="https://s2.loli.net/2022/06/25/UYZQlbnv93MzG2O.png" alt="image-20220625223846345"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/breaker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleBreakerController</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断策略：慢调用测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sleep&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断策略：异常比例和异常数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">exception</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="慢调用："><a href="#慢调用：" class="headerlink" title="慢调用："></a>慢调用：</h5><blockquote><p>如果一次请求的处理时间超过了指定的RT即最大响应时间，那么就被判定为<code>慢调用</code>，在一个统计时长内，如果请求数目大于最小请求数目，并且被判定为<code>慢调用</code>的请求比例已经超过阈值，将触发熔断。经过熔断时长之后，将会进入到半开状态进行试探</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/8l5gwXdMA6foyOq.png" alt="image-20220625222808135"></p><h5 id="异常比例："><a href="#异常比例：" class="headerlink" title="异常比例："></a>异常比例：</h5><blockquote><p>判断出现异常次数的比例</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/GFcOhS9RJIYiQHg.png" alt="image-20220625224826145"></p><h5 id="异常数："><a href="#异常数：" class="headerlink" title="异常数："></a>异常数：</h5><blockquote><p>判断出现异常的次数</p></blockquote><h4 id="使用RestTemplate"><a href="#使用RestTemplate" class="headerlink" title="使用RestTemplate"></a>使用RestTemplate</h4><h5 id="添加RestTemplate注册配置类并使用-SentinelRestTemplate包装"><a href="#添加RestTemplate注册配置类并使用-SentinelRestTemplate包装" class="headerlink" title="添加RestTemplate注册配置类并使用@SentinelRestTemplate包装"></a>添加RestTemplate注册配置类并使用@SentinelRestTemplate包装</h5><p><img src="https://s2.loli.net/2022/06/25/VuHWglk3FKBipoE.png" alt="image-20220625192729019"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@SentinelRestTemplate</span><span class="comment">/*使用@SentinelRestTemplate包装RestTemplate实例*/</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加CircleBreakerController类"><a href="#添加CircleBreakerController类" class="headerlink" title="添加CircleBreakerController类"></a>添加CircleBreakerController类</h5><p><img src="https://s2.loli.net/2022/06/25/7xuOJehMwiZcbR3.png" alt="image-20220625192637561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/breaker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleBreakerController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CircleBreakerController.class);</span><br><span class="line">    <span class="meta">@Resource(name = &quot;restTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fallback/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handleFallback&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long uid)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://user-service/user/&quot;</span> + uid, User.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fallbackException/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallbackException&quot;, fallback = &quot;handleFallbackException&quot;, exceptionsToIgnore = &#123;NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">fallbackException</span><span class="params">(<span class="meta">@PathVariable</span> Long uid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (uid == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uid == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + uid, User.class, uid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">handleFallBack</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(defaultUser, <span class="string">&quot;服务降级返回&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">handleFallBackException</span><span class="params">(Long uid, Throwable e)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;handleFallBackException uid:&#123;&#125;,throwable class:&#123;&#125;&quot;</span>, uid, e.getClass());</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">2L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(defaultUser, <span class="string">&quot;服务降级返回&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/25/rg1QdyOslLmx6W7.png" alt="image-20220625195026590"></p><p><img src="https://s2.loli.net/2022/06/25/Z4bShpd1YGamr9i.png" alt="image-20220625195103109"></p><h4 id="与Fegin结合使用"><a href="#与Fegin结合使用" class="headerlink" title="与Fegin结合使用"></a>与Fegin结合使用</h4><blockquote><p>Sentinel可以适配Feign组件，使用Feign来进行服务间调用时，可以使用它进行熔断</p></blockquote><h5 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件开启Sentinel对Feign支持"><a href="#配置文件开启Sentinel对Feign支持" class="headerlink" title="配置文件开启Sentinel对Feign支持"></a>配置文件开启Sentinel对Feign支持</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 打开Sentinel对feign的支持</span></span><br></pre></td></tr></table></figure><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><p><img src="https://s2.loli.net/2022/06/25/Z9bE5WrexDGaBsn.png" alt="image-20220625224937819"></p><h5 id="Feign异常处理实现"><a href="#Feign异常处理实现" class="headerlink" title="Feign异常处理实现"></a>Feign异常处理实现</h5><p><img src="https://s2.loli.net/2022/06/25/AsK1xvdoyQmTEYb.png" alt="image-20220625225041440"></p><h2 id="使用Nacos存储流控规则"><a href="#使用Nacos存储流控规则" class="headerlink" title="使用Nacos存储流控规则"></a>使用Nacos存储流控规则</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Alibaba（二）Sentinel&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba（二）Sentinel&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba（二）Sentine</summary>
      
    
    
    
    
    <category term="Spring Cloud Alibaba" scheme="http://example.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba（一） Nacos</title>
    <link href="http://example.com/2022/06/10/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%80%EF%BC%89Nacos/"/>
    <id>http://example.com/2022/06/10/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%80%EF%BC%89Nacos/</id>
    <published>2022-06-10T00:31:22.000Z</published>
    <updated>2022-07-31T15:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><h2 id="Spring-Cloud-Alibaba简介"><a href="#Spring-Cloud-Alibaba简介" class="headerlink" title="Spring Cloud Alibaba简介"></a>Spring Cloud Alibaba简介</h2><p>Spring Cloud Alibaba的官网：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/2021/zh-cn/">https://spring-cloud-alibaba-group.github.io/github-pages/2021/zh-cn/</a></p><p>Spring Cloud Alibaba致力于提供为微服务开发的一站式解决方案。Spring Cloud Alibaba包含开发分布式应用服务的必需组件，方便开发者通过Spring Cloud编程模型轻松使用这些组件来开发分布式应用服务。</p><p>基于Spring Cloud Alibaba，我们只需要添加一些注解和少量配置，就可以将Spring Cloud应用接入阿里分布式应用解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h2 id="Spring-Cloud-Alibaba功能"><a href="#Spring-Cloud-Alibaba功能" class="headerlink" title="Spring Cloud Alibaba功能"></a>Spring Cloud Alibaba功能</h2><ul><li><strong>服务限流降级</strong>：支持 WebServlet、WebFlux、OpenFeign、RestTemplate、Dubbo 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>Rpc服务</strong>：扩展 Spring Cloud 客户端 RestTemplate 和 OpenFeign，支持调用 Dubbo RPC 服务</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h1 id="Spring-Cloud-Alibaba-Nacos"><a href="#Spring-Cloud-Alibaba-Nacos" class="headerlink" title="Spring Cloud Alibaba Nacos"></a>Spring Cloud Alibaba Nacos</h1><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p>Nacos（Naming Configuration Service）是一款阿里巴巴开源的核心组件之一，可以作为注册中心和配置中心使用，是一个易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><h2 id="Spring-Cloud-Alibaba-Nacos-Discovery"><a href="#Spring-Cloud-Alibaba-Nacos-Discovery" class="headerlink" title="Spring Cloud Alibaba Nacos Discovery"></a>Spring Cloud Alibaba Nacos Discovery</h2><blockquote><p>使用 Spring Cloud Alibaba Nacos Discovery，可基于 Spring Cloud 的编程模型快速接入 Nacos 服务注册功能。</p></blockquote><p>本章即之后的章节项目将从微服务实战项目开始实现</p><h3 id="服务注册-发现：Nacos-Discovery"><a href="#服务注册-发现：Nacos-Discovery" class="headerlink" title="服务注册/发现：Nacos Discovery"></a>服务注册/发现：Nacos Discovery</h3><blockquote><p>传统手动的法师来给每一个客户端来配置所有服务提者的服务列表是一件非常困难的事，而且不利于服务的动态扩缩容。</p><p>Nacos Discovery帮助您将服务自动注册到Nacos服务端并且能够动态感知和刷新某个服务实例的服务列表。除此之外，Nacos Discovery 也将服务实例自身的一些元数据信息-例如 host，port, 健康检查URL，主页等内容注册到 Nacos</p></blockquote><h4 id="安装并运行Nacos"><a href="#安装并运行Nacos" class="headerlink" title="安装并运行Nacos"></a>安装并运行Nacos</h4><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>这里演示的是Release 1.4.3: <a href="https://github.com/alibaba/nacos/releases/tag/1.4.3">https://github.com/alibaba/nacos/releases/tag/1.4.3</a></p><p><img src="https://s2.loli.net/2022/06/08/8tACZwskQL5Heub.png" alt="image-20220608151022859"></p><h5 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h5><p><img src="https://s2.loli.net/2022/06/08/frndp5TaeJ7SOZD.png" alt="image-20220608151336675"></p><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><h6 id="方法一：直接运行bin目录下的startup-cmd"><a href="#方法一：直接运行bin目录下的startup-cmd" class="headerlink" title="方法一：直接运行bin目录下的startup.cmd"></a>方法一：直接运行<code>bin</code>目录下的<code>startup.cmd</code></h6><p><img src="https://s2.loli.net/2022/06/08/uWno7NgHjlAv1YQ.png" alt="image-20220608151621137"></p><h6 id="方法二：命令行方式启动"><a href="#方法二：命令行方式启动" class="headerlink" title="方法二：命令行方式启动"></a>方法二：命令行方式启动</h6><p><img src="https://s2.loli.net/2022/06/08/5DIOhpWov4kPBNL.png" alt="image-20220608152119250"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p>账号：nacos 密码：nacos</p><p><img src="https://s2.loli.net/2022/06/08/dl1P39XjEkAm5Ng.png" alt="image-20220608225920696"></p><p><img src="https://s2.loli.net/2022/06/08/OKRqkeBDhpwPNfL.png" alt="image-20220608225804004"></p><h5 id="IDEA运行Nacos"><a href="#IDEA运行Nacos" class="headerlink" title="IDEA运行Nacos"></a>IDEA运行Nacos</h5><h6 id="导入nacos文件夹"><a href="#导入nacos文件夹" class="headerlink" title="导入nacos文件夹"></a>导入nacos文件夹</h6><p><img src="https://s2.loli.net/2022/06/08/dDZYqMEV9tNWcmr.png" alt="image-20220608231129349"></p><h6 id="终端方式启动"><a href="#终端方式启动" class="headerlink" title="终端方式启动"></a>终端方式启动</h6><p><img src="https://s2.loli.net/2022/06/08/wzX2b8VWQRykMfq.png" alt="image-20220608231419442"></p><h6 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h6><p><img src="https://s2.loli.net/2022/06/08/fAzdYW28sNLPMpe.png" alt="image-20220608232132712"></p><p><img src="https://s2.loli.net/2022/06/08/BVs8lSHF1ZD2dXL.png" alt="image-20220608233248311"></p><h6 id="通过配置启动"><a href="#通过配置启动" class="headerlink" title="通过配置启动"></a>通过配置启动</h6><p><img src="https://s2.loli.net/2022/06/08/yRVKWxcu7sZU2kz.png" alt="image-20220608232058033"></p><p><img src="https://s2.loli.net/2022/06/08/r6iHNjoceKGankV.png" alt="image-20220608233607707"></p><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><h5 id="父项目添加配置"><a href="#父项目添加配置" class="headerlink" title="父项目添加配置"></a>父项目添加配置</h5><p><img src="https://s2.loli.net/2022/06/11/LIl8gtkdGxURpBi.png" alt="image-20220611020306806"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子项目添加配置"><a href="#子项目添加配置" class="headerlink" title="子项目添加配置"></a>子项目添加配置</h5><p><img src="https://s2.loli.net/2022/06/11/lRvphiuBSd7wfaY.png" alt="image-20220611020723174"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p><img src="https://s2.loli.net/2022/06/11/ALlvrDuC5mVQgMW.png" alt="image-20220611021231105"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 配置Nacos地址</span></span><br></pre></td></tr></table></figure><p>其他微服务同样配置</p><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p><img src="https://s2.loli.net/2022/06/11/lnIpxQ9JEayjDvq.png" alt="image-20220611021949207"></p><p><img src="https://s2.loli.net/2022/06/11/NnVkXPtflOQUWYd.png" alt="image-20220611021927620"></p><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><p>基于OpenFeign实现服务发现调用以及负载均衡</p><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><p><img src="https://s2.loli.net/2022/06/11/yNjLUf183Eucp6n.png" alt="image-20220611022550859"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="添加服务绑定接口和服务降级实现类"><a href="#添加服务绑定接口和服务降级实现类" class="headerlink" title="添加服务绑定接口和服务降级实现类"></a>添加服务绑定接口和服务降级实现类</h5><p><img src="https://s2.loli.net/2022/06/11/OEimnYqFLwelMZ7.png" alt="image-20220611024104034"></p><h5 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h5><p><img src="https://s2.loli.net/2022/06/11/Mxo1qrJZSNjtK4V.png" alt="image-20220611130833755"></p><p>​                       <img src="https://s2.loli.net/2022/06/12/wj6JG7fOsYSLIXU.png" alt="imagep><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h5 id="编辑配置-1"><a href="#编辑配置-1" class="headerlink" title="编辑配置"></a>编辑配置</h5><p><img src="https://s2.loli.net/2022/06/12/EvKuoxNLlVwqRiy.png"></p><h5 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h5><p><img src="https://s2.loli.net/2022/06/12/lTUnKwx1SduasmJ.png" alt="image-20220612003248596"></p><h4 id="集群分区"><a href="#集群分区" class="headerlink" title="集群分区"></a>集群分区</h4><h5 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h5><p><img src="https://s2.loli.net/2022/06/12/EhunzVocyP6M1CS.png" alt="image-20220612124042870"></p><h5 id="编辑配置-2"><a href="#编辑配置-2" class="headerlink" title="编辑配置"></a>编辑配置</h5><p><img src="https://s2.loli.net/2022/06/12/YxV1I2DsBoEF4hl.png" alt="image-20220612124226242"></p><h5 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h5><p><img src="https://s2.loli.net/2022/06/12/ns4bIiGj3W5ydVu.png" alt="image-20220612124304898"></p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220612124621418.png" alt="image-20220612124621418"></p><p><img src="https://s2.loli.net/2022/06/12/UGdaPulTBXkr3Jt.png" alt="image-20220612124751157"></p><p>可以看到远程调用会优先调用同区域的服务</p><h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><h5 id="新建配置"><a href="#新建配置" class="headerlink" title="新建配置"></a>新建配置</h5><p><img src="https://s2.loli.net/2022/06/12/Ry2bVgdP1IoFZar.png" alt="image-20220612130208791"></p><p><img src="https://s2.loli.net/2022/06/12/wpOtfNlVsoGCrRd.png" alt="image-20220612130406018"></p><h5 id="模块导入依赖"><a href="#模块导入依赖" class="headerlink" title="模块导入依赖"></a>模块导入依赖</h5><p><img src="https://s2.loli.net/2022/06/12/JVXhSTP1DFaOd7G.png" alt="image-20220612130732290"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="添加bootstrap-yml文件"><a href="#添加bootstrap-yml文件" class="headerlink" title="添加bootstrap.yml文件"></a>添加bootstrap.yml文件</h5><p><img src="https://s2.loli.net/2022/06/12/2ZYdKlxQmgjJtE4.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 配置文件后缀名</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 配置中心服务器地址</span></span><br></pre></td></tr></table></figure><h5 id="动态配置刷新"><a href="#动态配置刷新" class="headerlink" title="动态配置刷新"></a>动态配置刷新</h5><p><img src="https://s2.loli.net/2022/06/12/OqbusFDZzSiaved.png" alt="image-20220612131405795"></p><h6 id="添加测试接口"><a href="#添加测试接口" class="headerlink" title="添加测试接口"></a>添加测试接口</h6><blockquote><p>@RefreshScope开启配置热更新</p></blockquote><p><img src="https://s2.loli.net/2022/06/12/csGIkjSia1y6dxQ.png" alt="image-20220612131815556"></p><h6 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h6><p><img src="https://s2.loli.net/2022/06/12/Fob8w4xCkHZfrYR.png" alt="image-20220612132921114"></p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><h5 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h5><p><img src="https://s2.loli.net/2022/06/12/NbDjJcxY6zTvPRA.png" alt="image-20220612160137591"></p><p><img src="https://s2.loli.net/2022/06/12/SinjsVObu3Y4wBN.png" alt="image-20220612160204606"></p><p><img src="https://s2.loli.net/2022/06/12/fl7od9eZ2JvtEB8.png" alt="image-20220612160223591"></p><h5 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p><img src="https://s2.loli.net/2022/06/12/8zqR4YNVnatEwhL.png" alt="image-20220612160411772"></p><p><img src="https://s2.loli.net/2022/06/12/7SYlMxaL4zGXkWZ.png" alt="image-20220612160925156"></p><h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><h5 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h5><p><img src="https://s2.loli.net/2022/07/31/eXbVgzS5jcG3Npt.png" alt="image-20220622134121856"></p><h5 id="Docker拉取Nacos镜像"><a href="#Docker拉取Nacos镜像" class="headerlink" title="Docker拉取Nacos镜像"></a>Docker拉取Nacos镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/CzrEQtHaGgqYVKf.png" alt="image-20220725133226976"></p><h5 id="导入镜像数据库"><a href="#导入镜像数据库" class="headerlink" title="导入镜像数据库"></a>导入镜像数据库</h5><p>新建数据库</p><p><img src="https://s2.loli.net/2022/07/25/3Y6ehc1SO4yNW59.png" alt="image-20220725154919101"></p><p>运行SQL文件</p><p><img src="https://s2.loli.net/2022/07/25/xwv8GmOYiCqf2er.png" alt="image-20220725154956057"></p><p><img src="https://s2.loli.net/2022/07/25/enTvLX4qCs6olWp.png" alt="image-20220725155021863"></p><p>创建用户</p><p><img src="https://s2.loli.net/2022/07/25/QsdtqWUFN1Agl72.png" alt="image-20220725155140678"></p><p>配置角色权限</p><p>  <img src="https://s2.loli.net/2022/07/25/MaQ792tduGOk4EL.png" alt="image-20220725155241752"></p><h5 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h5><blockquote><p>Docker集群部署Nacos时要注意，创建的Nacos容器填写的ip都是外部ip，但是创建的网段却是docker内部的网段，因此 我们需要只能在同一网段的ip</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line">docker network create --driver bridge --subnet=172.19.0.0/16 --gateway=172.19.0.1 mynetwork</span><br><span class="line">docker network inspect mynetwork</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/1pXnxgCGFUd9WsS.png" alt="image-20220725222721807"></p><p><img src="https://s2.loli.net/2022/07/26/MPa7SzwO2dHon8K.png" alt="image-20220726134000193"></p><h5 id="创建Nacos容器集群"><a href="#创建Nacos容器集群" class="headerlink" title="创建Nacos容器集群"></a>创建Nacos容器集群</h5><p>my-nacos1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_SERVER_IP=172.19.0.2 \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=&quot;172.19.0.2:8848 172.19.0.3:8848&quot; \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=服务器公网ip \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=13851176590++ \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--network=mynetwork \</span><br><span class="line">--name my-nacos1 \</span><br><span class="line">--ip 172.19.0.2 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p>my-nacos2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_SERVER_IP=172.19.0.3 \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=&quot;172.19.0.2:8848 172.19.0.3:8848&quot; \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=服务器公网ip \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=13851176590++ \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-p 8849:8848 \</span><br><span class="line">--network=mynetwork \</span><br><span class="line">--name my-nacos2 \</span><br><span class="line">--ip 172.19.0.3 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/31/Y3oWri2ygU6B7JV.png" alt="image-20220731222759572"></p><p>访问my-nacos1地址：http://{ip}:8848/nacos/index.html</p><p>访问my-nacos2地址：http://{ip}:8849/nacos/index.html</p><p>输入默认的账户密码nacos登录成功则说明集群部署成功</p><p><img src="https://s2.loli.net/2022/07/25/fSAHghq96xmItYj.png" alt="image-20220725162901216"></p><p><img src="https://s2.loli.net/2022/07/25/1exnlPqh4GCmr9i.png" alt="image-20220725162936386"></p><h5 id="使用Nginx反向代理Nacos集群"><a href="#使用Nginx反向代理Nacos集群" class="headerlink" title="使用Nginx反向代理Nacos集群"></a>使用Nginx反向代理Nacos集群</h5><p>拉取nginx镜像并创建nginx容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/pGgndqcEivYKoyM.png" alt="image-20220627213342836"></p><p>将容器中的nginx配置文件拷贝到宿主机/usr/local/nginx/conf目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx/conf/nginx.conf</span><br><span class="line">docker cp 53cf4d545507:/etc/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>停止并删除之前的nginx容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop </span><br><span class="line">docker rm </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/DatLuxfVb12Bgeo.png" alt="image-20220725164656491"></p><p>修改nginx.conf配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    upstream cluster&#123;</span><br><span class="line">        server 172.19.0.2:8848;</span><br><span class="line">        server 172.19.0.3:8848;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://cluster;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据挂载运行docker容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx --network=mynetwork -v /usr/local/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro -p 8080:8080 -d nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/31/pCx4qLs65zT3PoW.png" alt="image-20220731225828171"></p><p>访问：http://{ip}:8080/nacos/</p><p><img src="https://s2.loli.net/2022/07/31/rJb2SFCVuaqkP18.png" alt="image-20220731225909334"></p><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    discovery:</span><br><span class="line">      server-addr: &#123;ip&#125;:8080</span><br></pre></td></tr></table></figure><p>运行服务</p><p><img src="https://s2.loli.net/2022/07/31/Qd7fkcwBaPmTAxF.png" alt="image-20220731230040255"></p><p><img src="https://s2.loli.net/2022/07/31/m3Dkc8UijoB7uVz.png" alt="image-20220731230103903"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Alibaba&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba&quot;&gt;&lt;/a&gt;Spring Cloud Alibaba&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Spring Cloud Alibaba" scheme="http://example.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（八） Config</title>
    <link href="http://example.com/2022/06/06/08.Spring%20Cloud%EF%BC%88%E5%85%AB%EF%BC%89Config/"/>
    <id>http://example.com/2022/06/06/08.Spring%20Cloud%EF%BC%88%E5%85%AB%EF%BC%89Config/</id>
    <published>2022-06-06T12:32:54.000Z</published>
    <updated>2022-06-24T01:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><p>对于传统的单体应用，使用配置文件管理所有配置。而在微服务架构中，微服务的配置管理一般有以下需求：</p><ul><li>集中管理配置</li><li>环境不同，配置不同</li><li>运行时可动态调整</li><li>配置修改后自动更新</li></ul><p>因此对于微服务架构而言，一个通用的配置管理机制必不可少，常见的做法时使用配置服务器管理配置。</p><h2 id="Spring-Cloud-Config简介"><a href="#Spring-Cloud-Config简介" class="headerlink" title="Spring Cloud Config简介"></a>Spring Cloud Config简介</h2><p>Spring Cloud Config为分布式系统提供了集中化的外部配置支持，它分为服务端和客户端两个部分即Config Server和Config Client两部分。由于Config Server和Config Client实现了对Spring Environment和PropertySource抽象的映射， 因此，Spring Cloud Config适合Spring应用程序。</p><p>Config Server是一个可横向扩展、集中式的配置服务器即分布式配置中心，它作为一个独立应用，用于集中管理应用程序各个环境下的配置，它可以从配置仓库获取配置信息并提供给客户端使用。</p><p>Config Client是Config Server的客户端，通过请求配置中心来获取配置信息，在启动时加载配置并缓存以提高性能。</p><p>Spring Cloud Config的配置中心默认采用Git来存储配置信息，因此可以方便地实现对配置的版本控制与内容审计。</p><p><img src="https://s2.loli.net/2022/06/06/hz19xyFDBeJOVRL.png" alt="image-20220606232213855"></p><h2 id="Git仓库准备配置信息"><a href="#Git仓库准备配置信息" class="headerlink" title="Git仓库准备配置信息"></a>Git仓库准备配置信息</h2><h3 id="新建repo"><a href="#新建repo" class="headerlink" title="新建repo"></a>新建repo</h3><p><img src="https://s2.loli.net/2022/06/07/oEt9WpbLNP2QmXc.png" alt="image-20220607001325420"></p><h3 id="导入本地"><a href="#导入本地" class="headerlink" title="导入本地"></a>导入本地</h3><p><img src="https://s2.loli.net/2022/06/06/3xurKjNWiDcIAE6.png" alt="image-20220606235624177"></p><p><img src="https://s2.loli.net/2022/06/07/dfiIQVpuzoYmlPe.png" alt="image-20220607001406544"></p><h3 id="创建borrowservice-dev-yml文件"><a href="#创建borrowservice-dev-yml文件" class="headerlink" title="创建borrowservice-dev.yml文件"></a>创建borrowservice-dev.yml文件</h3><p><img src="https://s2.loli.net/2022/06/06/4tPNfGJ7LTDAxz3.png" alt="image-20220606235609117"></p><h3 id="上传Gitee"><a href="#上传Gitee" class="headerlink" title="上传Gitee"></a>上传Gitee</h3><p><img src="https://s2.loli.net/2022/06/06/HsFrAyLu23Tf7Zh.png" alt="image-20220606235723615"></p><h2 id="创建Config服务端"><a href="#创建Config服务端" class="headerlink" title="创建Config服务端"></a>创建Config服务端</h2><h3 id="创建config-server模块"><a href="#创建config-server模块" class="headerlink" title="创建config-server模块"></a>创建config-server模块</h3><p><img src="https://s2.loli.net/2022/06/06/qb2T7JnK8Pi4EzB.png" alt="image-20220606233511777"></p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8601</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span> <span class="comment">#配置存储配置信息的Git仓库</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/YuanJianWei/springcloud-config.git</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">YuanJianWei</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">13851176590</span><span class="string">++</span></span><br><span class="line">          <span class="attr">default-label:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">clone-on-start:</span> <span class="literal">true</span> <span class="comment">#开启启动时直接从git获取配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   <span class="string">http://root:123456@replica2:8006/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span><span class="comment">/*启用配置中心功能*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取配置信息"><a href="#获取配置信息" class="headerlink" title="获取配置信息"></a>获取配置信息</h3><h4 id="获取配置文件信息的访问格式"><a href="#获取配置文件信息的访问格式" class="headerlink" title="获取配置文件信息的访问格式"></a>获取配置文件信息的访问格式</h4><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取配置信息</span></span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;</span><br><span class="line"><span class="comment"># 获取配置文件信息</span></span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br></pre></td></tr></table></figure></blockquote><p>访问<a href="http://localhost:8601/master/borrowservice-dev.yml">http://localhost:8601/master/borrowservice-dev.yml</a></p><p><img src="https://s2.loli.net/2022/06/07/xXTRL7leICF1zah.png" alt="image-20220607001222532"></p><h2 id="创建Config客户端"><a href="#创建Config客户端" class="headerlink" title="创建Config客户端"></a>创建Config客户端</h2><p><img src="https://s2.loli.net/2022/06/07/rzEuANgdV6KZf7b.png" alt="image-20220607002521755"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置文件bootstrap-yml"><a href="#添加配置文件bootstrap-yml" class="headerlink" title="添加配置文件bootstrap.yml"></a>添加配置文件bootstrap.yml</h3><p><img src="https://s2.loli.net/2022/06/07/9ZMSb4OG5nk8FH2.png" alt="image-20220607002856093"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">borrowservice</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8601</span> <span class="comment">#配置服务器地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">prod</span> <span class="comment">#环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/07/FnTrGmKMAlUNBsO.png" alt="image-20220607003453586"></p><h2 id="配置中心添加安全认证"><a href="#配置中心添加安全认证" class="headerlink" title="配置中心添加安全认证"></a>配置中心添加安全认证</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Config&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Config&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Config&quot;&gt;&lt;/a&gt;Spring Cloud Config&lt;/h1&gt;&lt;p&gt;对于</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（七） Gateway</title>
    <link href="http://example.com/2022/06/05/07.Spring%20Cloud%EF%BC%88%E4%B8%83%EF%BC%89Gateway/"/>
    <id>http://example.com/2022/06/05/07.Spring%20Cloud%EF%BC%88%E4%B8%83%EF%BC%89Gateway/</id>
    <published>2022-06-05T12:32:54.000Z</published>
    <updated>2022-06-06T02:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><h2 id="Gateway简介"><a href="#Gateway简介" class="headerlink" title="Gateway简介"></a>Gateway简介</h2><p>Gateway为SpringBoot应用提供了API网关支持，具有强大的智能路由与过滤器功能，是Spring Cloud的第二代网关组件。</p><blockquote><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5.0、Spring Boot 2和Project Reactor等技术。</p><p>Gateway旨在提供一种简单有效的方式来对API进行路由以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p><p>Gateway基于Spring 5.0的新特性WebFlux进行开发，底层网络通信框架使用的是Netty，所以其吞吐量高、性能强劲。</p></blockquote><h3 id="Gateway特性"><a href="#Gateway特性" class="headerlink" title="Gateway特性"></a>Gateway特性</h3><p>Spring Cloud Gateway具有如下特性：</p><ul><li>基于基于Spring 5、Spring Boot 2和Project Reactor进行构建；</li><li>动态路由：能够匹配任何请求属性；</li><li>集成Spring Cloud服务发现组件自动转发请求，默认集成Ribbon做负载均衡，默认集成Hystrix的断路器功能网关进行保护；</li><li>易于编写Predicate（断言）和Filter（过滤器）并对路由指定</li><li>请求限流，支持路径重写</li><li>性能强劲，功能强大，设计优雅，易于扩展。</li></ul><h3 id="Gateway核心概念"><a href="#Gateway核心概念" class="headerlink" title="Gateway核心概念"></a>Gateway核心概念</h3><h4 id="Route（路由）"><a href="#Route（路由）" class="headerlink" title="Route（路由）"></a>Route（路由）</h4><p>路由是构建网关的基本模块，它由ID、目标URL、一系列的断言和过滤器组成。如果断言为true，则匹配该路由。</p><h4 id="Predicate（断言）"><a href="#Predicate（断言）" class="headerlink" title="Predicate（断言）"></a>Predicate（断言）</h4><p>Java 8的Function Predicate。输入类型是Spring框架中ServerWebExchange。开发人员可以匹配HTTP请求中的所有内容，例如请求头或请求参数。如果请求与断言相匹配，则进行路由。</p><h4 id="Filter（过滤器）"><a href="#Filter（过滤器）" class="headerlink" title="Filter（过滤器）"></a>Filter（过滤器）</h4><p>指的是Spring框架中GatewayFilter的实例。使用过滤器，可以在请求被路由前后对请求以及响应数据进行修改，同时可以利用Filter实现授权、访问日志记录、接口耗时记录等功能。</p><h3 id="Spring-Cloud架构图"><a href="#Spring-Cloud架构图" class="headerlink" title="Spring Cloud架构图"></a>Spring Cloud架构图</h3><p><img src="https://s2.loli.net/2022/06/06/T2XrzdfAtqo9K7b.webp" alt="img"></p><p>Gateway  Client发送请求给Spring Cloud Gateway，Gateway Handler Mapping会判断请求路径是否匹配路由的配置，如果匹配则会进入Gateway Web Handler，Gateway Web Handler会读取路由上所有配置的过滤器，然后将该请求交给过滤器处理，最后转发到路由配置的微服务上。</p><h2 id="整合Gateway网关服务"><a href="#整合Gateway网关服务" class="headerlink" title="整合Gateway网关服务"></a>整合Gateway网关服务</h2><h3 id="创建api-gateway模块"><a href="#创建api-gateway模块" class="headerlink" title="创建api-gateway模块"></a>创建api-gateway模块</h3><p><img src="https://s2.loli.net/2022/06/05/qDz7pj6vEbOulfM.png" alt="image-20220605220825979"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p><img src="https://s2.loli.net/2022/06/05/Yx1iOJq3PbXy4rm.png" alt="image-20220605220610948"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8501</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: api-gateway</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   http:<span class="comment">//root:123456@replica2:8006/eureka</span></span><br></pre></td></tr></table></figure><h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置路由-两种不同的方式"><a href="#配置路由-两种不同的方式" class="headerlink" title="配置路由(两种不同的方式)"></a>配置路由(两种不同的方式)</h3><p>Gateway提供了两种不同方式用于路由的配置，一种是通过yml文件来配置，另一种是通过Java Bean来配置。</p><h4 id="使用yml文件配置"><a href="#使用yml文件配置" class="headerlink" title="使用yml文件配置"></a>使用yml文件配置</h4><h5 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h5><p><img src="https://s2.loli.net/2022/06/05/r4kbVZfiJ5tU3QH.png" alt="image-20220605224452034"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8501</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span> <span class="comment"># 配置路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">borrow-service</span> <span class="comment"># 路由ID</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://borrow-service</span> <span class="comment"># 匹配后路由地址 lb表示负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言，路径相匹配进行路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/borrow/**</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   <span class="string">http://root:123456@replica2:8006/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/05/Og8xt27sBWCD9Sq.png" alt="image-20220605232411324"></p><h4 id="使用Java-Bean配置"><a href="#使用Java-Bean配置" class="headerlink" title="使用Java Bean配置"></a>使用Java Bean配置</h4><p><img src="https://s2.loli.net/2022/06/05/ioLBp79xsMtrvnE.png" alt="image-20220605232458457"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(r -&gt; r.path(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://localhost:8101/user/**&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/05/t2CS3Wq19cXrMOA.png" alt="image-20220605232523491"></p><h3 id="路由过滤器"><a href="#路由过滤器" class="headerlink" title="路由过滤器"></a>路由过滤器</h3><h4 id="给请求添加请求头的过滤器"><a href="#给请求添加请求头的过滤器" class="headerlink" title="给请求添加请求头的过滤器"></a>给请求添加请求头的过滤器</h4><p><img src="https://s2.loli.net/2022/06/06/NzZf2bdg94rekMy.png" alt="image-20220606094937543"></p><h4 id="在BookController获取请求头并输出"><a href="#在BookController获取请求头并输出" class="headerlink" title="在BookController获取请求头并输出"></a>在BookController获取请求头并输出</h4><p><img src="https://s2.loli.net/2022/06/06/gmV7Ys18ARCIEiX.png" alt="image-20220606095201696"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://s2.loli.net/2022/06/06/YoedDxJR1I9Av3M.png" alt="image-20220606095224169"></p><p>控制打印</p><p><img src="https://s2.loli.net/2022/06/06/2I1H3YFoqgMpfQO.png" alt="image-20220606095302361"></p><h3 id="全局路由配置器"><a href="#全局路由配置器" class="headerlink" title="全局路由配置器"></a>全局路由配置器</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Gateway&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Gateway&quot;&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（六） OpenFegin</title>
    <link href="http://example.com/2022/06/05/06.Spring%20Cloud%EF%BC%88%E5%85%AD%EF%BC%89OpenFegin/"/>
    <id>http://example.com/2022/06/05/06.Spring%20Cloud%EF%BC%88%E5%85%AD%EF%BC%89OpenFegin/</id>
    <published>2022-06-04T17:55:21.000Z</published>
    <updated>2022-06-07T14:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-OpenFegin"><a href="#Spring-Cloud-OpenFegin" class="headerlink" title="Spring Cloud OpenFegin"></a>Spring Cloud OpenFegin</h1><p>RestTemplate可以实现REST API的远程调用，它的请求URL使用字符串拼接的方式，在应对URL中存在多个参数的情况时，这种方式会变得非常低效并且难以维护。</p><h2 id="Spring-Cloud-OpenFegin简介"><a href="#Spring-Cloud-OpenFegin简介" class="headerlink" title="Spring Cloud OpenFegin简介"></a>Spring Cloud OpenFegin简介</h2><p> Spring Cloud OpenFegin是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能。</p><blockquote><p>Fegin是声明式的服务调用工具，我们只需要创建一个接口并用注解的方式来配置它，就可以实现对某个服务接口的调用，简化了直接使用RestTemplate来调用服务接口的开发量。Fegin具备可插拔的注解支持，同时支持Fegin注解、JAX-RS注解及SpringMVC注解。</p></blockquote><h3 id="Fegin和OpenFegin的区别"><a href="#Fegin和OpenFegin的区别" class="headerlink" title="Fegin和OpenFegin的区别"></a>Fegin和OpenFegin的区别</h3><h4 id="Fegin"><a href="#Fegin" class="headerlink" title="Fegin"></a>Fegin</h4><p>Fegin是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端，Fegin内置Ribbon用来做客户端负载均衡，去调用服务注册中心的服务。</p><p>Fegin的使用方式：使用Fegin的注解定义接口，调用这个接口就可以调用服务注册中心的服务。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="OpenFegin"><a href="#OpenFegin" class="headerlink" title="OpenFegin"></a>OpenFegin</h4><p>OpenFegin是Spring Cloud在Fegin的基础上支持了SpringMVC的注解，如@RequestMapping等。OpenFegin的@FeginClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类。实现类中做负载均衡并调用其他服务。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="整合OpenFeign实现负载均衡"><a href="#整合OpenFeign实现负载均衡" class="headerlink" title="整合OpenFeign实现负载均衡"></a>整合OpenFeign实现负载均衡</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动类添加-EnableFeignClients注解"><a href="#启动类添加-EnableFeignClients注解" class="headerlink" title="启动类添加@EnableFeignClients注解"></a>启动类添加@EnableFeignClients注解</h3><p><img src="https://s2.loli.net/2022/06/05/UDdStf3Qbz69eVZ.png" alt="image-20220605132039642"></p><h3 id="添加UserService接口完成对user-service服务的接口绑定"><a href="#添加UserService接口完成对user-service服务的接口绑定" class="headerlink" title="添加UserService接口完成对user-service服务的接口绑定"></a>添加UserService接口完成对user-service服务的接口绑定</h3><p><img src="https://s2.loli.net/2022/06/05/3dugCIv5k6wLcKN.png" alt="image-20220605132646831"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span><span class="comment">/*实现Feign客户端,value接口调用的服务名称*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，添加BookService接口完成对于book-service服务的接口绑定</p><p><img src="https://s2.loli.net/2022/06/05/14xQfTnyHFwRSvX.png" alt="image-20220605132956580"></p><h3 id="BorrowServiceImp调用UserService实现服务调用"><a href="#BorrowServiceImp调用UserService实现服务调用" class="headerlink" title="BorrowServiceImp调用UserService实现服务调用"></a>BorrowServiceImp调用UserService实现服务调用</h3><p><img src="https://s2.loli.net/2022/06/05/6whiYtgEzWMUjVy.png" alt="image-20220605132853381"></p><p><img src="https://s2.loli.net/2022/06/05/tMSd57zToAQI391.png" alt="image-20220605133038830"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BorrowDetail <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid, bid);</span><br><span class="line">    List&lt;User&gt; users =  borrows.stream().map(borrow -&gt; userService.getUserById(borrow.getUid())).collect(Collectors.toList());</span><br><span class="line">    List&lt;Book&gt; books =  borrows.stream().map(borrow -&gt; bookService.getBookById(borrow.getBid())).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BorrowDetail</span>(users, books);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在user-service中的UserController打印日志"><a href="#在user-service中的UserController打印日志" class="headerlink" title="在user-service中的UserController打印日志"></a>在user-service中的UserController打印日志</h3><p><img src="https://s2.loli.net/2022/06/05/IPkiFTsR1YGBAcN.png" alt="image-20220605133900846"></p><h3 id="验证负载均衡"><a href="#验证负载均衡" class="headerlink" title="验证负载均衡"></a>验证负载均衡</h3><p><img src="https://s2.loli.net/2022/06/05/GPbwXkYHrVo8afR.png" alt="image-20220605134255080"></p><p><img src="https://s2.loli.net/2022/06/05/aK4OpjqlvUDEI1c.png" alt="image-20220605134410516"></p><h2 id="整合OpenFeign实现服务降级"><a href="#整合OpenFeign实现服务降级" class="headerlink" title="整合OpenFeign实现服务降级"></a>整合OpenFeign实现服务降级</h2><blockquote><p>OpenFegin客户端定义的接口添加一个服务降级处理的实现类即可实现OpenFegin的服务降级</p></blockquote><h3 id="添加服务降级实现类UserFallBackService"><a href="#添加服务降级实现类UserFallBackService" class="headerlink" title="添加服务降级实现类UserFallBackService"></a>添加服务降级实现类UserFallBackService</h3><p><img src="https://s2.loli.net/2022/06/05/A7yQXgGbRl3mPBO.png" alt="image-20220605151559717"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookFallBackService</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultTitle&quot;</span>, <span class="string">&quot;defaultDesc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置UserService接口服务降级处理类"><a href="#设置UserService接口服务降级处理类" class="headerlink" title="设置UserService接口服务降级处理类"></a>设置UserService接口服务降级处理类</h3><p><img src="https://s2.loli.net/2022/06/05/hgX3uTofsO7zU4Z.png" alt="image-20220605165649334"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;book-service&quot;, fallback = BookFallBackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getBookById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件开启Fegin的Hystrix功能"><a href="#配置文件开启Fegin的Hystrix功能" class="headerlink" title="配置文件开启Fegin的Hystrix功能"></a>配置文件开启Fegin的Hystrix功能</h3><p><img src="https://s2.loli.net/2022/06/05/wAng5WdMf29LQsP.png" alt="image-20220605165946830"></p><p><img src="https://s2.loli.net/2022/06/05/VqtCTQgKr6h1S3d.png" alt="image-20220605170248889"></p><h2 id="整合OpenFegin实现日志打印"><a href="#整合OpenFegin实现日志打印" class="headerlink" title="整合OpenFegin实现日志打印"></a>整合OpenFegin实现日志打印</h2><blockquote><p>Fegin提供了日志打印功能，通过配置来调整日志级别，从而理解Fegin中HTTP请求的细节</p></blockquote><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>NONE：默认的，不显示任何日志</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</li></ul><h3 id="通过配置类开启日志功能"><a href="#通过配置类开启日志功能" class="headerlink" title="通过配置类开启日志功能"></a>通过配置类开启日志功能</h3><p><img src="https://s2.loli.net/2022/06/05/CxnPemj5FwgDbLT.png" alt="image-20220605171557899"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeginConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件开启日志的Fegin客户端"><a href="#配置文件开启日志的Fegin客户端" class="headerlink" title="配置文件开启日志的Fegin客户端"></a>配置文件开启日志的Fegin客户端</h3><p>设置UserService和BookService的日志级别为debug</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.test.service.UserService:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">com.test.service.BookService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>调用<a href="http://localhost:8301/borrow?uid=1&amp;bid=1%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A5%E5%BF%97%E5%A6%82%E4%B8%8B">http://localhost:8301/borrow?uid=1&amp;bid=1进行测试，控制台日志如下</a></p><p><img src="https://s2.loli.net/2022/06/05/kJbqoUnj5z2wExF.png" alt="image-20220605172131544"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-OpenFegin&quot;&gt;&lt;a href=&quot;#Spring-Cloud-OpenFegin&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud OpenFegin&quot;&gt;&lt;/a&gt;Spring Cloud OpenFeg</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（五） Hystrix</title>
    <link href="http://example.com/2022/06/04/05.Spring%20Cloud%EF%BC%88%E4%BA%94%EF%BC%89Hystrix/"/>
    <id>http://example.com/2022/06/04/05.Spring%20Cloud%EF%BC%88%E4%BA%94%EF%BC%89Hystrix/</id>
    <published>2022-06-04T07:16:22.000Z</published>
    <updated>2022-06-05T12:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h1><h2 id="Spring-Cloud-Hystrix简介"><a href="#Spring-Cloud-Hystrix简介" class="headerlink" title="Spring Cloud Hystrix简介"></a>Spring Cloud Hystrix简介</h2><p>Spring Cloud Hystrix是Spring Cloud Netflix子项目的核心组件之一，是一个用于处理分布式系统的延迟和容错的开源库，具有服务容错和线程隔离等一系列服务保护功能。</p><p>在微服务架构中，服务与服务之间通过远程调用的方式实现通信，一旦某个被调用的服务发生故障，其依赖服务也会发生故障，此时就会发生故障的蔓延，导致分布式的系统雪崩和瘫痪。</p><p><img src="https://s2.loli.net/2022/06/04/TanKqHZ7Ak9pi3U.jpg" alt="image-20220324141706946"></p><p>由于多种因素，例如网络响应、系统故障、硬件问题等，服务发生故障的情况是无法避免的。因此我们需要一个应对服务容错保护的解决方案。</p><p>Spring Cloud Hystrix实现了断路器模式，它相当于一种开关控制，通过断路器的故障监控即保险丝，当某个服务发生故障时，通过断路器监控，给服务的调用方返回一个服务于其的，可处理的备用响应响应（FallBack），而不是长时间的等待或者抛出异常，避免联级故障，这样就不会使得调用方由于长时间得不到响应而占用线程从而导致故障的蔓延，提高了分布式系统的弹性。</p><p><img src="https://s2.loli.net/2022/06/04/yOjCxY7dLbapvl3.webp" alt="img"></p><p>Hystrix具备服务降级、服务熔断、服务限流、线程隔离、请求缓存、请求合并及服务监控等强大的功能。</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><h3 id="服务降级定义"><a href="#服务降级定义" class="headerlink" title="服务降级定义"></a>服务降级定义</h3><p>服务降级：当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或作简单处理，从而释放服务器资源以保证核心业务正常运作或高效运作，即服务降级提供一个补救措施正常响应给请求者，保证服务可用的前提下，提高系统的可用性和安全性。如果在并发高峰期不做服务降级处理，不仅会影响整体服务的性能，甚至会导致宕机造成服务不可用。</p><h3 id="服务降级应用场景"><a href="#服务降级应用场景" class="headerlink" title="服务降级应用场景"></a>服务降级应用场景</h3><p>一般在高峰期，为了保证核心功能服务的可用性，要对某些服务降级处理。</p><blockquote><p>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些不重要或不紧急的服务或任务进行服务 延迟使用或暂停使用。</p></blockquote><h3 id="服务降级实现"><a href="#服务降级实现" class="headerlink" title="服务降级实现"></a>服务降级实现</h3><h4 id="导入Hystrix依赖"><a href="#导入Hystrix依赖" class="headerlink" title="导入Hystrix依赖"></a>导入Hystrix依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类添加注解-EnableHystrix"><a href="#启动类添加注解-EnableHystrix" class="headerlink" title="启动类添加注解@EnableHystrix"></a>启动类添加注解@EnableHystrix</h4><p><img src="https://s2.loli.net/2022/06/04/PdLg2ro1MDa9SJI.png" alt="image-20220604155829336"></p><h4 id="在服务实现层添加调用方法与服务降级方法并且添加-HystrixCommand注解"><a href="#在服务实现层添加调用方法与服务降级方法并且添加-HystrixCommand注解" class="headerlink" title="在服务实现层添加调用方法与服务降级方法并且添加@HystrixCommand注解"></a>在服务实现层添加调用方法与服务降级方法并且添加@HystrixCommand注解</h4><p><img src="https://s2.loli.net/2022/06/04/9hrHs1cifuelgbX.png" alt="image-20220604161405440"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowMapper borrowMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userServiceUrl;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.book-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;getDefaultUserBorrowDetail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + uid, User.class);</span><br><span class="line">        List&lt;Book&gt; books = borrows.stream().map(borrow -&gt; restTemplate.getForObject(bookServiceUrl + <span class="string">&quot;/book/&quot;</span> + borrow.getBid(), Book.class)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(user, books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getDefaultUserBorrowDetail</span><span class="params">(<span class="meta">@PathVariable</span> Long uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(<span class="literal">null</span>, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://s2.loli.net/2022/06/04/fFxadkwDN13iuEY.png" alt="image-20220604161028821"></p><p><img src="https://s2.loli.net/2022/06/04/bBlswq6HIe1oSMk.png" alt="image-20220604161441837"></p><h3 id="HystrixCommand常用参数"><a href="#HystrixCommand常用参数" class="headerlink" title="@HystrixCommand常用参数"></a>@HystrixCommand常用参数</h3><blockquote><ul><li>fallbackMethod：指定服务降级处理方法</li><li>ignoreExceptions：忽略某些处理，不发生服务降级</li><li>commandKey：命令名称，用于区分不同的命令</li><li>groupKey：分组名称，Hystrix会根据不同的分组来统计命令的告警及仪表盘信息</li><li>threadPoolKey：线程池，名称，用于划分线程池</li></ul></blockquote><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><h3 id="服务熔断定义"><a href="#服务熔断定义" class="headerlink" title="服务熔断定义"></a>服务熔断定义</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。Hystrix会监控微服务调用的状况，默认当5秒内20次调用失败就会开启熔断机制，当检测出服务调用链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点的微服务调用，快速返回”错误”的响应信息。此外，在熔断后，Hystrix会定期检测该节点的微服务是否恢复正常响应，当检测到该节点微服务响应正常后，恢复调用链路。</p><h2 id="Hystrix请求缓存"><a href="#Hystrix请求缓存" class="headerlink" title="Hystrix请求缓存"></a>Hystrix请求缓存</h2><blockquote><p>当系统并发量越来越大时，我们可以使用缓存来优化系统，达到减轻并发请求线程数，提供响应速度的效果。</p></blockquote><h2 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h2><p>Hystrix Dashboard是Spring Cloud中查看Hystrix实例执行情况的一种仪表组件，支持查看单个实例和查看集群实例。</p><blockquote><p> Hystrix提供了Hystrix Dashboard来实时监控HystrixCommand方法的执行情况。 Hystrix Dashboard可以有效地反映出每个Hystrix实例的运行情况，帮助我们快速发现系统中的问题，从而采取对应措施。</p></blockquote><h3 id="Hystrix单个实例监控"><a href="#Hystrix单个实例监控" class="headerlink" title="Hystrix单个实例监控"></a>Hystrix单个实例监控</h3><p>使用Hystrix Dashboard监控单个Hystrix实例</p><h4 id="创建hystrix-dashboard模块"><a href="#创建hystrix-dashboard模块" class="headerlink" title="创建hystrix-dashboard模块"></a>创建hystrix-dashboard模块</h4><p>hystrix-dashboard用来监控hystrix实例的执行情况</p><p><img src="https://s2.loli.net/2022/06/05/SOfGwPjR7lVyDnm.png" alt="image-20220605174356650"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p><img src="https://s2.loli.net/2022/06/05/OY8MgibDVNCw6Wm.png" alt="image-20220605175849005"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8401</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: hystrix-dashboard</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://root:123456@replica1:8005/eureka,</span><br><span class="line">                   http://root:123456@replica2:8006/eureka</span><br><span class="line">hystrix:</span><br><span class="line">  dashboard:</span><br><span class="line">    proxy-stream-allow-list: &quot;localhost&quot;</span><br></pre></td></tr></table></figure><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><p><img src="https://s2.loli.net/2022/06/05/kDE3ZbLcGPOxR8Y.png" alt="image-20220605175413117"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixDashboardApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在被监控的服务添加Actuator依赖"><a href="#在被监控的服务添加Actuator依赖" class="headerlink" title="在被监控的服务添加Actuator依赖"></a>在被监控的服务添加Actuator依赖</h4><blockquote><p>Actuator是SpringBoot程序的监控系统，可以实现健康检查，记录信息等。</p></blockquote><p><img src="https://s2.loli.net/2022/06/05/ufa3zPFyjGw7q6B.png" alt="image-20220605200314158"></p><h4 id="在被监控的服务配置开启hystrix-stream监控端点"><a href="#在被监控的服务配置开启hystrix-stream监控端点" class="headerlink" title="在被监控的服务配置开启hystrix.stream监控端点"></a>在被监控的服务配置开启hystrix.stream监控端点</h4><p><img src="https://s2.loli.net/2022/06/05/8cbhMJS71vrVBiE.png" alt="image-20220605181613411"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;hystrix.stream&#x27;</span><br></pre></td></tr></table></figure><h4 id="Hystrix监控实例"><a href="#Hystrix监控实例" class="headerlink" title="Hystrix监控实例"></a>Hystrix监控实例</h4><p>访问Hystrix Dashboard：<a href="http://localhost:8401/hystrix">http://localhost:8401/hystrix</a></p><p><img src="https://s2.loli.net/2022/06/05/8SliT5JkqjKcrH3.png" alt="img"></p><p><img src="https://s2.loli.net/2022/06/05/7JmQjMbWFclp1ND.png" alt="image-20220605181313785"></p><ul><li><p>填入<a href="http://localhost:8301/actuator/hystrix.stream%EF%BC%8C%E7%82%B9%E5%87%BB%E7%9B%91%E6%8E%A7%E6%8C%89%E9%92%AE">http://localhost:8301/actuator/hystrix.stream，点击监控按钮</a></p><blockquote><p>由于本地不支持https，所以我们的地址需要填入的是http，否则会无法获取监控信息</p></blockquote><p><img src="https://s2.loli.net/2022/06/05/miQU2wXD4s3uZGl.png" alt="image-20220605200806896"></p><h3 id="Hystrix-Dashboard-图表解读"><a href="#Hystrix-Dashboard-图表解读" class="headerlink" title="Hystrix Dashboard 图表解读"></a>Hystrix Dashboard 图表解读</h3></li></ul><p><img src="https://s2.loli.net/2022/06/05/rLxDMgbQOBZSjzE.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Hystrix&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Hystrix&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Hystrix&quot;&gt;&lt;/a&gt;Spring Cloud Hystrix&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>
