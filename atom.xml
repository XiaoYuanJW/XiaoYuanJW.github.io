<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-08T08:29:58.028Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YuanJW</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式搜索-ElasticSearch</title>
    <link href="http://example.com/2022/11/06/ElasticSearch/"/>
    <id>http://example.com/2022/11/06/ElasticSearch/</id>
    <published>2022-11-06T14:30:55.000Z</published>
    <updated>2022-11-08T08:29:58.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式搜索-ElasticSearch"><a href="#分布式搜索-ElasticSearch" class="headerlink" title="分布式搜索-ElasticSearch"></a>分布式搜索-ElasticSearch</h1><h2 id="ElasticSearch的定义"><a href="#ElasticSearch的定义" class="headerlink" title="ElasticSearch的定义"></a>ElasticSearch的定义</h2><blockquote><p>ElasticSearch是一款强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。</p><p>ElasticSearch结合kibana、logstash、beats即elastic stack(ELK)，被广泛应用在日志数据分析、实时监控等领域。ElasticSearch是elastic stack的核心、负责存储、搜索、分析数据。</p></blockquote><p><img src="https://s2.loli.net/2022/11/01/RZ7ISUChr3mwf1k.png" alt="image-20221101223809820"></p><p>Lucene是一个Java语言的搜索引擎类库，具有易扩展、高性能（基于倒排索引）的优势，但是只限于Java语言开发、学习复杂、不支持水平扩展。</p><p>2010年、Shay Banon重写了Compass，取名为ElasticSearch，相比于Lucene,ElasticSearch具备下列优势：支持分布式，可水平扩展；提供Restful接口，可被任何语言调用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>ElasticSearch是一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能。</p></blockquote><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>传统数据库（例如MySQL）采用正向索引，实例tb_goods中id插件索引：</p><p><img src="https://s2.loli.net/2022/11/02/O5w84dQCXZsAaNE.png" alt="image-20221102132601679"></p><p>ElasticSearch采用倒排索引：</p><ul><li>文档（document）：每条数据就是一个文档</li><li>词条（term）：文档按照语义分成的词语</li></ul><p><img src="https://s2.loli.net/2022/11/02/wPRIqp9SuXmzEDf.png" alt="image-20221102140722916"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h4 id="什么是文档和词条"><a href="#什么是文档和词条" class="headerlink" title="什么是文档和词条"></a>什么是文档和词条</h4><ul><li>每一条数据是一个文档</li><li>对文档中的内容分词，得到词语就是词条</li></ul><h4 id="什么是正向索引"><a href="#什么是正向索引" class="headerlink" title="什么是正向索引"></a>什么是正向索引</h4><ul><li>基于文档id创建索引。查询词条时必须先找到文档，而后判断是否包含词条</li></ul><h4 id="什么是倒排索引"><a href="#什么是倒排索引" class="headerlink" title="什么是倒排索引"></a>什么是倒排索引</h4><ul><li>对文档内容分词，对词条创建索引，并记录词条所在文档的信息。查询时根据词条查询文档id，而后获取到文档。</li></ul><p><img src="https://s2.loli.net/2022/11/02/lcJgpw2fOmnuTkj.png" alt="image-20221102141650173"></p><h2 id="ElasticSearch与MySQL的概念对比"><a href="#ElasticSearch与MySQL的概念对比" class="headerlink" title="ElasticSearch与MySQL的概念对比"></a>ElasticSearch与MySQL的概念对比</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>ElasticSearch是面向文档存储的，可以是数据库中的一条商品数据、一个订单数据。</p><p>文档数据会被序列化为Json格式后存储在ElasticSearch中</p></blockquote><p><img src="https://s2.loli.net/2022/11/02/SkCAXlB8YIuqFRH.png" alt="image-20221102141743483"></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><blockquote><p>索引（index）:相同类型的文档的集合</p><p>映射（mapping）:索引中文档的字段约束信息，类似表的结构约束</p></blockquote><p><img src="https://s2.loli.net/2022/11/04/3Jo4IlYBT9sUbwj.png" alt="image-20221104110451665"></p><h3 id="概念对比"><a href="#概念对比" class="headerlink" title="概念对比"></a>概念对比</h3><p><img src="https://s2.loli.net/2022/11/04/VPOdSqDBKkw5pza.png" alt="image-20221104110614232"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><blockquote><p>MySQL：擅长事务类型操作，可以确保数据的安全和一致性</p><p>ElasticSearch：擅长海量数据的搜索、分析和计算</p></blockquote><p><img src="https://s2.loli.net/2022/11/04/ShYJ9strKiEVQTO.png" alt="image-20221104111240108"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>索引：同类型文档的集合</li><li>文档：一个数据就是一个文档，在es中是JSON格式</li><li>字段：JSON文档中的字段</li><li>映射：索引中文档的约束，比如字段名称、类型</li></ul><p>elasticsearch与数据库的关系</p><ul><li>数据库负责事务类型操作</li><li>elasticsearch负责海量数据的搜索、分析和计算</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h3><ul><li><h4 id="拉取ElasticSearch镜像"><a href="#拉取ElasticSearch镜像" class="headerlink" title="拉取ElasticSearch镜像"></a>拉取ElasticSearch镜像</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="启动ElasticSearch服务"><a href="#启动ElasticSearch服务" class="headerlink" title="启动ElasticSearch服务"></a>启动ElasticSearch服务</h4><blockquote><p>可以使用ES_JAVA_OPTS设置占用内存大小</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;cluster.name=elasticsearch&quot; \</span><br><span class="line">-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx1024m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-d elasticsearch:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="修改挂载数据目录的访问权限"><a href="#修改挂载数据目录的访问权限" class="headerlink" title="修改挂载数据目录的访问权限"></a>修改挂载数据目录的访问权限</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data/</span><br></pre></td></tr></table></figure><ul><li><h4 id="安装中文分词器IKAnalyzer"><a href="#安装中文分词器IKAnalyzer" class="headerlink" title="安装中文分词器IKAnalyzer"></a>安装中文分词器IKAnalyzer</h4><blockquote><p>注意下载与ElasticSearch对应的版本</p><p>​    下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>下载完成后解压至Elasticsearch的<code>/mydata/elasticsearch/plugins</code>目录下</p></blockquote></li></ul><p><img src="https://s2.loli.net/2022/11/04/5HZ8QzN4oCbYkds.png" alt="image-20221104142632603"></p><p><img src="https://s2.loli.net/2022/11/04/ngfKyveu5oNckr1.png" alt="image-20221104143353023"></p><ul><li><h4 id="重新启动服务"><a href="#重新启动服务" class="headerlink" title="重新启动服务"></a>重新启动服务</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><ul><li><h4 id="访问返回版本信息"><a href="#访问返回版本信息" class="headerlink" title="访问返回版本信息"></a>访问返回版本信息</h4><p><a href="http://ip:9200/">http://ip:9200/</a></p></li></ul><p><img src="https://s2.loli.net/2022/11/04/qYwBU2b4e6ugnOX.png" alt="image-20221104145102525"></p><h3 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h3><ul><li><h4 id="拉取Kibana镜像"><a href="#拉取Kibana镜像" class="headerlink" title="拉取Kibana镜像"></a>拉取Kibana镜像</h4><blockquote><p>注意版本的一致性</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="启动Kibana服务"><a href="#启动Kibana服务" class="headerlink" title="启动Kibana服务"></a>启动Kibana服务</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -p 5601:5601 \</span><br><span class="line">--link elasticsearch:es \</span><br><span class="line">-e &quot;elasticsearch.hosts=http://es:9200&quot; \</span><br><span class="line">-d kibana:7.17.3</span><br></pre></td></tr></table></figure><ul><li><h4 id="访问地址测试：http-ip-5601"><a href="#访问地址测试：http-ip-5601" class="headerlink" title="访问地址测试：http://ip:5601/"></a>访问地址测试：<a href="http://ip:5601/">http://ip:5601/</a></h4></li></ul><p><img src="https://s2.loli.net/2022/11/04/NIox6GYX2trMAJw.png" alt="image-20221104150025676"></p><ul><li><h4 id="通过Dev-Tools输入DSL语句操作ES"><a href="#通过Dev-Tools输入DSL语句操作ES" class="headerlink" title="通过Dev Tools输入DSL语句操作ES"></a>通过Dev Tools输入DSL语句操作ES</h4></li></ul><p><img src="https://s2.loli.net/2022/11/04/UlSaf3KxY4DZpJb.png" alt="image-20221104150950989"></p><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><p>ElasticSearch创建倒排索引时需对文档进行分词，在搜索时，需要对用户输入内容分词。</p><p>但是默认的分词规则对中文处理并不友好，可以在Kibana中的DevTools中进行测试</p><p><img src="https://s2.loli.net/2022/11/04/bxqUo2y8LlVNaWt.png" alt="image-20221104152745589"></p><p><img src="https://s2.loli.net/2022/11/04/iCOqGosUXAYyKbt.png" alt="image-20221104160915452"></p><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>处理中文分词，一般使用<strong>IK分词器</strong></p><blockquote><p>IK分词器包含两种模式：ik_smart-最少切分 ik_max_word-最细切分</p></blockquote><p>前面已经安装过了IK分词器插件，下面进行测试：</p><p><img src="https://s2.loli.net/2022/11/04/JjPrQisfuoKhDIg.png" alt="image-20221104162000656"></p><p><img src="https://s2.loli.net/2022/11/04/m6tdvHiXs8YGeWh.png" alt="image-20221104162032629"></p><h3 id="IK分词器的拓展和停用字典"><a href="#IK分词器的拓展和停用字典" class="headerlink" title="IK分词器的拓展和停用字典"></a>IK分词器的拓展和停用字典</h3><p><img src="https://s2.loli.net/2022/11/04/iZWchlkxtM5z2Fe.png" alt="image-20221104162652489"></p><h4 id="扩展词库"><a href="#扩展词库" class="headerlink" title="扩展词库"></a>扩展词库</h4><blockquote><p>修改ik分词器config目录中的IkAnalyzer.cfg.xml文件，扩展ik分词库的词库</p></blockquote><p><img src="https://s2.loli.net/2022/11/06/JZgQwzWhDKHGnfT.png" alt="image-20221106022514407"></p><h4 id="停用词库"><a href="#停用词库" class="headerlink" title="停用词库"></a>停用词库</h4><blockquote><p>修改ik分词器config目录中的IkAnalyzer.cfg.xml文件，禁用敏感词条</p></blockquote><p><img src="https://s2.loli.net/2022/11/06/F5xJLqZT1EUAMNY.png" alt="image-20221106173408187"></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="添加dic文件"><a href="#添加dic文件" class="headerlink" title="添加dic文件"></a>添加dic文件</h4><p><img src="https://s2.loli.net/2022/11/06/139BQCV6RIlrWJa.png" alt="image-20221106173715801"></p><p><img src="https://s2.loli.net/2022/11/06/Ym8jh9dISNr3G5K.png" alt="image-20221106174024806"></p><h4 id="修改xml配置"><a href="#修改xml配置" class="headerlink" title="修改xml配置"></a>修改xml配置</h4><p><img src="https://s2.loli.net/2022/11/06/awlfRLWkK5Ad2mI.png" alt="image-20221106174157183"></p><h4 id="添加词库内容"><a href="#添加词库内容" class="headerlink" title="添加词库内容"></a>添加词库内容</h4><p><img src="https://s2.loli.net/2022/11/06/MUHYKb5fxtnvSZy.png" alt="image-20221106174317422"></p><p><img src="https://s2.loli.net/2022/11/06/1UJnT7rvz2RbYSG.png" alt="image-20221106174356105"></p><h4 id="重启ElasticSearch服务"><a href="#重启ElasticSearch服务" class="headerlink" title="重启ElasticSearch服务"></a>重启ElasticSearch服务</h4><p><img src="https://s2.loli.net/2022/11/06/gDFho6VvOcRLirb.png" alt="image-20221106174624133"></p><h4 id="查看分词结果"><a href="#查看分词结果" class="headerlink" title="查看分词结果"></a>查看分词结果</h4><p><img src="https://s2.loli.net/2022/11/06/82Kqor5PUhlFGeZ.png" alt="image-20221106174816802"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><h4 id="分词器的作用"><a href="#分词器的作用" class="headerlink" title="分词器的作用"></a>分词器的作用</h4><ul><li>创建倒排索引时，对文档进行分词</li><li>用户搜索时，对输入的内容进行分词</li></ul><h4 id="IK分词器的模式"><a href="#IK分词器的模式" class="headerlink" title="IK分词器的模式"></a>IK分词器的模式</h4><ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><h4 id="IK分词器的拓展和停用词条"><a href="#IK分词器的拓展和停用词条" class="headerlink" title="IK分词器的拓展和停用词条"></a>IK分词器的拓展和停用词条</h4><ul><li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条和停用词条</li></ul><p> <img src="https://s2.loli.net/2022/11/06/Puf3QSZYD7iEB94.png" alt="image-20221106175236631"></p><h2 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h2><h3 id="mapping属性"><a href="#mapping属性" class="headerlink" title="mapping属性"></a>mapping属性</h3><blockquote><p>mapping是对索引库中文档的约束，常见的mapping属性包括如下：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text-可分词的文本 keyword-精确值（例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪些分词器</li><li>properties：字段的子字段</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/06/HhelSVEGADjFgr8.png" alt="image-20221106220204637"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/11/06/3NVRKZAlW4hCs8p.png" alt="image-20221106220252286"></p><h3 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h3><blockquote><p>ElasticSearch中通过Restful请求操作索引库、文档。</p><p>请求内容用DSL语句来表示</p></blockquote><h4 id="创建索引库和mapping的DSL语法"><a href="#创建索引库和mapping的DSL语法" class="headerlink" title="创建索引库和mapping的DSL语法"></a>创建索引库和mapping的DSL语法</h4><p><img src="https://s2.loli.net/2022/11/06/38clkXCgNWOBoud.png" alt="image-20221106220731752"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引库</span><br><span class="line">PUT /test</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;email&quot;: &#123;</span><br><span class="line">         &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">         &quot;index&quot;: false</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;name&quot;: &#123;</span><br><span class="line">         &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">         &quot;properties&quot;: &#123;</span><br><span class="line">           &quot;firstName&quot;: &#123;</span><br><span class="line">             &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">            &quot;lastName&quot;: &#123;</span><br><span class="line">             &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/Rwf3cjgB6kIzxts.png" alt="image-20221106221428024"></p><h3 id="查询索引库"><a href="#查询索引库" class="headerlink" title="查询索引库"></a>查询索引库</h3><p><img src="https://s2.loli.net/2022/11/06/BX2FU9EinwvLZ1I.png" alt="image-20221106221613047"></p><p><img src="https://s2.loli.net/2022/11/06/8ywquOIojrdLBR6.png" alt="image-20221106221706156"></p><h3 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h3><p><img src="https://s2.loli.net/2022/11/06/hlHSWn1okwfNUCM.png" alt="image-20221106221725757"></p><h3 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h3><blockquote><p>索引库和mapping一旦创建无法修改，但是可以添加新的字段</p></blockquote><p> <img src="https://s2.loli.net/2022/11/06/ZaDkxv5z6Mmjgbi.png" alt="image-20221106221911810"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#  修改索引库 只可以添加mapping</span><br><span class="line">PUT /test/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/SbokiOca2X4yPpu.png" alt="image-20221106222135336"></p><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2022/11/06/VnfJQluhDcARv7U.png" alt="image-20221106222304902"></p><p><img src="https://s2.loli.net/2022/11/06/9ORE36zaMFBqjhT.png" alt="image-20221106222323719"></p><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h3><p><img src="https://s2.loli.net/2022/11/06/wyhT3CQsVtWl5kH.png" alt="image-20221106222443667"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 新增文档</span><br><span class="line">POST /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;你好，世界&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;xx@qq.com&quot;,</span><br><span class="line">  &quot;name&quot;: &#123;</span><br><span class="line">    &quot;firstName&quot;: &quot;Yuan&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;JianWei&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;age&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/3easSmhl6DgUBpq.png" alt="image-20221106222805589"></p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p><img src="https://s2.loli.net/2022/11/06/rZw4mMSVXQAhRDP.png" alt="image-20221106223018859"></p><p><img src="https://s2.loli.net/2022/11/06/uExSyBld4JKCPUv.png" alt="image-20221106223254350"></p><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><p><img src="https://s2.loli.net/2022/11/06/lhTLawj9kBCcWRy.png" alt="image-20221106223332596"></p><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><h4 id="方式一：全量修改，删除旧文档、添加新文档"><a href="#方式一：全量修改，删除旧文档、添加新文档" class="headerlink" title="方式一：全量修改，删除旧文档、添加新文档"></a>方式一：全量修改，删除旧文档、添加新文档</h4><p><img src="https://s2.loli.net/2022/11/06/l6oVLWyc7hjerGR.png" alt="image-20221106223458498"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 全量修改文档</span><br><span class="line">PUT /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;: &quot;你好，世界&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;xx@123.com&quot;,</span><br><span class="line">  &quot;name&quot;: &#123;</span><br><span class="line">    &quot;firstName&quot;: &quot;Yuan&quot;,</span><br><span class="line">    &quot;lastName&quot;: &quot;JianWei&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;age&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/2ZDQOgq39C6oHIK.png" alt="image-20221106224226454"></p><h4 id="方式二：增量修改，修改指定字段值"><a href="#方式二：增量修改，修改指定字段值" class="headerlink" title="方式二：增量修改，修改指定字段值"></a>方式二：增量修改，修改指定字段值</h4><p><img src="https://s2.loli.net/2022/11/06/kOLPBCTuQRhc1jM.png" alt="image-20221106223941573"></p><p><img src="https://s2.loli.net/2022/11/06/FhD7qmdwzPnaiCS.png" alt="image-20221106224259997"></p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><ul><li>新增文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>查询文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>删除文档</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>全量修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_doc/文档id</span><br></pre></td></tr></table></figure><ul><li>增量修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/_update/文档id</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/06/VadnOjkPsTL96Hu.png" alt="image-20221106224648435"></p><h2 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h2><blockquote><p>ElasticSearch官方提供了各种不同语言的客户端，用来操作ElasticSearch。</p><p>这些客户端的本质是组装DSL语句，通过http请求发送给ElasticSearch服务器。</p><p>官网地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p></blockquote><p><img src="https://s2.loli.net/2022/11/06/JPL3USxHtw2kM1F.png" alt="image-20221106225826771"></p><p><img src="https://s2.loli.net/2022/11/06/I1uJcNMfKn5Tr2E.png" alt="image-20221106225956266"></p><h3 id="数据结构分析"><a href="#数据结构分析" class="headerlink" title="数据结构分析"></a>数据结构分析</h3><p><img src="https://s2.loli.net/2022/11/07/JDkzrFC7Iwn3pgO.png" alt="image-20221107110832616"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># hotel mapping</span><br><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/07/8riQd4hENVqeXaI.png" alt="image-20221107131920561"></p><blockquote><p>ElasticSearch支持两种地理坐标的数据类型：</p><ul><li>geo_point：由纬度（latitude）和经度（longitude）确定一个点</li><li>geo_shape：有多个geo_point组成的复杂几何图形</li></ul></blockquote><p>字段拷贝可以使用copy_to属性将当前字段拷贝到指定字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"># hotel mapping</span><br><span class="line">PUT /hotel</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;id&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;score&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;brand&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;starName&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;business&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;copy_to&quot;: &quot;all&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;location&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;geo_point&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;all&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化RestClient"><a href="#初始化RestClient" class="headerlink" title="初始化RestClient"></a>初始化RestClient</h3><p><img src="https://s2.loli.net/2022/11/07/WJPng24f8jxIvOw.png" alt="image-20221107154836321"></p><h4 id="引入ElasticSearchRestHighLevelClient依赖"><a href="#引入ElasticSearchRestHighLevelClient依赖" class="headerlink" title="引入ElasticSearchRestHighLevelClient依赖"></a>引入ElasticSearchRestHighLevelClient依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.17.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/07/km9ZPu3zlUDOht1.png" alt="image-20221107155725626"></p><h4 id="覆盖SpringBoot默认的ElasticSearch版本"><a href="#覆盖SpringBoot默认的ElasticSearch版本" class="headerlink" title="覆盖SpringBoot默认的ElasticSearch版本"></a>覆盖SpringBoot默认的ElasticSearch版本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.17.3<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="初始化RestHignLevelClient"><a href="#初始化RestHignLevelClient" class="headerlink" title="初始化RestHignLevelClient"></a>初始化RestHignLevelClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestClientTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://1.117.34.49:5601&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.restHighLevelClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/07/Mhxyf8Ne4jlFb1g.png" alt="image-20221107170814816"></p><h3 id="创建索引库-1"><a href="#创建索引库-1" class="headerlink" title="创建索引库"></a>创建索引库</h3><p><img src="https://s2.loli.net/2022/11/07/vEcn8dhrf3yiL71.png" alt="image-20221107220024274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createProductIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建CreateIndexRequest对象</span></span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">createIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置请求参数：PRODUCT_TEMPLATE-DSL语句 XContentType.JSON</span></span><br><span class="line">    createIndexRequest.source(PRODUCT_TEMPLATE, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引库-1"><a href="#删除索引库-1" class="headerlink" title="删除索引库"></a>删除索引库</h3><p><img src="https://s2.loli.net/2022/11/08/snwbd5fWMAu1IFQ.png" alt="image-20221108002842447"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteProductIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建DeleteIndexRequest对象</span></span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">deleteIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断索引库是否存在"><a href="#判断索引库是否存在" class="headerlink" title="判断索引库是否存在"></a>判断索引库是否存在</h3><p><img src="https://s2.loli.net/2022/11/08/IR9XueovcAS1CFx.png" alt="image-20221108100749983"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">existsProductIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建GetIndexRequest对象</span></span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">getIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求，接收结果</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists ? <span class="string">&quot;索引库存在&quot;</span> : <span class="string">&quot;索引库不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><h4 id="索引库操作的基本步骤"><a href="#索引库操作的基本步骤" class="headerlink" title="索引库操作的基本步骤"></a>索引库操作的基本步骤</h4><ul><li>初始化RestHighLevelClient</li><li>创建IndexRequest</li><li>准备DSL语句</li><li>发送请求，调用restHighLevelClient.indices()的API</li></ul><p><img src="https://s2.loli.net/2022/11/08/RD8tV1Fs6AGQaZj.png" alt="image-20221108102633467"></p><h2 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档</h2><h3 id="初始化RestClient-1"><a href="#初始化RestClient-1" class="headerlink" title="初始化RestClient"></a>初始化RestClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestDocumentTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PmsProductService pmsProductService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化RestHighLevelClient</span></span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://1.117.34.49:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 关闭客户端资源</span></span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.restHighLevelClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新增文档-1"><a href="#新增文档-1" class="headerlink" title="新增文档"></a>新增文档</h3><p><img src="https://s2.loli.net/2022/11/08/k4lInau52tiJEpP.png" alt="image-20221108103310381"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取Json对象</span></span><br><span class="line">    <span class="type">PmsProduct</span> <span class="variable">pmsProduct</span> <span class="operator">=</span> pmsProductService.getPmsProductById(<span class="number">1L</span>);</span><br><span class="line">    <span class="type">EsProduct</span> <span class="variable">esProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsProduct</span>();</span><br><span class="line">    <span class="comment">// 拷贝为es商品信息实体</span></span><br><span class="line">    BeanUtils.copyProperties(pmsProduct, esProduct);</span><br><span class="line">    <span class="comment">// 序列化为JSON</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> JSONUtil.toJsonStr(esProduct);</span><br><span class="line">    <span class="comment">// 创建Request对象</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;product&quot;</span>).id(String.valueOf(esProduct.getId()));</span><br><span class="line">    <span class="comment">// 设置请求参数</span></span><br><span class="line">    indexRequest.source(source, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/08/96XnDj1cywrVNTM.png" alt="image-20221108145456192"></p><h3 id="查询文档-1"><a href="#查询文档-1" class="headerlink" title="查询文档"></a>查询文档</h3><p><img src="https://s2.loli.net/2022/11/08/6GlP1J9s8hjwKey.png" alt="image-20221108150917208"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">// 创建GetRequest对象</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">getResponse</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 获取source</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> getResponse.getSourceAsString();</span><br><span class="line">    <span class="comment">// 将json放序列化为对象</span></span><br><span class="line">    <span class="type">EsProduct</span> <span class="variable">esProduct</span> <span class="operator">=</span> JSONUtil.toBean(sourceAsString, EsProduct.class);</span><br><span class="line">    System.out.println(esProduct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改文档-1"><a href="#修改文档-1" class="headerlink" title="修改文档"></a>修改文档</h3><blockquote><p>修改文档数据有两种方式：</p><ul><li>方式一：全量更新：写入id和之前一样的文档，就会删除旧文档，添加新文档</li><li>方式二：局部更新：只更新部分字段</li></ul></blockquote><p><img src="https://s2.loli.net/2022/11/08/xoujXBhdIFyt41K.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建UpdateRequest对象</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备参数</span></span><br><span class="line">    updateRequest.doc(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;128&quot;</span>, <span class="string">&quot;sale&quot;</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 创建DeleteRequest对象</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量导入文档"><a href="#批量导入文档" class="headerlink" title="批量导入文档"></a>批量导入文档</h3><p><img src="https://s2.loli.net/2022/11/08/4mdQPqZkIL3iw2H.png" alt="image-20221108160643218"></p><p><img src="https://s2.loli.net/2022/11/08/s4KruGkY2nFld9D.png" alt="image-20221108160700715"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bulkIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    List&lt;PmsProduct&gt; pmsProducts = pmsProductService.getPmsProducts(<span class="keyword">new</span> <span class="title class_">PmsProduct</span>());</span><br><span class="line">    pmsProducts.forEach(pmsProduct -&gt; &#123;</span><br><span class="line">        <span class="comment">// 对象赋值</span></span><br><span class="line">        <span class="type">EsProduct</span> <span class="variable">esProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EsProduct</span>(pmsProduct);</span><br><span class="line">        <span class="comment">// 遍历添加准备参数</span></span><br><span class="line">        bulkRequest.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;product&quot;</span>)</span><br><span class="line">                .id(String.valueOf(esProduct.getId()))</span><br><span class="line">                .source(JSONUtil.toJsonStr(esProduct), XContentType.JSON));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p><img src="https://s2.loli.net/2022/11/08/p7lvCwMs1UuHqIt.png" alt="image-20221108154330652"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式搜索-ElasticSearch&quot;&gt;&lt;a href=&quot;#分布式搜索-ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;分布式搜索-ElasticSearch&quot;&gt;&lt;/a&gt;分布式搜索-ElasticSearch&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="ElasticSearch" scheme="http://example.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>消息队列 MQ</title>
    <link href="http://example.com/2022/11/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/"/>
    <id>http://example.com/2022/11/01/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97MQ/</id>
    <published>2022-11-01T14:25:22.000Z</published>
    <updated>2022-11-01T14:25:49.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息队列-MQ"><a href="#消息队列-MQ" class="headerlink" title="消息队列-MQ"></a>消息队列-MQ</h1><h2 id="同步通讯和异步通讯"><a href="#同步通讯和异步通讯" class="headerlink" title="同步通讯和异步通讯"></a>同步通讯和异步通讯</h2><p><img src="https://s2.loli.net/2022/10/07/W4mJYnc1TodEset.png" alt="image-20221007163138062"></p><h2 id="同步调用的问题"><a href="#同步调用的问题" class="headerlink" title="同步调用的问题"></a>同步调用的问题</h2><p>微服务间基于Feign的调用属于同步方式，存在一些问题。</p><p><img src="https://s2.loli.net/2022/10/07/1L3rbYpWaITHjZR.png" alt="image-20221007163406290"></p><p><img src="https://s2.loli.net/2022/10/07/hvCNMBnrF5d8y9w.png" alt="image-20221007163727790"></p><p><img src="https://s2.loli.net/2022/10/07/wo1W2keUlB59tRE.png" alt="image-20221007171324820"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="同步调用的优点"><a href="#同步调用的优点" class="headerlink" title="同步调用的优点"></a>同步调用的优点</h4><ul><li>时效性强、立即获得结果</li></ul><h4 id="同步调用的问题-1"><a href="#同步调用的问题-1" class="headerlink" title="同步调用的问题"></a>同步调用的问题</h4><ul><li>耦合性高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败的问题</li></ul><h2 id="异步调用方案"><a href="#异步调用方案" class="headerlink" title="异步调用方案"></a>异步调用方案</h2><p>异步调用常见的实现是事件驱动模式</p><p><img src="https://s2.loli.net/2022/10/07/2mtNF9DsxYQyfCr.png" alt="image-20221007181054098"></p><p>异步通信的优点：</p><ul><li>优势一：通过事件发布完成服务解耦，耦合度低</li><li>优势二：性能提升，吞吐量提高</li><li>优势三：服务没有强依赖，不担心级联失败问题，故障隔离</li><li>优势四：流量削峰</li></ul><p>异步通信的缺点：</p><ul><li>依赖于Broken的可靠性，安全性，吞吐能力</li><li>架构复杂，业务没有明显的流程线，不易于追踪管理</li></ul><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><p>MQ（Message Queue）是消息队列，存放消息的队列，就是事件驱动架构的Broker。</p><p><img src="https://s2.loli.net/2022/10/10/im2g4uOMUFkW7z3.png" alt="image-20221010211020957"></p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ是基于Erlang语言开发的开源通信中间件。</p><h4 id="RabbitMQ部署"><a href="#RabbitMQ部署" class="headerlink" title="RabbitMQ部署"></a>RabbitMQ部署</h4><h5 id="下载docker镜像"><a href="#下载docker镜像" class="headerlink" title="下载docker镜像"></a>下载docker镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.9-management</span><br></pre></td></tr></table></figure><h5 id="启动RabbitMQ服务"><a href="#启动RabbitMQ服务" class="headerlink" title="启动RabbitMQ服务"></a>启动RabbitMQ服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 5672:5672 -p 15672:15672 \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">--hostname rabbitmq1 \</span><br><span class="line">-d rabbitmq:3.9-management</span><br></pre></td></tr></table></figure><h5 id="访问地址："><a href="#访问地址：" class="headerlink" title="访问地址："></a>访问地址：</h5><p>http://{ip}:15672/</p><p>输入初始的账号密码：guest guset</p><p><img src="https://s2.loli.net/2022/10/18/1FjJvbPXgi8KmHp.png" alt="image-20221018182241708"></p><h5 id="RabbitMQ的结构和概念"><a href="#RabbitMQ的结构和概念" class="headerlink" title="RabbitMQ的结构和概念"></a>RabbitMQ的结构和概念</h5><p><img src="https://s2.loli.net/2022/10/18/eo2MaWnsyb41TCj.png" alt="image-20221018182812550"></p><h5 id="RabbitMQ的概念"><a href="#RabbitMQ的概念" class="headerlink" title="RabbitMQ的概念"></a>RabbitMQ的概念</h5><h6 id="channel：操作队列的工具"><a href="#channel：操作队列的工具" class="headerlink" title="channel：操作队列的工具"></a>channel：操作队列的工具</h6><h6 id="exchange：路由消息到队列中"><a href="#exchange：路由消息到队列中" class="headerlink" title="exchange：路由消息到队列中"></a>exchange：路由消息到队列中</h6><h6 id="queue：缓存消息"><a href="#queue：缓存消息" class="headerlink" title="queue：缓存消息"></a>queue：缓存消息</h6><h6 id="virtual：虚拟主机是对queue和exchange等资源的逻辑分组"><a href="#virtual：虚拟主机是对queue和exchange等资源的逻辑分组" class="headerlink" title="virtual：虚拟主机是对queue和exchange等资源的逻辑分组"></a>virtual：虚拟主机是对queue和exchange等资源的逻辑分组</h6><h4 id="RabbitMQ常见消息模型"><a href="#RabbitMQ常见消息模型" class="headerlink" title="RabbitMQ常见消息模型"></a>RabbitMQ常见消息模型</h4><ul><li>基本消息队列（BasicQueue）</li><li>工作消息队列（WorkQueue）</li><li>发布订阅（Publish\Subscribe）<ul><li>Fanout Exchange：广播</li><li>Direct Exchange：路由</li><li>Topic Exchange：主题</li></ul></li></ul><p><img src="https://s2.loli.net/2022/10/18/aEizt8sZYn1H4rf.png" alt="image-20221018220302269"></p><h5 id="基本消息队列"><a href="#基本消息队列" class="headerlink" title="基本消息队列"></a>基本消息队列</h5><p>最基本的消息队列模型只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><p><img src="https://s2.loli.net/2022/10/18/sWgC73Zxd94myXH.png" alt="image-20221018220806394"></p><h5 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h5><p><img src="https://s2.loli.net/2022/10/19/7VMkeAN9xhF6rUQ.png" alt="image-20221019101819705"></p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring AMQP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生产者测试类</p><p><img src="https://s2.loli.net/2022/10/19/hZeGkNP463QaDps.png" alt="image-20221019102020346"></p><p>消费者测试类</p><p><img src="https://s2.loli.net/2022/10/19/qvwyZIWVGp2nf4C.png" alt="image-20221019102048266"></p><p>基本消息队列的消息发送流程</p><ul><li>建立connect</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel向队列发送消息</li></ul><p>基本消息队列的消息接收流程</p><ul><li>建立connect</li><li>创建channel</li><li>利用channel声明队列</li><li>定义consumer的消息行为handleDelivery()</li><li>利用channel将消费者和与队列绑定</li></ul><p><img src="https://s2.loli.net/2022/10/19/bKL8cMOSs9hCki6.png"></p><h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><p><img src="https://s2.loli.net/2022/10/19/xK4sr5XeITyUbot.png" alt="image-20221019103336534"></p><p>AMQP(Advance Message Queuing Protocol)，用于在应用程序或之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p><p>Spring AMQP是基于AMQP协议定义的一套 API规范，提供了模板来发送和接收消息，包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现。</p><p><img src="https://s2.loli.net/2022/10/19/qdbR2DHLJf8IKWs.png" alt="image-20221019141304343"></p><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><blockquote><p>简单模式是最简单的消费模式，它包含一个生产者，一个消费者和一个队列。生产者向队列里发送消息。消费者从队列中获取消息并消费。</p></blockquote><p><img src="https://s2.loli.net/2022/10/25/Yi2xXCyqfzsOvke.png" alt="img"></p><p><img src="https://s2.loli.net/2022/10/19/5ocE8deRZhAC2UD.png" alt="image-20221019142246296"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="在父工程中引入spring-amqp依赖"><a href="#在父工程中引入spring-amqp依赖" class="headerlink" title="在父工程中引入spring-amqp依赖"></a>在父工程中引入spring-amqp依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring AMQP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写application-yml配置文件"><a href="#编写application-yml配置文件" class="headerlink" title="编写application.yml配置文件"></a>编写application.yml配置文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">121.37</span><span class="number">.84</span><span class="number">.213</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h5 id="注入RabbitTemplate完成消息的发送"><a href="#注入RabbitTemplate完成消息的发送" class="headerlink" title="注入RabbitTemplate完成消息的发送"></a>注入RabbitTemplate完成消息的发送</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello rabbitmq&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(QUEUE_NAME, message);</span><br><span class="line">        log.info(<span class="string">&quot;send message: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过-RabbitListener注解接受方法"><a href="#通过-RabbitListener注解接受方法" class="headerlink" title="通过@RabbitListener注解接受方法"></a>通过@RabbitListener注解接受方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;receive : &#123;&#125;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过controller测试发送和接受方法"><a href="#通过controller测试发送和接受方法" class="headerlink" title="通过controller测试发送和接受方法"></a>通过controller测试发送和接受方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SimpleSender simpleSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;简单模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/simpleSend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">simpleSend</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            simpleSender.send();</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/10/25/3rw5XaWpMq7ZzmI.png" alt="image-20221025152509407"></p><p><img src="https://s2.loli.net/2022/10/25/demnPLopafgxbH4.png" alt="image-20221025154616188"></p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><blockquote><p>工作模式是指向多个相互竞争的消费者发送消息的模式，它包含一个生产者、两个消费者和一个队列。两个消费者同时绑定到一个队列上，当消费者获取消息处理耗时任务时，空闲的消费者从队列中获取并消费消息。</p></blockquote><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="https://s2.loli.net/2022/10/25/rD4H18tuE5mX3IV.png" alt="img"></p><h5 id="添加相关配置，注入队列、生产者和消费者"><a href="#添加相关配置，注入队列、生产者和消费者" class="headerlink" title="添加相关配置，注入队列、生产者和消费者"></a>添加相关配置，注入队列、生产者和消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">workQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;work.queue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WorkReceiver <span class="title function_">workReceiver1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WorkReceiver</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WorkReceiver <span class="title function_">workReceiver2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WorkReceiver</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WorkSender <span class="title function_">workSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WorkSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者通过send方法向队列中发送消息"><a href="#生产者通过send方法向队列中发送消息" class="headerlink" title="生产者通过send方法向队列中发送消息"></a>生产者通过send方法向队列中发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;work.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;hello work&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limitIndex; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(QUEUE_NAME, message);</span><br><span class="line">        log.info(<span class="string">&quot;send message: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者从队列中获取消息"><a href="#消费者从队列中获取消息" class="headerlink" title="消费者从队列中获取消息"></a>消费者从队列中获取消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkReceiver</span><span class="params">(<span class="type">int</span> instance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.instance = instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive &#123;&#125;&quot;</span>, <span class="built_in">this</span>.instance, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; Done in &#123;&#125;&quot;</span>, <span class="built_in">this</span>.instance, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : message.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/10/25/Y1tRyaQ3j8LUnJe.png" alt="image-20221025162106610"></p><h3 id="发布订阅模式（Publish-Subscribe）"><a href="#发布订阅模式（Publish-Subscribe）" class="headerlink" title="发布订阅模式（Publish/Subscribe）"></a>发布订阅模式（Publish/Subscribe）</h3><blockquote><p>发布订阅模式与之前模式的区别是允许将同一消息发送给多个消费者，实现方式是加入exchange(交换机)。</p><p>发布/订阅模式是指同时向多个消费者发送消息的模式（类似广播的形式），它包含一个生产者、两个消费者、两个队列和一个交换机。两个消费者同时绑定到不同的队列中去，两个队列绑定到交换机上去，生产者通过发送消息到交换机，所有消息者接收并消费消息。</p><p>Fanout Exchange会将接收到的消息路由到每一个跟其绑定的queue。</p></blockquote><p><img src="https://s2.loli.net/2022/10/27/fmSr3JL4utwo1de.png" alt="img"></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p><img src="https://s2.loli.net/2022/10/30/R9u1sOfBlWqbdnP.png" alt="image-20221030221012471"></p><h5 id="添加发布-订阅模式相关Java配置"><a href="#添加发布-订阅模式相关Java配置" class="headerlink" title="添加发布/订阅模式相关Java配置"></a>添加发布/订阅模式相关Java配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布/订阅消息队列配置类</span></span><br><span class="line"><span class="comment"> * Created by YuanJW on 2022/10/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;fanout.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding1</span><span class="params">(FanoutExchange fanoutExchange, Queue fanoutQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding2</span><span class="params">(FanoutExchange fanoutExchange, Queue fanoutQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2)</span><br><span class="line">                .to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutSender <span class="title function_">fanoutSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutReceiver <span class="title function_">fanoutReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutReceiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者向交换机发送消息"><a href="#生产者向交换机发送消息" class="headerlink" title="生产者向交换机发送消息"></a>生产者向交换机发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;fanout.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limitIndex; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">        log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者从绑定的匿名队列中获取消息"><a href="#消费者从绑定的匿名队列中获取消息" class="headerlink" title="消费者从绑定的匿名队列中获取消息"></a>消费者从绑定的匿名队列中获取消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message, <span class="type">int</span> receiver)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive &#123;&#125;&quot;</span>, receiver, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; done in &#123;&#125;s&quot;</span>, receiver, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : message.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller中添加测试接口"><a href="#controller中添加测试接口" class="headerlink" title="controller中添加测试接口"></a>controller中添加测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FanoutSender fanoutSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;发布/订阅模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/fanout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">fanout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fanoutSender.send(i);</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><h5 id="交换机的作用："><a href="#交换机的作用：" class="headerlink" title="交换机的作用："></a>交换机的作用：</h5><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p><img src="https://s2.loli.net/2022/10/30/rjIlwdf4iXEQvke.png" alt="image-20221030222616265"></p><h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><blockquote><p>路由模式是可以根据路由键选择性给多个消费者发送消息的模式，它包含一个生产者、两个消费者、两个队列和一个交换机。两个消费者同时绑定到不同的队列上去，两个队列通过路由键绑定到交换机上去，生产者发送消息到交换机，交换机通过路由键转发到不不同的队列中，队列绑定的消费者接收并消费消息。</p></blockquote><p><img src="https://s2.loli.net/2022/10/30/R1v7uBQiKAMJh3e.png" alt="img"></p><h4 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h4><p><img src="https://s2.loli.net/2022/10/30/HkeFym1pOzCuTso.png" alt="image-20221030224244880"></p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="添加路由模式相关Java配置"><a href="#添加路由模式相关Java配置" class="headerlink" title="添加路由模式相关Java配置"></a>添加路由模式相关Java配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;direct.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;direct.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingRed1</span><span class="params">(DirectExchange directExchange, Queue directQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingBlack1</span><span class="params">(DirectExchange directExchange, Queue directQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1).to(directExchange).with(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingYellow2</span><span class="params">(DirectExchange directExchange, Queue directQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBindingBlack2</span><span class="params">(DirectExchange directExchange, Queue directQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2).to(directExchange).with(<span class="string">&quot;black&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectSender <span class="title function_">directSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectReceiver <span class="title function_">directReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectReceiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生产者使用不同的路由键发送消息"><a href="#生产者使用不同的路由键发送消息" class="headerlink" title="生产者使用不同的路由键发送消息"></a>生产者使用不同的路由键发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">directExchange</span> <span class="operator">=</span> <span class="string">&quot;direct.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] keys = &#123;<span class="string">&quot;red&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;black&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys[limitIndex];</span><br><span class="line">        sb.append(key).append(<span class="string">&#x27; &#x27;</span>).append(index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(directExchange, key, message);</span><br><span class="line">        log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者从绑定的队列中获取消息"><a href="#消费者从绑定的队列中获取消息" class="headerlink" title="消费者从绑定的队列中获取消息"></a>消费者从绑定的队列中获取消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message, <span class="type">int</span> receive)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive : &#123;&#125;&quot;</span>, receive, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; done in &#123;&#125;s&quot;</span>, receive, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : message.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-RabbitListener注入和绑定"><a href="#使用-RabbitListener注入和绑定" class="headerlink" title="使用@RabbitListener注入和绑定"></a>使用@RabbitListener注入和绑定</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(name = &quot;direct.queue3&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;direct.exchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">            key = &#123;&quot;green&quot;, &quot;black&quot;&#125;</span></span><br><span class="line"><span class="meta">        ))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive3</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    receive(message, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="controller中添加测试接口-1"><a href="#controller中添加测试接口-1" class="headerlink" title="controller中添加测试接口"></a>controller中添加测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DirectSender directSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;路由模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/direct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">direct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            directSender.send(i);</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="https://s2.loli.net/2022/10/31/MyL5D9iWI6EncNj.png" alt="image-20221031180227318"></p><h3 id="通配符模式"><a href="#通配符模式" class="headerlink" title="通配符模式"></a>通配符模式</h3><blockquote><p>通配符模式是可以根据<strong>路由键匹配规则</strong>选择性给多个消费者发送消息的模式，它包含一个生产者、两个消费者、两个队列和一个交换机。</p><p>两个消费者同时绑定到不同的队列上去，两个队列通过<strong>路由键匹配规则</strong>绑定到交换机上去，生产者发送消息到交换机，交换机通过<strong>路由键匹配规则</strong>转发到不同的队列，队列绑定的消费者接收并消费消息。</p></blockquote><h4 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h4><blockquote><p>TopicExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以.分割</p></blockquote><p><img src="https://s2.loli.net/2022/11/01/IYJ1MFTc9XymoN8.png" alt="image-20221101162655587"></p><h4 id="特殊匹配符号"><a href="#特殊匹配符号" class="headerlink" title="特殊匹配符号"></a>特殊匹配符号</h4><ul><li>*：只能匹配一个单词</li><li>#：可以匹配零个或多个单词</li></ul><p><img src="https://s2.loli.net/2022/10/31/orAvR5WiqLbGFE2.png" alt="img"></p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="添加路由模式相关配置"><a href="#添加路由模式相关配置" class="headerlink" title="添加路由模式相关配置"></a>添加路由模式相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">TopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;topic.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">topicQueue3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;topic.queue3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TopicBinding1a</span><span class="params">(TopicExchange topicExchange, Queue topicQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(topicExchange).with(<span class="string">&quot;a.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TopicBinding1b</span><span class="params">(TopicExchange topicExchange, Queue topicQueue1)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1).to(topicExchange).with(<span class="string">&quot;*.b.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TopicBinding2b</span><span class="params">(TopicExchange topicExchange, Queue topicQueue2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2).to(topicExchange).with(<span class="string">&quot;*.*.c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicSender <span class="title function_">topicSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicSender</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicReceiver <span class="title function_">topicReceiver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicReceiver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="路由模式生产者发送消息"><a href="#路由模式生产者发送消息" class="headerlink" title="路由模式生产者发送消息"></a>路由模式生产者发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOPIC_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;topic.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String[] keys =&#123;<span class="string">&quot;a.z.1&quot;</span>, <span class="string">&quot;1.b.2&quot;</span>, <span class="string">&quot;1.3.c&quot;</span>, <span class="string">&quot;2.d.1&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">limitIndex</span> <span class="operator">=</span> index % keys.length;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys[limitIndex];</span><br><span class="line">        sb.append(key).append(<span class="string">&#x27; &#x27;</span>).append(index + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        rabbitTemplate.convertAndSend(TOPIC_EXCHANGE, key, message);</span><br><span class="line">        log.info(<span class="string">&quot;send：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="路由模式生产者接收消息"><a href="#路由模式生产者接收消息" class="headerlink" title="路由模式生产者接收消息"></a>路由模式生产者接收消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic.queue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(value = @Queue(&quot;topic.queue3&quot;),</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(name = &quot;topic.exchange&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">            key = &quot;#.d.#&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive3</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        receive(message, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String message, <span class="type">int</span> receive)</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; receive : &#123;&#125;&quot;</span>, receive, message);</span><br><span class="line">        doWork(message);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        log.info(<span class="string">&quot;instance &#123;&#125; done in &#123;&#125;s&quot;</span>, receive, stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">(String in)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : in.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/5SZpVEKsTCvhtcO.png" alt="image-20221101170653303"></p><h5 id="controller中添加测试接口-2"><a href="#controller中添加测试接口-2" class="headerlink" title="controller中添加测试接口"></a>controller中添加测试接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rabbit&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RabbitController&quot;, description = &quot;RabbitMQ Amqp功能测试控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DirectSender directSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;适配器模式消息队列发送消息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/topic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">topic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            topicSender.send(i);</span><br><span class="line">            ThreadUtil.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/LzsAn2MbK9kGh8U.png" alt="image-20221101170301498"></p><h3 id="MessageConverter消息转换器"><a href="#MessageConverter消息转换器" class="headerlink" title="MessageConverter消息转换器"></a>MessageConverter消息转换器</h3><blockquote><p>默认情况下，消息体被转换为二进制的数据方式进行传输，SpringAMQP将对象通过JDK的方式进行序列化，这种序列化方式存在一些问题：性能比较差，安全性存在隐患。</p></blockquote><h4 id="基于JDK的ObjectOutputStream进行序列化"><a href="#基于JDK的ObjectOutputStream进行序列化" class="headerlink" title="基于JDK的ObjectOutputStream进行序列化"></a>基于JDK的ObjectOutputStream进行序列化</h4><h5 id="新建队列"><a href="#新建队列" class="headerlink" title="新建队列"></a>新建队列</h5><p><img src="https://s2.loli.net/2022/11/01/HaSeQrKYhJBC6bD.png" alt="image-20221101175545469"></p><h5 id="对指定队列发送消息"><a href="#对指定队列发送消息" class="headerlink" title="对指定队列发送消息"></a>对指定队列发送消息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendObject</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(OBJECT_QUEUE, map);</span><br><span class="line">    log.info(<span class="string">&quot;send message: &#123;&#125;&quot;</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/6XGWVuKeESrRfjm.png" alt="image-20221101173403725"></p><h4 id="使用JSON方式进行序列化"><a href="#使用JSON方式进行序列化" class="headerlink" title="使用JSON方式进行序列化"></a>使用JSON方式进行序列化</h4><p><img src="https://s2.loli.net/2022/11/01/HDXnsqv6TA1Odtl.png" alt="image-20221101175642565"></p><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注入MessageConvert"><a href="#注入MessageConvert" class="headerlink" title="注入MessageConvert"></a>注入MessageConvert</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/01/CVzaqkP85upyHh9.png" alt="image-20221101174602598"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;消息队列-MQ&quot;&gt;&lt;a href=&quot;#消息队列-MQ&quot; class=&quot;headerlink&quot; title=&quot;消息队列-MQ&quot;&gt;&lt;/a&gt;消息队列-MQ&lt;/h1&gt;&lt;h2 id=&quot;同步通讯和异步通讯&quot;&gt;&lt;a href=&quot;#同步通讯和异步通讯&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="消息队列" scheme="http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="http://example.com/2022/07/31/Jenkins/"/>
    <id>http://example.com/2022/07/31/Jenkins/</id>
    <published>2022-07-31T14:30:55.000Z</published>
    <updated>2022-08-07T14:48:36.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><h2 id="Jenkins简介"><a href="#Jenkins简介" class="headerlink" title="Jenkins简介"></a>Jenkins简介</h2><blockquote><p>Jenkins是开源CI&amp;CD软件领导者，提供超过1000个插件来支持构建、部署、自动化，满足任何项目的需要。</p><p>我们可以利用Jenkins来构建和部署我们的项目，它可以实现从代码仓库获取代码，将代码打包成可执行文件并通过远程的ssh工具执行脚本来运行我们的项目。</p></blockquote><p><img src="https://s2.loli.net/2022/08/04/gYiXZ1eEJ6pGNTd.png" alt="image-20220804133922012"></p><h2 id="Jenkins的安装及配置"><a href="#Jenkins的安装及配置" class="headerlink" title="Jenkins的安装及配置"></a>Jenkins的安装及配置</h2><h3 id="Docker环境下的安装"><a href="#Docker环境下的安装" class="headerlink" title="Docker环境下的安装"></a>Docker环境下的安装</h3><h4 id="Docker拉取Jenkins镜像"><a href="#Docker拉取Jenkins镜像" class="headerlink" title="Docker拉取Jenkins镜像"></a>Docker拉取Jenkins镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><h4 id="创建并运行Jenkins容器"><a href="#创建并运行Jenkins容器" class="headerlink" title="创建并运行Jenkins容器"></a>创建并运行Jenkins容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins \</span><br><span class="line">-p 8090:8080 -p 50000:5000 \</span><br><span class="line">-u root \</span><br><span class="line">-v /mydata/jenkins_home:/var/jenkins_home \</span><br><span class="line">-d jenkins/jenkins</span><br></pre></td></tr></table></figure><h3 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h3><h4 id="访问地址登录"><a href="#访问地址登录" class="headerlink" title="访问地址登录"></a>访问地址登录</h4><p>访问：<a href="http://ip:8090/">http://ip:8090/</a>  登录Jenkins</p><p>第一次登录需要输入管理员密码</p><p><img src="https://s2.loli.net/2022/07/31/2BWi4KlMGbZShoJ.png" alt="image-20220731210839012"></p><h4 id="从容器启动日志中获取管理密码"><a href="#从容器启动日志中获取管理密码" class="headerlink" title="从容器启动日志中获取管理密码"></a>从容器启动日志中获取管理密码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs jenkins</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/31/EaN7eB5fJcOdytr.png" alt="image-20220731211050415"></p><h4 id="选择安装插件方式"><a href="#选择安装插件方式" class="headerlink" title="选择安装插件方式"></a>选择安装插件方式</h4><p><img src="https://s2.loli.net/2022/07/31/qvhQWOmyfEIapxj.png" alt="image-20220731211149198"></p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p><img src="https://s2.loli.net/2022/07/31/k4Tq1UyVX2wRzOD.png" alt="image-20220731211433814"></p><h4 id="创建管理员账号"><a href="#创建管理员账号" class="headerlink" title="创建管理员账号"></a>创建管理员账号</h4><p><img src="https://s2.loli.net/2022/07/31/KO3CWL7BrQmUedf.png" alt="image-20220731234318802"></p><h4 id="实例配置和URL"><a href="#实例配置和URL" class="headerlink" title="实例配置和URL"></a>实例配置和URL</h4><p><img src="https://s2.loli.net/2022/07/31/31ofj2SZpXdFRti.png" alt="image-20220731234553887"></p><h4 id="Jenkins首页"><a href="#Jenkins首页" class="headerlink" title="Jenkins首页"></a>Jenkins首页</h4><p><img src="https://s2.loli.net/2022/07/31/Ar8KLOsRhSPecnl.png" alt="image-20220731234720277"></p><h4 id="自定义插件安装"><a href="#自定义插件安装" class="headerlink" title="自定义插件安装"></a>自定义插件安装</h4><p><img src="https://s2.loli.net/2022/08/02/otOWaRM8INLqeK3.png" alt="image-20220802164924015"></p><h5 id="安装Docker构建插件"><a href="#安装Docker构建插件" class="headerlink" title="安装Docker构建插件"></a>安装Docker构建插件</h5><p><img src="https://s2.loli.net/2022/08/02/3VLnBNPZuizwfF2.png" alt="image-20220802223252918"></p><h5 id="安装角色管理插件"><a href="#安装角色管理插件" class="headerlink" title="安装角色管理插件"></a>安装角色管理插件</h5><p><img src="https://s2.loli.net/2022/08/02/MRckG5AvDF2p13f.png" alt="image-20220802223530182"></p><h5 id="安装SSH插件"><a href="#安装SSH插件" class="headerlink" title="安装SSH插件"></a>安装SSH插件</h5><p><img src="https://s2.loli.net/2022/08/02/4NUmuZdRkGtS6az.png" alt="image-20220802223821538"></p><h5 id="安装Email插件"><a href="#安装Email插件" class="headerlink" title="安装Email插件"></a>安装Email插件</h5><p><img src="https://s2.loli.net/2022/08/02/7gsDwSGOj9f6d8B.png" alt="image-20220802224256544"></p><h5 id="安装Maven项目打包插件"><a href="#安装Maven项目打包插件" class="headerlink" title="安装Maven项目打包插件"></a>安装Maven项目打包插件</h5><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220806214702640.png" alt="image-20220806214702640"></p><h4 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h4><h5 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h5><p><img src="https://s2.loli.net/2022/08/03/LzaqCbgJ2EkQF15.png" alt="image-20220803093615629"></p><h5 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h5><p><img src="https://s2.loli.net/2022/08/03/3FhdPVIKLjespvG.png" alt="image-20220803093953255"></p><h4 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h4><h5 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h5><p><img src="https://s2.loli.net/2022/08/02/NclUrxQKO3XFTCu.png" alt="image-20220802225402573"></p><h3 id="角色权限管理"><a href="#角色权限管理" class="headerlink" title="角色权限管理"></a>角色权限管理</h3><blockquote><p>通过Jenkins的角色管理插件来管理Jenkins的用户，比如我们可以给管理员赋予所有权限，运维人员赋予执行任务的相关权限，其他人员只赋予查看权限。</p></blockquote><h4 id="系统管理-gt-全局安全配置界面"><a href="#系统管理-gt-全局安全配置界面" class="headerlink" title="系统管理-&gt;全局安全配置界面"></a>系统管理-&gt;全局安全配置界面</h4><p><img src="https://s2.loli.net/2022/08/04/jMga8YrpFZRSqV6.png" alt="image-20220804131700882"></p><h4 id="启用基于角色的权限管理"><a href="#启用基于角色的权限管理" class="headerlink" title="启用基于角色的权限管理"></a>启用基于角色的权限管理</h4><p><img src="https://s2.loli.net/2022/08/04/YnThUx9impN2wkM.png" alt="image-20220804132005082"></p><h4 id="系统管理-gt-Manage-and-Assign-Roles界面"><a href="#系统管理-gt-Manage-and-Assign-Roles界面" class="headerlink" title="系统管理-&gt;Manage and Assign Roles界面"></a>系统管理-&gt;Manage and Assign Roles界面<img src="https://s2.loli.net/2022/08/04/M5XspnC1E4xIqot.png"></h4><p><img src="https://s2.loli.net/2022/08/04/M5XspnC1E4xIqot.png" alt="image-20220804132044412"></p><p><img src="https://s2.loli.net/2022/08/04/yqT5bEvWNrn4gsZ.png" alt="image-20220804132151926"></p><h5 id="添加角色和权限关系"><a href="#添加角色和权限关系" class="headerlink" title="添加角色和权限关系"></a>添加角色和权限关系</h5><p><img src="https://s2.loli.net/2022/08/04/oehJwEMbDNfymY3.png" alt="image-20220804132619633"></p><h5 id="给用户分配角色"><a href="#给用户分配角色" class="headerlink" title="给用户分配角色"></a>给用户分配角色</h5><p><img src="https://s2.loli.net/2022/08/04/3gb6j8x2wZ9VrXz.png" alt="image-20220804132806012"></p><h2 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h2><blockquote><p>GitLab 是一款使用MIT许可证的基于网络的Git仓库管理项目，使用Git作为代码管理工具，并在此基础上搭建起来的Web服务。</p></blockquote><h3 id="GitLab服务端搭建"><a href="#GitLab服务端搭建" class="headerlink" title="GitLab服务端搭建"></a>GitLab服务端搭建</h3><h4 id="拉取Gitlab镜像"><a href="#拉取Gitlab镜像" class="headerlink" title="拉取Gitlab镜像"></a>拉取Gitlab镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h4 id="创建并运行Gitlab容器"><a href="#创建并运行Gitlab容器" class="headerlink" title="创建并运行Gitlab容器"></a>创建并运行Gitlab容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --publish 10443:443 --publish 1080:80 --publish 1022:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /mydata/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /mydata/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /mydata/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><blockquote><p>将Gitlab的Http服务运行在宿主机的1080端口上</p><p>将Gitlab的配置、日志以及数据目录映射到宿主机的指定文件夹下，防止重新创建容器后丢失数据</p></blockquote><p><img src="https://s2.loli.net/2022/08/04/b6KxIU5CkdH7TYa.png" alt="image-20220804173347200"></p><h4 id="开启防火墙的指定端口"><a href="#开启防火墙的指定端口" class="headerlink" title="开启防火墙的指定端口"></a>开启防火墙的指定端口</h4><h5 id="开启1080端口"><a href="#开启1080端口" class="headerlink" title="开启1080端口"></a>开启1080端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=1080/tcp --permanent </span><br></pre></td></tr></table></figure><h5 id="重启防火墙生效"><a href="#重启防火墙生效" class="headerlink" title="重启防火墙生效"></a>重启防火墙生效</h5><blockquote><p>只有重启防火墙，开发端口才生效</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h5 id="查看已经开发的端口"><a href="#查看已经开发的端口" class="headerlink" title="查看已经开发的端口"></a>查看已经开发的端口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/04/k47zJwplcOEVnrW.png" alt="image-20220804222130047"></p><h4 id="访问Gitlab"><a href="#访问Gitlab" class="headerlink" title="访问Gitlab"></a>访问Gitlab</h4><h5 id="访问地址：http-xx-xxx-xxx-xxx-1080"><a href="#访问地址：http-xx-xxx-xxx-xxx-1080" class="headerlink" title="访问地址：http://xx.xxx.xxx.xxx:1080/"></a>访问地址：<a href="http://xx.xxx.xxx.xxx:1080/">http://xx.xxx.xxx.xxx:1080/</a></h5><p><img src="https://s2.loli.net/2022/08/04/V8o6qUN9Yt2nQED.png" alt="image-20220804223454356"></p><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs gitlab -f</span><br></pre></td></tr></table></figure><h5 id="初次重置root账号密码"><a href="#初次重置root账号密码" class="headerlink" title="初次重置root账号密码"></a>初次重置root账号密码</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"><span class="comment"># 进入控制台</span></span><br><span class="line">gitlab-rails console -e production</span><br><span class="line"><span class="comment"># 查询id为1的用户-超级管理员</span></span><br><span class="line">user = User.<span class="built_in">where</span>(<span class="built_in">id</span>:1).first</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">user.password=<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment"># 保存密码</span></span><br><span class="line">user.save!</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p><img src="https://s2.loli.net/2022/08/04/tMEPjIaYfyGgwiB.png" alt="image-20220804225950579"></p><h5 id="选择创建项目、创建组织、创建账号"><a href="#选择创建项目、创建组织、创建账号" class="headerlink" title="选择创建项目、创建组织、创建账号"></a>选择创建项目、创建组织、创建账号</h5><p><img src="https://s2.loli.net/2022/08/06/5EmXiAa4xsIwhQy.png" alt="image-20220806195727566"></p><h5 id="创建组织"><a href="#创建组织" class="headerlink" title="创建组织"></a>创建组织</h5><p><img src="https://s2.loli.net/2022/08/06/l15FJx8Yj24cpGS.png" alt="image-20220806195930430"></p><h5 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h5><h6 id="进入添加用户界面"><a href="#进入添加用户界面" class="headerlink" title="进入添加用户界面"></a>进入添加用户界面</h6><p><img src="https://s2.loli.net/2022/08/06/T36el2zKFfQ8RAw.png" alt="image-20220806200319437"></p><p><img src="https://s2.loli.net/2022/08/06/wQpRblBvsak9VYH.png" alt="image-20220806200424138"></p><h6 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h6><p><img src="https://s2.loli.net/2022/08/06/bgiZIhT8GvceSKH.png" alt="image-20220806200739851"></p><h6 id="编辑页面中修改用户密码"><a href="#编辑页面中修改用户密码" class="headerlink" title="编辑页面中修改用户密码"></a>编辑页面中修改用户密码</h6><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/08/06/85wkLZfnMXoljC4.png" alt="image-20220806200950920"></h6><p><img src="https://s2.loli.net/2022/08/06/2VJk1jPlW8EivAo.png" alt="image-20220806201032717"></p><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p><img src="https://s2.loli.net/2022/08/06/2B9VUzFDuri6Mj5.png" alt="image-20220806201200515"></p><p><img src="https://s2.loli.net/2022/08/06/KYG1MAyzTZ3QnJL.png" alt="image-20220806201145180"></p><p><img src="https://s2.loli.net/2022/08/06/6chXSEmjrqFxK9y.png" alt="image-20220806201253761"></p><h5 id="将用户分配组织"><a href="#将用户分配组织" class="headerlink" title="将用户分配组织"></a>将用户分配组织</h5><p><img src="https://s2.loli.net/2022/08/06/9Wino6RGZ2Ml7Xr.png" alt="image-20220806201620424"></p><h5 id="本地推送"><a href="#本地推送" class="headerlink" title="本地推送"></a>本地推送</h5><h6 id="克隆url"><a href="#克隆url" class="headerlink" title="克隆url"></a>克隆url</h6><p><img src="https://s2.loli.net/2022/08/06/WFu8TM5zDsRmc2U.png" alt="image-20220806202639878"></p><h6 id="IDEA绑定远程"><a href="#IDEA绑定远程" class="headerlink" title="IDEA绑定远程"></a>IDEA绑定远程</h6><p><img src="https://s2.loli.net/2022/08/06/XkU2nmvu5jLT7QN.png" alt="image-20220806202939887"></p><p><img src="https://s2.loli.net/2022/08/06/pthyoQqRWzs35Mm.png" alt="image-20220806202955038"></p><h6 id="输入用户名和密码"><a href="#输入用户名和密码" class="headerlink" title="输入用户名和密码"></a>输入用户名和密码</h6><p><img src="https://s2.loli.net/2022/08/06/u5kGnR9EBrMbl7I.png" alt="image-20220806202920027"></p><h6 id="推送本地仓库"><a href="#推送本地仓库" class="headerlink" title="推送本地仓库"></a>推送本地仓库</h6><p><img src="https://s2.loli.net/2022/08/06/5d9TvSKjyPBYMqI.png" alt="image-20220806203101897"></p><h6 id="推送远端仓库"><a href="#推送远端仓库" class="headerlink" title="推送远端仓库"></a>推送远端仓库</h6><p><img src="https://s2.loli.net/2022/08/06/RPLcoQCfJ9x41Ur.png" alt="image-20220806203815604"></p><h6 id="推送成功"><a href="#推送成功" class="headerlink" title="推送成功"></a>推送成功</h6><p><img src="https://s2.loli.net/2022/08/06/kxfl2T73YRFurKz.png" alt="image-20220806204147005"></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h4><h5 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h5 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d  \</span><br><span class="line">-v /mydata/mysql/log:/logs \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><h5 id="进入运行MySQL的docker容器"><a href="#进入运行MySQL的docker容器" class="headerlink" title="进入运行MySQL的docker容器"></a>进入运行MySQL的docker容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><h5 id="使用MySQL命令打开客户端"><a href="#使用MySQL命令打开客户端" class="headerlink" title="使用MySQL命令打开客户端"></a>使用MySQL命令打开客户端</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot --default-character-set=utf8</span><br></pre></td></tr></table></figure><h5 id="创建一个reader-123456帐号并修改权限"><a href="#创建一个reader-123456帐号并修改权限" class="headerlink" title="创建一个reader:123456帐号并修改权限"></a>创建一个<code>reader:123456</code>帐号并修改权限</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;reader&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* to &#x27;reader&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><h5 id="拉取Redis镜像"><a href="#拉取Redis镜像" class="headerlink" title="拉取Redis镜像"></a>拉取Redis镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><h5 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure><h5 id="进入运行Redis的docker容器"><a href="#进入运行Redis的docker容器" class="headerlink" title="进入运行Redis的docker容器"></a>进入运行Redis的docker容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure><h4 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h4><h5 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h5 id="运行容器拷贝配置文件"><a href="#运行容器拷贝配置文件" class="headerlink" title="运行容器拷贝配置文件"></a>运行容器拷贝配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h5 id="将容器内的配置文件拷贝到指定目录"><a href="#将容器内的配置文件拷贝到指定目录" class="headerlink" title="将容器内的配置文件拷贝到指定目录"></a>将容器内的配置文件拷贝到指定目录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container cp nginx:/etc/nginx /mydata/nginx/</span><br></pre></td></tr></table></figure><h5 id="修改文件名称"><a href="#修改文件名称" class="headerlink" title="修改文件名称"></a>修改文件名称</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mydata/nginx</span><br><span class="line">mv nginx conf</span><br></pre></td></tr></table></figure><h5 id="终止并删除容器"><a href="#终止并删除容器" class="headerlink" title="终止并删除容器"></a>终止并删除容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker rm nginx</span><br></pre></td></tr></table></figure><h5 id="启动Nginx服务"><a href="#启动Nginx服务" class="headerlink" title="启动Nginx服务"></a>启动Nginx服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><h3 id="准备执行脚本"><a href="#准备执行脚本" class="headerlink" title="准备执行脚本"></a>准备执行脚本</h3><blockquote><p>脚本文件存放在项目的/document/sh目录下</p></blockquote><h4 id="修改脚本文件的换行符格式为LF"><a href="#修改脚本文件的换行符格式为LF" class="headerlink" title="修改脚本文件的换行符格式为LF"></a>修改脚本文件的换行符格式为LF</h4><p><img src="https://s2.loli.net/2022/08/07/QE3xNC9LiadmS2g.png"></p><h4 id="上传脚本文件至指定目录"><a href="#上传脚本文件至指定目录" class="headerlink" title="上传脚本文件至指定目录"></a>上传脚本文件至指定目录</h4><blockquote><p>将所有的脚本文件上传至/mydata/sh目录下</p></blockquote><p><img src="https://s2.loli.net/2022/08/07/RkQwzPKvGDdAOJm.png" alt="image-20220807022412347"></p><h4 id="所有的脚本文件修改为可执行文件"><a href="#所有的脚本文件修改为可执行文件" class="headerlink" title="所有的脚本文件修改为可执行文件"></a>所有的脚本文件修改为可执行文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./demo-admin.sh</span><br></pre></td></tr></table></figure><h3 id="创建执行任务"><a href="#创建执行任务" class="headerlink" title="创建执行任务"></a>创建执行任务</h3><h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><p><img src="https://s2.loli.net/2022/08/06/EyJiIrb9etWCS8u.png" alt="image-20220806230804597"></p><h4 id="选择构建软件项目"><a href="#选择构建软件项目" class="headerlink" title="选择构建软件项目"></a>选择构建软件项目</h4><p><img src="https://s2.loli.net/2022/08/06/LBXbq8oU6KHwzmc.png" alt="image-20220806230836921"></p><h4 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h4><h5 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h5><p><img src="https://s2.loli.net/2022/08/06/I2ZreOU43o8FyRk.png" alt="image-20220806231912987"></p><h5 id="添加凭证"><a href="#添加凭证" class="headerlink" title="添加凭证"></a>添加凭证</h5><p><img src="https://s2.loli.net/2022/08/06/7j2vk9STgsd3aUi.png" alt="image-20220806232043170"></p><h5 id="选择凭证"><a href="#选择凭证" class="headerlink" title="选择凭证"></a>选择凭证</h5><p><img src="https://s2.loli.net/2022/08/06/oduhxkfWvNsHPCS.png" alt="image-20220806232110904"></p><h5 id="添加调用顶层maven目标的构建"><a href="#添加调用顶层maven目标的构建" class="headerlink" title="添加调用顶层maven目标的构建"></a>添加调用顶层maven目标的构建</h5><blockquote><p>用于把源码打包成Docker镜像并上传到Docker镜像仓库    </p></blockquote><p>先构建项目的依赖模块，否则当构建可运行的服务模块时会因为无法找到这些模块而构建失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean install -pl demo-common</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/07/o7CwriaUMdmFy2e.png" alt="image-20220807024029026"></p><p><img src="https://s2.loli.net/2022/08/07/its6yEFB5omnjzQ.png" alt="image-20220807024157644"></p><h5 id="添加一个执行远程shell脚本的构建"><a href="#添加一个执行远程shell脚本的构建" class="headerlink" title="添加一个执行远程shell脚本的构建"></a>添加一个执行远程shell脚本的构建</h5><blockquote><p>用于在镜像打包完成后执行启动Docker容器的.sh脚本</p></blockquote><p><img src="https://s2.loli.net/2022/08/07/kBNtoK2dSyzbQZx.png" alt="image-20220807024249753"></p><h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><p><img src="https://s2.loli.net/2022/08/07/saTQqZlxyfzLrXY.png" alt="image-20220807224609871"></p><h5 id="运行成功访问-Swagger-API文档"><a href="#运行成功访问-Swagger-API文档" class="headerlink" title="运行成功访问 Swagger API文档"></a>运行成功访问 Swagger API文档</h5><p><img src="https://s2.loli.net/2022/08/07/nGKs5OlYM6JickB.png" alt="image-20220807224823488"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jenkins&quot;&gt;&lt;a href=&quot;#Jenkins&quot; class=&quot;headerlink&quot; title=&quot;Jenkins&quot;&gt;&lt;/a&gt;Jenkins&lt;/h1&gt;&lt;h2 id=&quot;Jenkins简介&quot;&gt;&lt;a href=&quot;#Jenkins简介&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Jenkins" scheme="http://example.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba（三） Seata</title>
    <link href="http://example.com/2022/07/24/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%89%EF%BC%89Seata/"/>
    <id>http://example.com/2022/07/24/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%89%EF%BC%89Seata/</id>
    <published>2022-07-24T12:35:22.000Z</published>
    <updated>2022-08-08T14:49:43.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba（三）Seata"><a href="#Spring-Cloud-Alibaba（三）Seata" class="headerlink" title="Spring Cloud Alibaba（三）Seata"></a>Spring Cloud Alibaba（三）Seata</h1><blockquote><p>Seate是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</p><p>Seata将为用户提供了AT、TCC、SAGA和XA事务模型，为用户打造一站式的分布式解决方案。    </p></blockquote><p><img src="https://s2.loli.net/2022/07/25/F4Y3lbW6nKVSiRx.png" alt="img"></p><h2 id="项目场景搭建"><a href="#项目场景搭建" class="headerlink" title="项目场景搭建"></a>项目场景搭建</h2><h3 id="逻辑约定"><a href="#逻辑约定" class="headerlink" title="逻辑约定"></a>逻辑约定</h3><blockquote><p>图书借阅流程：调用图书服务书籍数量减1-&gt;添加借阅记录-&gt;调用用户服务可借阅数减1</p><p>约束：每个用户最多同时借阅2本不用的书，图书馆中的所有书都有且仅有3本</p></blockquote><h3 id="数据库修改"><a href="#数据库修改" class="headerlink" title="数据库修改"></a>数据库修改</h3><h4 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h4><p>添加字段book_count记录用户可借阅书籍数量</p><p><img src="https://s2.loli.net/2022/07/25/GwQxjFXoKHWsvtd.png" alt="image-20220725104408740"></p><h4 id="书籍表"><a href="#书籍表" class="headerlink" title="书籍表"></a>书籍表</h4><p>添加字段count记录书籍剩余数量</p><p><img src="https://s2.loli.net/2022/07/25/Ser7pQMnhFjltcK.png" alt="image-20220725104307273"></p><h3 id="服务修改"><a href="#服务修改" class="headerlink" title="服务修改"></a>服务修改</h3><h4 id="borrow-service"><a href="#borrow-service" class="headerlink" title="borrow-service"></a>borrow-service</h4><h5 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h5><h6 id="BorrowMapper-java"><a href="#BorrowMapper-java" class="headerlink" title="BorrowMapper.java"></a>BorrowMapper.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BorrowMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询借阅列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Borrow&gt; <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增借阅记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BorrowMapper-xml"><a href="#BorrowMapper-xml" class="headerlink" title="BorrowMapper.xml"></a>BorrowMapper.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.dao.BorrowMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBorrow&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Borrow&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM borrow_info</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uid != null&quot;</span>&gt;</span> uid = #&#123;uid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bid != null&quot;</span>&gt;</span> and bid = #&#123;bid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBorrow&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.test.entity.Borrow&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO borrow_info (id, uid, bid)</span><br><span class="line">        VALUES (null, #&#123;uid&#125;, #&#123;bid&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h5><h6 id="BorrowService-java"><a href="#BorrowService-java" class="headerlink" title="BorrowService.java"></a>BorrowService.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span>;</span><br><span class="line"></span><br><span class="line">    BookBorrowDetail <span class="title function_">getBorrowByBook</span><span class="params">(Long bid)</span>;</span><br><span class="line"></span><br><span class="line">    BorrowDetail <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">borrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BorrowServiceImpl-java"><a href="#BorrowServiceImpl-java" class="headerlink" title="BorrowServiceImpl.java"></a>BorrowServiceImpl.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;AliControlFlowStatementWithoutBraces&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowMapper borrowMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">borrow</span><span class="params">(Long uid, Long bid)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询用户余量</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(uid);</span><br><span class="line">        log.info(<span class="string">&quot;&quot;</span> + user);</span><br><span class="line">        <span class="keyword">if</span> (user.getCount() &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户借阅数达到上限&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询图书余量</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(bid);</span><br><span class="line">        <span class="keyword">if</span> (book.getCount() &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;图书数量不足&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用图书服务：图书数量减1</span></span><br><span class="line">        <span class="keyword">if</span> (!bookService.borrow(bid)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;调用图书服务出错&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用借阅服务：先查后插</span></span><br><span class="line">        <span class="keyword">if</span> (!borrowMapper.getBorrow(uid, bid).isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户已经借阅过此书&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (borrowMapper.addBorrow(uid, bid) &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;借阅信息添加失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用用户服务：可借阅数减1</span></span><br><span class="line">        <span class="keyword">if</span> (!userService.borrow(bid)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;调用用户服务出错&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h5><h6 id="BorrowController-java"><a href="#BorrowController-java" class="headerlink" title="BorrowController.java"></a>BorrowController.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;UserController&quot;, description = &quot;用户信息管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;图书借阅&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/&#123;uid&#125;/&#123;bid&#125;&quot;, produces = &quot;application/json;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JSONObject <span class="title function_">borrow</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span> <span class="meta">@ApiParam(&quot;用户id&quot;)</span> Long uid,</span></span><br><span class="line"><span class="params">                             <span class="meta">@PathVariable(&quot;bid&quot;)</span> <span class="meta">@ApiParam(&quot;图书id&quot;)</span> Long bid)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加借阅信息</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> borrowService.borrow(uid, bid);</span><br><span class="line">        <span class="comment">// 创建JSON对象并返回</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            jsonObject.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">            jsonObject.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            jsonObject.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;借阅成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        jsonObject.put(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;借阅失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h2><h3 id="XA-2PC"><a href="#XA-2PC" class="headerlink" title="XA-2PC"></a>XA-2PC</h3><blockquote><p>XA是一种典型的两阶段提交（2PC，Two-phase commit protocal）</p><p>两阶段提交协议 ，它分为两个阶段，一个是准备一个是提交。</p><p>整个过程的参与者一共有两个角色，一个是事务的执行者，一个是事务的协调者，实际上整个分布式事务的运作都需要依靠协调者来维持。</p></blockquote><p>为了实现二阶段提交算法的成立基于以下假设：</p><ul><li>该分布式系统中，存在一个节点作为协调者（Coordinator），其他节点作为参与者（Cohorts），节点之间可以进行网络通信</li><li>所有节点都采用预写式日志，且日志被写入后即保持在可靠的存储设备上，即使损坏不会导致日志数据的消失</li><li>所有节点不会永久性损坏，即使损坏后仍然可以恢复</li></ul><h4 id="第一阶段（投票阶段）"><a href="#第一阶段（投票阶段）" class="headerlink" title="第一阶段（投票阶段）"></a>第一阶段（投票阶段）</h4><p>1、协调者节点向所有参与者节点询问是否可以执行提交操作（vote），并开始等待各参与者节点的响应</p><p>2、参与者节点执行询问发起为止的所有事务操作，并将Undo信息和Redo信息写入日志。（注意：若成功这里其实每个参与者已经执行了事务操作）</p><p>3、各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个“同意”消息；如果参与者节点的事务操作失败实际执行失败，则它返回一个“中止”消息</p><h4 id="第二阶段（提交执行阶段）"><a href="#第二阶段（提交执行阶段）" class="headerlink" title="第二阶段（提交执行阶段）"></a>第二阶段（提交执行阶段）</h4><p>当协调者节点从所有参与者节点获得响应消息都为“同意”时：</p><ol><li>协调者节点向所有参与者节点发出”正式提交(commit)”的请求。</li><li>参与者节点正式完成操作，并释放在整个事务期间内占用的资源。</li><li>参与者节点向协调者节点发送”完成”消息。</li><li>协调者节点受到所有参与者节点反馈的”完成”消息后，完成事务。</li></ol><p>如果任一参与者节点在第一阶段返回的响应消息为”中止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：</p><ol><li>协调者节点向所有参与者节点发出”回滚操作(rollback)”的请求。</li><li>参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</li><li>参与者节点向协调者节点发送”回滚完成”消息。</li><li>协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。</li></ol><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><h3 id="TTC"><a href="#TTC" class="headerlink" title="TTC"></a>TTC</h3><h3 id="SAGA"><a href="#SAGA" class="headerlink" title="SAGA"></a>SAGA</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Alibaba（三）Seata&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba（三）Seata&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba（三）Seata&quot;&gt;&lt;/a&gt;Sp</summary>
      
    
    
    
    
    <category term="Spring Cloud Alibaba" scheme="http://example.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="http://example.com/2022/07/01/MyBatis-Plus/"/>
    <id>http://example.com/2022/07/01/MyBatis-Plus/</id>
    <published>2022-07-01T00:30:56.000Z</published>
    <updated>2022-07-05T13:54:34.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MyBatis-Plus（简称 MP）是一个MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><ul><li>官网：<a href="https://baomidou.com/">https://baomidou.com/</a></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="基于SpringBoot使用MyBatisPlus"><a href="#基于SpringBoot使用MyBatisPlus" class="headerlink" title="基于SpringBoot使用MyBatisPlus"></a>基于SpringBoot使用MyBatisPlus</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p><img src="https://s2.loli.net/2022/07/04/VlYCpIkfAzgH3wu.png" alt="image-20220704195430412"></p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><img src="https://s2.loli.net/2022/07/03/IbSVdrEvmGskcR8.png" alt="image-20220703221600684"></p><p><img src="https://s2.loli.net/2022/07/03/nxTRcVYSGKyzojF.png" alt="image-20220703221718341"></p><p><img src="https://s2.loli.net/2022/07/03/mGOnHF9SVepd7wc.png" alt="image-20220703221735710"></p><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220703221754550.png" alt="image-20220703221754550"></p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><img src="https://s2.loli.net/2022/07/04/WNrlHYELyPmvM89.png" alt="image-20220704194517877"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><p><img src="https://s2.loli.net/2022/07/04/n1XYzKqtGIxOwTE.png" alt="image-20220704194831358"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC</span><br><span class="line">    username: root</span><br><span class="line">    password: 13851176590++</span><br></pre></td></tr></table></figure><h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><p><img src="https://s2.loli.net/2022/07/04/nNHxoRC62AKiP1X.png" alt="image-20220704201230606"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyBatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p><img src="https://s2.loli.net/2022/07/04/xZJjp12CBfMNdO5.png" alt="image-20220704195648242"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Dao接口"><a href="#创建Dao接口" class="headerlink" title="创建Dao接口"></a>创建Dao接口</h3><p><img src="https://s2.loli.net/2022/07/04/aTIiVPgX5UFDtQe.png" alt="image-20220704195842852"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><p><img src="https://s2.loli.net/2022/07/04/K7SR9CkpzJMLx83.png" alt="image-20220704201317232"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusApplicationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyBatisPlusApplicationTest.class);</span><br><span class="line">    <span class="comment">// 查询列表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;用户列表：&quot;</span> + users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化日志输出"><a href="#简化日志输出" class="headerlink" title="简化日志输出"></a>简化日志输出</h3><h3 id="新建logback-xml配置文件"><a href="#新建logback-xml配置文件" class="headerlink" title="新建logback.xml配置文件"></a>新建logback.xml配置文件</h3><p><img src="https://s2.loli.net/2022/07/04/g9joR5d32ipSMfu.png" alt="image-20220704210131509"></p><h3 id="编辑配置-1"><a href="#编辑配置-1" class="headerlink" title="编辑配置"></a>编辑配置</h3><p><img src="https://s2.loli.net/2022/07/04/webUG67Zi1frnXu.png" alt="image-20220704210209383"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关闭Banner"><a href="#关闭Banner" class="headerlink" title="关闭Banner"></a>关闭Banner</h3><p><img src="https://s2.loli.net/2022/07/04/yESZHwJNGojrAvP.png" alt="image-20220704210523918"></p><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><img src="https://s2.loli.net/2022/07/04/T2s6JyKiP3NGrvA.png" alt="image-20220704201439508"></p><h2 id="标准数据层开发"><a href="#标准数据层开发" class="headerlink" title="标准数据层开发"></a>标准数据层开发</h2><p><img src="https://s2.loli.net/2022/07/04/WiwxaTBCVAgXKpk.png" alt="image-20220704202159031"></p><h3 id="新增操作"><a href="#新增操作" class="headerlink" title="新增操作"></a>新增操作</h3><p><img src="https://s2.loli.net/2022/07/04/ObWy1VauPNn6Xq4.png" alt="image-20220704202540481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>().setName(<span class="string">&quot;xiaohong&quot;</span>).setAge(<span class="number">21</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setTel(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/L4m8MXiF61YOjnE.png" alt="image-20220704202602872"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p><img src="https://s2.loli.net/2022/07/04/gfOkiT3swq4VuCc.png" alt="image-20220704202734472"></p><p><img src="https://s2.loli.net/2022/07/04/xcamHV8PCr1bNF6.png" alt="image-20220704202937068"></p><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><p><img src="https://s2.loli.net/2022/07/04/BfHdWkt7qgc1lPT.png" alt="image-20220704203046171"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>().setId(<span class="number">1L</span>).setAge(<span class="number">50</span>);</span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/Xr2EgxCIiRbKSGU.png" alt="image-20220704203202535"></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><h4 id="配置分页拦截器"><a href="#配置分页拦截器" class="headerlink" title="配置分页拦截器"></a>配置分页拦截器</h4><p><img src="https://s2.loli.net/2022/07/04/RKXDzwpqsF95f1B.png" alt="image-20220704204825107"></p><h4 id="编辑测试类"><a href="#编辑测试类" class="headerlink" title="编辑测试类"></a>编辑测试类</h4><p><img src="https://s2.loli.net/2022/07/04/iEoGZmYV9SxWPDB.png" alt="image-20220704203919463"></p><p><img src="https://s2.loli.net/2022/07/04/IybNWstEjixXU2B.png" alt="image-20220704204928225"></p><h3 id="添加日志输出"><a href="#添加日志输出" class="headerlink" title="添加日志输出"></a>添加日志输出</h3><p><img src="https://s2.loli.net/2022/07/04/NH62nAzhuaQF45L.png" alt="image-20220704205216716"></p><p><img src="https://s2.loli.net/2022/07/04/lTjzZktCs3cogQv.png" alt="image-20220704205339781"></p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="查看Wrapper抽象类"><a href="#查看Wrapper抽象类" class="headerlink" title="查看Wrapper抽象类"></a>查看Wrapper抽象类</h4><p><img src="https://s2.loli.net/2022/07/04/OSJUMWFP6Bqcys5.png" alt="image-20220704210847732"></p><p><img src="https://s2.loli.net/2022/07/04/CtLXeD4TWjhYOd5.png" alt="image-20220704213548048"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="comment">// 方法一：常规格式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        queryWrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).lt(<span class="string">&quot;age&quot;</span>, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法二：lambda格式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByQueryWrapperForLambda</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        queryWrapper.lambda().gt(User::getAge, <span class="number">20</span>).lt(User::getAge, <span class="number">40</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法三：lambda</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        <span class="comment">// 条件：age &gt; 20 and age &lt; 40</span></span><br><span class="line">        lambdaQueryWrapper.gt(User::getAge, <span class="number">20</span>).lt(User::getAge, <span class="number">40</span>);</span><br><span class="line">        <span class="comment">// 条件: age &lt; 20 or age &gt; 40</span></span><br><span class="line"><span class="comment">//        lambdaQueryWrapper.gt(User::getAge, 40).or().lt(User::getAge, 20);</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/uz7eTqv5EBdWP18.png" alt="image-20220704213630003"></p><h3 id="空值判定"><a href="#空值判定" class="headerlink" title="空值判定"></a>空值判定</h3><h4 id="新建用户查询条件类"><a href="#新建用户查询条件类" class="headerlink" title="新建用户查询条件类"></a>新建用户查询条件类</h4><p><img src="https://s2.loli.net/2022/07/04/nkEQNXK3FyjUCRJ.png" alt="image-20220704214625224"></p><h4 id="空值测试"><a href="#空值测试" class="headerlink" title="空值测试"></a>空值测试</h4><p><img src="https://s2.loli.net/2022/07/04/8dep1DPFxrmGWMy.png" alt="image-20220704215213584"></p><p><img src="https://s2.loli.net/2022/07/04/N5BaEh83bZP419D.png" alt="image-20220704215230612"></p><h4 id="空值判定方法"><a href="#空值判定方法" class="headerlink" title="空值判定方法"></a>空值判定方法</h4><h5 id="方法一：if条件语句控制"><a href="#方法一：if条件语句控制" class="headerlink" title="方法一：if条件语句控制"></a>方法一：if条件语句控制</h5><p><img src="https://s2.loli.net/2022/07/04/DlBUVuJ8HvCy174.png" alt="image-20220704220102139"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">![image-<span class="number">20220704220336783</span>](C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-<span class="number">20220704220336783.</span>png)    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getByIfNull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">        userQuery.setLowerAge(<span class="number">20</span>).setUpperAge(<span class="number">40</span>);</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">        <span class="keyword">if</span> (userQuery.getLowerAge() != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.gt(User::getAge, userQuery.getLowerAge());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userQuery.getUpperAge()![image-<span class="number">20220704220336783</span>](C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-<span class="number">20220704220336783.</span>png) != <span class="literal">null</span>) &#123;</span><br><span class="line">            lambdaQueryWrapper.lt(User::getAge, userQuery.getUpperAge());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">        users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="方法二：条件参数控制"><a href="#方法二：条件参数控制" class="headerlink" title="方法二：条件参数控制"></a>方法二：条件参数控制</h5><p><img src="https://s2.loli.net/2022/07/04/fPRTK49H3zQ6ivN.png" alt="image-20220704220338824"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">    userQuery.setLowerAge(<span class="number">20</span>).setUpperAge(<span class="number">40</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.gt(userQuery.getLowerAge() !=<span class="literal">null</span>, User::getAge, userQuery.getLowerAge())</span><br><span class="line">            .lt(userQuery.getUpperAge() != <span class="literal">null</span>, User::getAge, userQuery.getUpperAge());</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    users.forEach(user -&gt; logger.info(<span class="string">&quot;用户：&quot;</span> + user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h3><h4 id="情况一：LambdaQueryWrapper"><a href="#情况一：LambdaQueryWrapper" class="headerlink" title="情况一：LambdaQueryWrapper"></a>情况一：LambdaQueryWrapper</h4><p><img src="https://s2.loli.net/2022/07/04/8qbWkxlPuX9Iymt.png" alt="image-20220704223005342"></p><h4 id="情况二：QueryWrapper"><a href="#情况二：QueryWrapper" class="headerlink" title="情况二：QueryWrapper"></a>情况二：QueryWrapper</h4><p><img src="https://s2.loli.net/2022/07/04/louSRdXyOmbzP3K.png" alt="image-20220704223342994"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://s2.loli.net/2022/07/04/fTQmj3rYMwJekhF.png" alt="image-20220704223443857"></p><p><img src="https://s2.loli.net/2022/07/04/vq9ChcgLHtP4jXE.png" alt="image-20220704224013893"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计映射</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getTotal</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    <span class="comment">// 统计</span></span><br><span class="line">    queryWrapper.select(<span class="string">&quot;count(*) as total&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">// 分组</span></span><br><span class="line">    queryWrapper.groupBy(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; map = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/04/muenaT4qJSXiglC.png" alt="image-20220704224108616"></p><h3 id="查询条件设置"><a href="#查询条件设置" class="headerlink" title="查询条件设置"></a>查询条件设置</h3><blockquote><p>API查询地址：<a href="https://baomidou.com/pages/10c804/#nested">https://baomidou.com/pages/10c804/#nested</a></p></blockquote><h4 id="等值查询"><a href="#等值查询" class="headerlink" title="等值查询"></a>等值查询</h4><p><img src="https://s2.loli.net/2022/07/05/A4HdYjKVQlfoWmL.png" alt="image-20220705143514861"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录验证</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 等值设置</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.eq(User::getName, <span class="string">&quot;xiaomi&quot;</span>).eq(User::getPassword, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(lambdaQueryWrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/WzVSnBEOF4iLfR2.png" alt="image-20220705143605575"></p><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><p><img src="https://s2.loli.net/2022/07/05/z6NPrpcSVRQ5g3G.png" alt="image-20220705144336093"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 范围查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">between</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.between(User::getAge, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    users.forEach(user -&gt; &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/es7DbcGPHTV91Ng.png" alt="image-20220705144401989"></p><h4 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h4><p><img src="https://s2.loli.net/2022/07/05/iLc9gv7Wwz6jRXB.png" alt="image-20220705150836409"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 模糊匹配</span><br><span class="line">@Test</span><br><span class="line">void like() &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = new LambdaQueryWrapper&lt;User&gt;();</span><br><span class="line">    lambdaQueryWrapper.like(User::getName, &quot;xiao&quot;);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/mjPoTyDbBru6f8J.png" alt="image-20220705150855577"></p><h3 id="映射匹配"><a href="#映射匹配" class="headerlink" title="映射匹配"></a>映射匹配</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p><img src="https://s2.loli.net/2022/07/05/WCPMvJeKpEqwXbm.png" alt="image-20220705161614345"></p><h4 id="实体类映射"><a href="#实体类映射" class="headerlink" title="实体类映射"></a>实体类映射</h4><p><img src="https://s2.loli.net/2022/07/05/IpW5PfzvLd3yJit.png" alt="image-20220705153154091"></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p><img src="https://s2.loli.net/2022/07/05/83eSRXGUdr47OPC.png" alt="image-20220705153059547"></p><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><h4 id="id生成策略控制"><a href="#id生成策略控制" class="headerlink" title="id生成策略控制"></a>id生成策略控制</h4><h5 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h5><p><img src="https://s2.loli.net/2022/07/05/whrVJzOZ9PjQX32.png" alt="image-20220705153402857"></p><p><img src="https://s2.loli.net/2022/07/05/2d1gYXCO4ieHKyr.png" alt="image-20220705162607843"></p><h5 id="TableId-注释"><a href="#TableId-注释" class="headerlink" title="@TableId()注释"></a>@TableId()注释</h5><p><img src="https://s2.loli.net/2022/07/05/DBLzAexgcXUFOJr.png" alt="image-20220705162205585"></p><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><p><img src="https://s2.loli.net/2022/07/05/cgwSDZmkHB7p8UF.png" alt="image-20220705162417709"></p><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><p><img src="https://s2.loli.net/2022/07/05/BAChWpUK2GSYOvw.png" alt="image-20220705163327730"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment"># MybatisPlus日志输出</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span>  <span class="comment"># 关闭MybatisPlus的banner</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">assign_id</span> <span class="comment"># id生成算法全局配置</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">ums_</span> <span class="comment"># 表名前缀</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/BqRU3z8GOaibAD9.png" alt="image-20220705163517590"></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p><img src="https://s2.loli.net/2022/07/05/Ccr8Gd1kY9Ighil.png" alt="image-20220705164213057"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">batchDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 数组转List</span></span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Long</span>[]&#123;<span class="number">1544234982638149633L</span>, <span class="number">1544235553495506945L</span>&#125;);</span><br><span class="line">    <span class="comment">// 批量删除</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/xj8K5t3P7i1ygvc.png" alt="image-20220705164313573"></p><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><h5 id="数据库添加逻辑删除字段"><a href="#数据库添加逻辑删除字段" class="headerlink" title="数据库添加逻辑删除字段"></a>数据库添加逻辑删除字段</h5><p><img src="https://s2.loli.net/2022/07/05/rcDVjAvUZdJy9gT.png" alt="image-20220705164959329"></p><h5 id="实体类添加字段并设定逻辑删除标记字段"><a href="#实体类添加字段并设定逻辑删除标记字段" class="headerlink" title="实体类添加字段并设定逻辑删除标记字段"></a>实体类添加字段并设定逻辑删除标记字段</h5><p><img src="https://s2.loli.net/2022/07/05/FbgmX5f2xr1Lypv.png" alt="image-20220705165955206"></p><h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><p><img src="https://s2.loli.net/2022/07/05/bSvn3OKD7qirkcE.png" alt="image-20220705165752771"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByLogic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/oka1gPs5QYwj7y3.png" alt="image-20220705170207379"></p><p><img src="https://s2.loli.net/2022/07/05/zf4xI1H3yVTQarn.png" alt="image-20220705170231137"></p><p><img src="https://s2.loli.net/2022/07/05/W6FEfJpzAuXLYoh.png" alt="image-20220705170936129"></p><p><img src="https://s2.loli.net/2022/07/05/56EolZ7DBLyRWiN.png" alt="image-20220705170909635"></p><h5 id="全局配置-1"><a href="#全局配置-1" class="headerlink" title="全局配置"></a>全局配置</h5><p><img src="https://s2.loli.net/2022/07/05/OicB8YvU3Cb6XRe.png" alt="image-20220705170536943"></p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><blockquote><p>当更新一条记录时，希望这条记录没有被别人更新</p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时，set version = newVersion where version = oldVersion </li><li>如果version不对，更新失败</li></ul><h5 id="数据库添加字段"><a href="#数据库添加字段" class="headerlink" title="数据库添加字段"></a>数据库添加字段</h5><p><img src="https://s2.loli.net/2022/07/05/ENG2Kzlu1fRI5vb.png" alt="image-20220705173918160"></p><h5 id="实体类添加字段"><a href="#实体类添加字段" class="headerlink" title="实体类添加字段"></a>实体类添加字段</h5><p><img src="https://s2.loli.net/2022/07/05/ODw1Xk7B35MVc2z.png" alt="image-20220705174101440"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span><span class="comment">/*对象链式赋值*/</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="comment">//@TableName(&quot;ums_user&quot;)/*表名映射*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//    @TableId(type = IdType.ASSIGN_ID)/*id生成策略*/</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;pwd&quot;, select = false)</span><span class="comment">/*表名映射*/</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer online;</span><br><span class="line">    <span class="meta">@TableField(value = &quot;is_delete&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;<span class="comment">/*乐观锁Version*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h5><p><img src="https://s2.loli.net/2022/07/05/GVY9r2ilmWX1MSL.png" alt="image-20220705174204504"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatisPlus配置类</span></span><br><span class="line"><span class="comment"> * Created by YuanJW on 2022/7/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定义MyBatisPlus拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="comment">// 添加乐观锁拦截器</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h5><p><img src="https://s2.loli.net/2022/07/05/EMJO9BXxTzNf3aZ.png" alt="image-20220705175322928"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乐观锁</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>().setId(<span class="number">3L</span>).setName(<span class="string">&quot;aa&quot;</span>)</span><br><span class="line">            .setVersion(<span class="number">1</span>); <span class="comment">// setVersion()开启锁机制</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/5kiRXcB7jhpKYDr.png" alt="image-20220705175127188"></p><h5 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h5><p><img src="https://s2.loli.net/2022/07/05/qBsbxmpDEkZOMiz.png" alt="image-20220705180306328"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并发测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateByConcurrency</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userMapper.selectById(<span class="number">3L</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">3L</span>);</span><br><span class="line">    user1.setName(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count1</span> <span class="operator">=</span> userMapper.updateById(user1);</span><br><span class="line">    user2.setName(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count2</span> <span class="operator">=</span> userMapper.updateById(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/05/tGpS3bOjHLc1NrQ.png" alt="image-20220705180403752"></p><p><img src="https://s2.loli.net/2022/07/05/kz6JydZq7DF8cLT.png" alt="image-20220705180423160"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><p><img src="https://s2.loli.net/2022/07/05/g8SZmydK2lGXM1H.png" alt="image-20220705211930870"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MP代码生成器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- velocity模板引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加代码自动生成器类"><a href="#添加代码自动生成器类" class="headerlink" title="添加代码自动生成器类"></a>添加代码自动生成器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码自动生成器</span></span><br><span class="line"><span class="comment"> * Created by YuanJW on 2022/7/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代码生成器对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">autoGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dataSourceConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatisplus_db?serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;13851176590++&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line">        <span class="comment">// 设置全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">globalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        globalConfig.setOutputDir(<span class="string">&quot;D:\\Users\\YuanJW\\Desktop\\Java Learn\\MyBatis-Plus\\MyBatisPlusGenerator\\src\\main\\java&quot;</span>)  <span class="comment">//文件输出位置</span></span><br><span class="line">                .setOpen(<span class="literal">false</span>)</span><br><span class="line">                .setAuthor(<span class="string">&quot;xiaoyuanjw&quot;</span>)</span><br><span class="line">                .setFileOverride(<span class="literal">true</span>)</span><br><span class="line">                .setMapperName(<span class="string">&quot;%sMapper&quot;</span>)</span><br><span class="line">                .setIdType(IdType.ASSIGN_ID);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line">        <span class="comment">// 设置包名相关配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">packageConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.example.demo&quot;</span>)</span><br><span class="line">                .setEntity(<span class="string">&quot;domain&quot;</span>)</span><br><span class="line">                .setMapper(<span class="string">&quot;dao&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line">        <span class="comment">// 策略设置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategyConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;ums_user&quot;</span>)</span><br><span class="line">                .setTablePrefix(<span class="string">&quot;ums_&quot;</span>)</span><br><span class="line">                .setRestControllerStyle(<span class="literal">true</span>)</span><br><span class="line">                .setVersionFieldName(<span class="string">&quot;version&quot;</span>)</span><br><span class="line">                .setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>)</span><br><span class="line">                .setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line">        <span class="comment">// 执行代码生成器</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成结构"><a href="#生成结构" class="headerlink" title="生成结构"></a>生成结构</h3><p><img src="https://s2.loli.net/2022/07/05/1E6pqCjr5xTSsDL.png" alt="image-20220705214654400"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-Plus&quot;&gt;&lt;a href=&quot;#MyBatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;MyBatis-Plus&quot;&gt;&lt;/a&gt;MyBatis-Plus&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="MyBatis-Plus" scheme="http://example.com/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2022/06/26/Docker/"/>
    <id>http://example.com/2022/06/26/Docker/</id>
    <published>2022-06-26T02:31:22.000Z</published>
    <updated>2022-09-02T08:27:14.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>大型项目组件和运行环境相对复杂，部署时会碰到很多问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境存在差异，不同部署的服务器存在差异</li></ul><p><img src="https://s2.loli.net/2022/06/26/r5743fEk9wOiKhv.png" alt="image-20220626105249118"></p><h4 id="Docker问题解决"><a href="#Docker问题解决" class="headerlink" title="Docker问题解决"></a>Docker问题解决</h4><p>Docker如何解决依赖兼容问题</p><ul><li><p>将应用的Libs（函数库），Deps（依赖）、配置与应用一起打包</p></li><li><p>将某个应用放到一个隔离容器去运行，避免相互干扰</p></li></ul><p>Docker如何解决不同环境的操作系统不同的问题：</p><p>要解决这个问题，先要了解一下操作系统结构</p><p><img src="https://s2.loli.net/2022/06/26/DHvj5VXgmzCwYaS.png"></p><blockquote><p>内核与硬件交互，提供操作硬件的指令</p><p>系统应用封装内核指令为函数，便于程序员调用，用户程序基于系统函数库实现功能</p></blockquote><p>例如：Ubuntu和CentOS都是基于Linux内核，只是系统应用不同，提供的函数库存在差异，这就是用户程序不能跨系统运行的原因。</p><ul><li>Docker将用户程序与所需要调用的系统函数库一起打包</li><li>用户程序在运行到不同操作系统时，直接基于打包好的库函数，借助于操作系统的Linux内核来运行</li></ul><p><img src="https://s2.loli.net/2022/06/26/iKTZhF1REUst5e4.png" alt="image-20220626111505029"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Docker是一个开源的应用容器引擎</p><ul><li><p>Docker允许将开发中将应用、依赖、函数库、配置打包形成可移植的镜像</p></li><li><p>Docker应用运行在容器中，使用沙箱机制，相互隔离</p></li><li><p>Docker镜像中包含完整运行环境，包括系统库函数，仅依赖系统的Linux内核，因此可以发布到任意Linux操作系统上运行，实现虚拟化</p></li></ul><h3 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h3><p><img src="https://s2.loli.net/2022/07/12/ei2P8JBlgIRf7zM.png" alt="image-20220630181037698"></p><p>Docker是一个系统进程，而虚拟机是操作系统中的操作系统</p><p> 虚拟机在操作系统中模拟硬件设备，然后运行另一个操作系统，例如在window系统中运行一个Ubuntu系统。</p><p>可以运行任意的Ubuntu应用。</p><p><img src="https://s2.loli.net/2022/06/26/vfJxEPaWudS8htT.png" alt="image-20220626121645356"></p><table><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>性能</td><td>接近原生</td><td>性能较差</td></tr><tr><td>硬盘占用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p><img src="https://s2.loli.net/2022/07/12/b19DXow3ejd7qgi.png" alt="image-20220630184857540"></p><p>Docker包括三个基本概念</p><ul><li><p>镜像（Image）：相当于一个root文件系统，Docker将应用程序及其依赖、函数库、环境、配置等文件打包在一起形成镜像文件。</p></li><li><p>容器（Container）：镜像中的应用程序运行后形成的进程就是容器，Docker对容器进行隔离，有独立的CPU、内存 等，对外不可见。</p><blockquote><p>镜像和容器的关系，类似于面向对象程序设计中的类和实例一样，Docker容器通过Docker镜像来创建。镜像是静态的定义,时用于创建Docker容器的模板，容器是镜像运行时的实体，是独立运行的一个或一组应用。容器可以被创建、启动、停止、删除、暂停等。</p></blockquote><p><img src="https://s2.loli.net/2022/06/26/zVtjlXbnEsQu6CT.png" alt="image-20220626125142458"></p></li><li><p>仓库（Repository）：一个代码控制中心，用来保存镜像。</p></li></ul><p><img src="https://s2.loli.net/2022/06/26/DpigMkWVTxPrv9N.png" alt="image-20220626124824925"></p><p>Docker使用客户端-服务端（C/S）架构模式</p><p><img src="https://s2.loli.net/2022/06/26/479uHrjBdZ6IQWv.png" alt="img"></p><ul><li>服务端（server）：Docker守护进程，负责处理Docker指令、管理镜像、容器等</li><li>客户端（client）：通过命令或RestAPI向Docker服务端发送指令，与Docker的守护进程通信。</li></ul><p><img src="https://s2.loli.net/2022/06/26/D9wCelVNydBpKWU.png" alt="image-20220626125845647"></p><h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><h3 id="CentOS-Docker安装"><a href="#CentOS-Docker安装" class="headerlink" title="CentOS Docker安装"></a>CentOS Docker安装</h3><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><h5 id="查看已经安装的docker"><a href="#查看已经安装的docker" class="headerlink" title="查看已经安装的docker"></a>查看已经安装的docker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed |grep docker</span><br></pre></td></tr></table></figure><h5 id="下载已经安装的docker"><a href="#下载已经安装的docker" class="headerlink" title="下载已经安装的docker"></a>下载已经安装的docker</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove xxx</span><br></pre></td></tr></table></figure><h5 id="删除旧版本即其相关依赖项"><a href="#删除旧版本即其相关依赖项" class="headerlink" title="删除旧版本即其相关依赖项"></a>删除旧版本即其相关依赖项</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装Docker-Engine-Community"><a href="#安装Docker-Engine-Community" class="headerlink" title="安装Docker Engine-Community"></a>安装Docker Engine-Community</h4><blockquote><p>使用 Docker 仓库即Docker Engine-Community进行安装</p><p>在新主机安装Docker Engine-Community前，需要设置Docker仓库，之后可以从仓库安装和更新Docker</p></blockquote><h5 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/8adFTPgOYx6wfDv.png" alt="image-20220626210712373"></p><h5 id="设置稳定仓库"><a href="#设置稳定仓库" class="headerlink" title="设置稳定仓库"></a>设置稳定仓库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/8BivwWVtUyIg3kf.png" alt="image-20220626210628192"></p><h5 id="安装Docker-Engine-Community-1"><a href="#安装Docker-Engine-Community-1" class="headerlink" title="安装Docker Engine-Community"></a>安装Docker Engine-Community</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/Di92yF4EO6RWuTw.png" alt="image-20220626211100004"></p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/b8mBlpvDMurXg6Y.png" alt="image-20220626132908943"></p><h4 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl status docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/GH635EITaPvzWiA.png" alt="image-20220626133049860"></p><h4 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/eSZQqO39kFYt6jR.png" alt="image-20220626211521257"></p><h4 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h4><p>阿里容器镜像服务地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p><img src="https://s2.loli.net/2022/06/26/CgsplG6LcAraZm4.png" alt="image-20220626211723068"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://fsfhxt97.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h2><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><p>镜像名称一般分两部分组成：[repository]:[tag]</p><blockquote><p>没有指定tag时，默认是latest，代表最新版本的镜像</p></blockquote><p><img src="https://s2.loli.net/2022/06/26/37jHDyA8S1flMYz.png" alt="image-20220626212326961"></p><h3 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h3><p>通过Dockerfile构建本地构建镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure><p>从Docker Registry镜像服务器拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi</span><br></pre></td></tr></table></figure><p>推送镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push</span><br></pre></td></tr></table></figure><p>镜像压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save</span><br></pre></td></tr></table></figure><p>加载压缩镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/1BFy2okuU94wtTb.png" alt="image-20220626212914211"></p><p>查看docker命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br><span class="line">docker xxx </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/1HKiPmadVqhY9yx.png" alt="image-20220626213134386"></p><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><p><img src="https://s2.loli.net/2022/07/09/wOaoPthBv8ZgYA1.png" alt="image-20220709164840868"></p><h4 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li><p>docker run：创建并运行一个容器</p></li><li><p>-name：容器名称</p></li><li><p>-p 8080:80： 端口进行映射，将宿主机端口与容器端口映射，将本地 8080 端口映射到容器内部的 80 端口</p></li><li><p>-d nginx： 设置容器在后台运行</p></li><li><p>niginx：后台名称</p></li></ul></blockquote><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nginx</span><br></pre></td></tr></table></figure><blockquote><p>-f   持续更新日志信息</p></blockquote><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it nginx bash</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li>docker exec：进入容器内部，执行命令</li><li>-it：给当前进入的容器构建一个标准输入输出终端，实现与容器的交互</li><li>bash：进入容器后执行的命令，bash是一个Linux终端交互命令</li></ul></blockquote><h2 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h2><h3 id="查看可用MySQL版本"><a href="#查看可用MySQL版本" class="headerlink" title="查看可用MySQL版本"></a>查看可用MySQL版本</h3><p>访问 MySQL 镜像库地址：<a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p><p><img src="https://s2.loli.net/2022/06/26/R2cBAZDhO8XtWav.png" alt="image-20220626213644151"></p><h3 id="拉取MySQL镜像"><a href="#拉取MySQL镜像" class="headerlink" title="拉取MySQL镜像"></a>拉取MySQL镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><blockquote><p> Dockerhub没有提供arm64架构的MySQL，但是MySQL官方提供了mysql/mysql-server</p></blockquote><p>arm架构下拉取MySQL镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql/mysql-server</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/26/x4NVdpZn78uoKbW.png" alt="image-20220626224920659"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull --platform linux/x86_64 mysql</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/QywWo7JFVDuieqX.png" alt="image-20220627091852496"></p><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/bd2Skcmn8grwRCD.png" alt="image-20220627091949600"></p><h3 id="搜索可用镜像"><a href="#搜索可用镜像" class="headerlink" title="搜索可用镜像"></a>搜索可用镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/FizNbMqhpwWCZya.png" alt="image-20220627101743575"></p><h3 id="运行MySQL"><a href="#运行MySQL" class="headerlink" title="运行MySQL"></a>运行MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d  mysql</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li><strong>-p 3306:3306</strong> ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务</li><li><strong>MYSQL_ROOT_PASSWORD=123456</strong>：设置 MySQL 服务 root 用户的密码</li></ul></blockquote><p><img src="https://s2.loli.net/2022/07/09/TW4DoMgOteXNSnj.png" alt="image-20220709153240490"></p><h4 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d  \</span><br><span class="line">-v /mydata/mysql/log:/logs \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><blockquote><p>arm架构下运行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql/mysql-server</span><br></pre></td></tr></table></figure><blockquote><p>–name：容器命名</p><p>-p：端口映射</p></blockquote><p><img src="https://s2.loli.net/2022/06/27/PMCQYl9m57UIy2K.png" alt="image-20220627202412060"></p><h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash</span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/UGgCWoljKZxSwHT.png"></p><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><h4 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#添加远程登录用户</span><br><span class="line">CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br><span class="line">#</span><br><span class="line">GRANT ALL ON *.* TO &#x27;root&#x27;@&#x27;%&#x27;；</span><br><span class="line">flush privileges;</span><br><span class="line">#修改密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;13851176590++&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/6ghaeCGo15cmDdy.png" alt="image-20220627210219722"></p><h4 id="查看用户数据库"><a href="#查看用户数据库" class="headerlink" title="查看用户数据库"></a>查看用户数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">use mysql;</span><br><span class="line">select host, user, plugin from user;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/gnCJSlbzGy3HWV2.png" alt="image-20220627210420003"></p><h4 id="远程连接测试"><a href="#远程连接测试" class="headerlink" title="远程连接测试"></a>远程连接测试</h4><p><img src="https://s2.loli.net/2022/06/27/Ptq6WZL9RdjBJNl.png" alt="image-20220627211152025"></p><p><img src="https://s2.loli.net/2022/06/27/VX71Qtwv4ByNsfW.png" alt="image-20220627211216753"></p><h2 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h2><h3 id="查看可用Nginx版本"><a href="#查看可用Nginx版本" class="headerlink" title="查看可用Nginx版本"></a>查看可用Nginx版本</h3><p>访问Nginx镜像库版本地址：<a href="https://hub.docker.com/_/nginx">https://hub.docker.com/_/nginx</a></p><p><img src="https://s2.loli.net/2022/06/27/bsDTCmwg6iEX9qj.png" alt="image-20220627212318153"></p><h3 id="拉取Nginx镜像"><a href="#拉取Nginx镜像" class="headerlink" title="拉取Nginx镜像"></a>拉取Nginx镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/G4lPrCzxdRiKcSE.png" alt="image-20220627212905626"></p><h3 id="查看本地镜像-1"><a href="#查看本地镜像-1" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/CYQADKfuhZpoqHF.png" alt="image-20220627213027744"></p><h3 id="运行Nginx"><a href="#运行Nginx" class="headerlink" title="运行Nginx"></a>运行Nginx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/pGgndqcEivYKoyM.png" alt="image-20220627213342836"></p><p>参数说明：</p><blockquote><ul><li><strong>–name nginx</strong>：容器名称</li><li><strong>-p 8080:80</strong>： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口<ul><li><strong>-d nginx</strong>： 设置容器在在后台一直运行</li></ul></li></ul></blockquote><h3 id="镜像导出和加载"><a href="#镜像导出和加载" class="headerlink" title="镜像导出和加载"></a>镜像导出和加载</h3><h4 id="镜像导出"><a href="#镜像导出" class="headerlink" title="镜像导出"></a>镜像导出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/e6F5AgK9tu13SCs.png" alt="image-20220709155017994"></p><h4 id="镜像加载"><a href="#镜像加载" class="headerlink" title="镜像加载"></a>镜像加载</h4><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/1x2WUYieaoN4bJO.png" alt="image-20220709155218222"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/UyiwadYqObkfHJP.png" alt="image-20220709155420618"></p><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>参数说明：</p><ul><li><strong>–name nginx-test</strong>：容器名称</li><li><strong>-p 8080:80</strong>： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口</li><li><strong>-d nginx</strong>： 设置容器在在后台一直运行</li></ul></blockquote><h3 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h3><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220709164017925.png" alt="image-20220709164017925"></p><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/Kix9IsezgZoF46k.png" alt="image-20220709170822636"></p><h2 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h2><h3 id="查看Redis可用版本"><a href="#查看Redis可用版本" class="headerlink" title="查看Redis可用版本"></a>查看Redis可用版本</h3><p><img src="https://s2.loli.net/2022/07/09/1qnMl8STNKvhoaV.png" alt="image-20220709160742122"></p><h3 id="拉取Redis镜像"><a href="#拉取Redis镜像" class="headerlink" title="拉取Redis镜像"></a>拉取Redis镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/Adchiq7RFbPEuKx.png" alt="image-20220709160912161"></p><h3 id="运行Redis容器"><a href="#运行Redis容器" class="headerlink" title="运行Redis容器"></a>运行Redis容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/35EhZDXBjGdgQUL.png" alt="image-20220709161215298"></p><h3 id="持久化运行Redis容器"><a href="#持久化运行Redis容器" class="headerlink" title="持久化运行Redis容器"></a>持久化运行Redis容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis -p 6379:6379 -d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/Yh2McU9m5EOpeXi.png" alt="image-20220709184650774"></p><h3 id="使用Redis客户端"><a href="#使用Redis客户端" class="headerlink" title="使用Redis客户端"></a>使用Redis客户端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/5Yl2MbRAWGgcUBN.png" alt="image-20220709161905065"></p><h3 id="可视化工具连接Redis"><a href="#可视化工具连接Redis" class="headerlink" title="可视化工具连接Redis"></a>可视化工具连接Redis</h3><p><img src="https://s2.loli.net/2022/07/09/NncaSrQ5B8R4j1W.png" alt="image-20220709190614232"></p><h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o redis.tar redis:latest</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/ZRbAUB5VyFCrncT.png" alt="image-20220709162053955"></p><h3 id="删除容器和镜像"><a href="#删除容器和镜像" class="headerlink" title="删除容器和镜像"></a>删除容器和镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm</span><br><span class="line">docker rmi</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/ARQNT9ixhtC6pmZ.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i redis.tar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/09/OGA5VeUFJBru6h2.png" alt="image-20220709162740876"></p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="数据卷定义"><a href="#数据卷定义" class="headerlink" title="数据卷定义"></a>数据卷定义</h3><blockquote><p>数据卷主要用于解决容器与数据耦合的问题，即将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全。</p></blockquote><p><img src="https://s2.loli.net/2022/07/16/DJxtMSWCkmgQB5o.png" alt="image-20220716114244206"></p><p>数据卷(volume)是一个虚拟目录，指向宿主机文件系统中的一个目录。</p><p><img src="https://s2.loli.net/2022/07/16/zleZEKkjFW5ayqV.png" alt="image-20220716114631748"></p><h3 id="数据卷操作"><a href="#数据卷操作" class="headerlink" title="数据卷操作"></a>数据卷操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure><blockquote><p>docker volume命令是数据卷操作，根据命令后跟随command确定下一步操作</p></blockquote><ul><li>create-创建一个volume</li><li>inspect-显示一个或多个volume的信息</li><li>ls-列出所有的volume</li><li>prune-删除未使用的volume</li><li>rm-删除一个或多个指定的volume</li></ul><p><img src="https://s2.loli.net/2022/07/16/u1FRUSje8QlnWCq.png" alt="image-20220716125125309"></p><p><img src="https://s2.loli.net/2022/07/16/kNRY8gADQxTl24S.png" alt="image-20220716125559541"></p><p><img src="https://s2.loli.net/2022/07/16/9DSWUIhsv5Bn6EV.png" alt="image-20220716125638308"></p><h3 id="数据卷挂载"><a href="#数据卷挂载" class="headerlink" title="数据卷挂载"></a>数据卷挂载</h3><h4 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create html</span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220716135129339.png" alt="image-20220716135129339"></p><h4 id="运行容器并挂载数据卷"><a href="#运行容器并挂载数据卷" class="headerlink" title="运行容器并挂载数据卷"></a>运行容器并挂载数据卷</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -v html:/usr/share/nginx/html -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>数据卷挂载方式：-v nameName : /targetContainerPath</p><p>如果容器运行时Volume不存在，会被自动创建出来</p></blockquote><p><img src="https://s2.loli.net/2022/07/16/IL4EQfiAr21qKtp.png" alt="image-20220716135701171"></p><h4 id="查看挂载目录"><a href="#查看挂载目录" class="headerlink" title="查看挂载目录"></a>查看挂载目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect html</span><br><span class="line">cd /var/lib/docker/volumes/html/_data</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/16/M5tlDuegwx97Y2i.png" alt="image-20220716140349300"></p><h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.html</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/16/cNDIsf4ZS1oiqLA.png" alt="image-20220716141200880"></p><h4 id="访问服务-1"><a href="#访问服务-1" class="headerlink" title="访问服务"></a>访问服务</h4><p><img src="https://s2.loli.net/2022/07/19/xsvw6pOES3fVhuX.png" alt="image-20220719225705897"></p><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><blockquote><p>目录挂载和数据卷挂载的语法类似：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[宿主机文件]</li></ul></blockquote><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /tmp/mysql/data</span><br><span class="line">mkdir -p /tmp/mysql/conf</span><br></pre></td></tr></table></figure><blockquote><p>挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>设置MySQL密码</p></blockquote><h4 id="运行容器-1"><a href="#运行容器-1" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name mysql \ </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \</span><br><span class="line">-v /tmp/mysql/data:/var/lib/mysql \</span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><h3 id="数据卷挂载方式对比"><a href="#数据卷挂载方式对比" class="headerlink" title="数据卷挂载方式对比"></a>数据卷挂载方式对比</h3><p><img src="https://s2.loli.net/2022/07/19/2GKXxnvreMsHiY3.png" alt="image-20220719232331514"></p><ul><li>数据卷挂载耦合度低，由dokcer来管理目录</li><li>目录挂载耦合高，需要我们自己来管理目录</li></ul><h2 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h2><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><blockquote><p>镜像时将应用程序及其需要的系统函数库、环境、配置、依赖打包而成</p></blockquote><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220719233304550.png" alt="image-20220719233304550"></p><p>镜像是分层结构，每一层称为一个Layer</p><ul><li><p>BaseImage层：包含基本的系统函数库、环境变量、文件系统</p></li><li><p>Entrypoint层：入口，是镜像中应用启动的命令</p></li><li><p>其他层：在BaseImage基础上添加依赖、安装程序、完成整个应用的安装和配置</p></li></ul><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile是一个文本文件，其中包含了一个个指令(Instruction)，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="https://s2.loli.net/2022/07/20/6MqsXBp9juyNeiv.png" alt="image-20220720120921273"></p><h4 id="基于java-8-alpine镜像构建Java项目为镜像"><a href="#基于java-8-alpine镜像构建Java项目为镜像" class="headerlink" title="基于java:8-alpine镜像构建Java项目为镜像"></a>基于java:8-alpine镜像构建Java项目为镜像</h4><ul><li>新建一个空目录，在目录中新建一个文件</li></ul><p><img src="https://s2.loli.net/2022/07/20/4BV8zpP7qYUeC5u.png" alt="image-20220720141558745"></p><ul><li>拷贝jar包到目录</li></ul><p><img src="https://s2.loli.net/2022/07/20/LACTlmpDMqR1j92.png" alt="image-20220720142621552"></p><ul><li>编写Dockerfile文件<ul><li>基于java:8-alpine作为基础镜像</li><li>将app.jar拷贝到镜像中</li><li>暴露端口</li><li>编写人口ENTRYPOINT</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM java:8-alpine</span><br><span class="line"></span><br><span class="line"># 拷贝java项目的包</span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8090</span><br><span class="line"># 入口，java项目的启动命令</span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/20/BZCoeyRv8EUucTd.png" alt="image-20220720142611628"></p><ul><li>使用docker build命令构建镜像</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t javaweb:1.0 .</span><br></pre></td></tr></table></figure><blockquote><p>最后的.指从当前目录构建</p></blockquote><p><img src="https://s2.loli.net/2022/07/20/HMjCW9DOutfxvbR.png" alt="image-20220720142801112"></p><ul><li>使用docker run创建容器并运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name javaweb -p 8090:8090 -d javaweb:1.0</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/20/JuRgaCeTK91VUXj.png" alt="image-20220720145638751"></p><ul><li>访问网址：<a href="http://ip:8090/hello/count">http://ip:8090/hello/count</a></li></ul><p><img src="https://s2.loli.net/2022/07/20/Ipw8Jdk1c7nGyah.png" alt="image-20220720145713672"></p><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><blockquote><p>Docker  Compose可以基于Compose文件帮助我们快速部署分布式应用，而无需手动一个个创建和运行容器。</p><p>Compose文件时一个文本文件，通过指令定义集群中的每一个容器如何运行。</p></blockquote><p><img src="https://s2.loli.net/2022/07/21/WdSYkMLzcljgHvD.png" alt="image-20220721094915629"></p><h3 id="DockerCompose的安装"><a href="#DockerCompose的安装" class="headerlink" title="DockerCompose的安装"></a>DockerCompose的安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/DoeYcXgaQERKbU5.png" alt="image-20220721110308195"></p><p><img src="https://s2.loli.net/2022/07/21/KuSj45c9rhgCOEA.png" alt="image-20220721110437236"></p><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/64qi9zxDyJIbwKs.png" alt="image-20220721110623950"></p><h3 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/2TGAwCYW5hIPXJa.png" alt="image-20220721132752027"></p><h3 id="Base自动补全命令"><a href="#Base自动补全命令" class="headerlink" title="Base自动补全命令"></a>Base自动补全命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/21/25gijMbw1GnFhcD.png" alt="image-20220721133210786"></p><h3 id="DockerCompose部署微服务"><a href="#DockerCompose部署微服务" class="headerlink" title="DockerCompose部署微服务"></a>DockerCompose部署微服务</h3><h2 id="容器网络管理"><a href="#容器网络管理" class="headerlink" title="容器网络管理"></a>容器网络管理</h2><h3 id="网络管理意义"><a href="#网络管理意义" class="headerlink" title="网络管理意义"></a>网络管理意义</h3><blockquote><p>容器的网络默认与宿主机、与其他容器相互隔离，且容器中可以运行一些网络应用，如nginx、web应用、数据库等，如果需要让外部可以访问这些容器中运行的网络应用，需要配置网络来实现。</p><p>不同的需求下，容器和宿主机的通信有不同的业务状态时，需要容器网络管理以达到管理不同业务下相关的网络配置。</p></blockquote><h3 id="Docker网络驱动模式的类型"><a href="#Docker网络驱动模式的类型" class="headerlink" title="Docker网络驱动模式的类型"></a>Docker网络驱动模式的类型</h3><ul><li>bridge-桥接模式：默认的网络模式，类似虚拟机的nat模式</li><li>host-宿主模式：容器与宿主机之间的网络无隔离，即容器直接使用宿主机网路</li><li>none-禁用模式：容器禁用所有网络</li><li>overlay-覆盖模式：利用vxlan实现的bridge模式</li><li>macvlan-模式：容器具备MAC地址，使其在外部看来一台真实的网络设备</li></ul><p>Docker在安装时，会自动创建bridge、host、none三个网络驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2635e0a53f37de6a71092edbcb9df7c8.png" alt="image-20220728101349811"></p><h3 id="Docker网络管理命令"><a href="#Docker网络管理命令" class="headerlink" title="Docker网络管理命令"></a>Docker网络管理命令</h3><h4 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network --help</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/080650e39754817256f875e574850201.png" alt="image-20220728103531652"></p><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3c6e94ae24ae9d3b1901efbc01b4ca02.png" alt="image-20220728103852636"></p><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fe8c0f41e5adc328cb7a7474149d20cb.png" alt="image-20220728104125387"></p><blockquote><p>-d 指定网络的驱动（不指定默认为bridge）</p><p>–  subnet 指定子网网段（192.168.0.0/16）</p><p>– ip-range 指定容器的I范围</p><p>– gateway 子网的网关</p></blockquote><h4 id="网络删除"><a href="#网络删除" class="headerlink" title="网络删除"></a>网络删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network rm</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d661fc8ec44fcb6a7e49ab54db8fc2ab.png" alt="image-20220728105123725"></p><h4 id="查看网络详细信息"><a href="#查看网络详细信息" class="headerlink" title="查看网络详细信息"></a>查看网络详细信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5ee04037b0e0a3a328c184b6bc9e380f.png" alt="image-20220728105257769"></p><h4 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run/create --network </span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，docker创建或启动容器时，会默认使用名为bridge的网络</p></blockquote><h4 id="网络连接与断开"><a href="#网络连接与断开" class="headerlink" title="网络连接与断开"></a>网络连接与断开</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect/disconnect </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6e199f57e6d70218ae3d3c46024e0901.png" alt="image-20220728105838471"></p><h3 id="单主机常见三种Docker网络类型"><a href="#单主机常见三种Docker网络类型" class="headerlink" title="单主机常见三种Docker网络类型"></a>单主机常见三种Docker网络类型</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2be886532787b3da9f2f3f24b07a8b2b.png" alt="image-20220729231934850"></p><p>Docker默认情况下有bridge、host、none三种网络类型</p><h4 id="Centos容器镜像处理"><a href="#Centos容器镜像处理" class="headerlink" title="Centos容器镜像处理"></a>Centos容器镜像处理</h4><h5 id="Centos安装并启用ifconfig命令"><a href="#Centos安装并启用ifconfig命令" class="headerlink" title="Centos安装并启用ifconfig命令"></a>Centos安装并启用ifconfig命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5a12193a12a6dc221d034e942486d8d6.png" alt="image-20220729233311573"></p><h5 id="运行ipconfig命令"><a href="#运行ipconfig命令" class="headerlink" title="运行ipconfig命令"></a>运行ipconfig命令</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/896e1fecf8c2bf43eb1d84d7be4a423c.png" alt="image-20220729235046317"></p><h5 id="拉取centos镜像"><a href="#拉取centos镜像" class="headerlink" title="拉取centos镜像"></a>拉取centos镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:centos7</span><br></pre></td></tr></table></figure><h5 id="运行centos容器并启用ifconfig命令"><a href="#运行centos容器并启用ifconfig命令" class="headerlink" title="运行centos容器并启用ifconfig命令"></a>运行centos容器并启用ifconfig命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos:centos7</span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/43d96a7ba9adc52a6745eb877b6887af.png" alt="image-20220730003749530"></p><h5 id="从容器中创建镜像"><a href="#从容器中创建镜像" class="headerlink" title="从容器中创建镜像"></a>从容器中创建镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit adoring_noyce centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b93dc82c356b8a4598356ea7f2dd115c.png" alt="image-20220730001949456"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/379383b327a0acec97d629062bb70222.png" alt="image-20220730002038580"></p><h4 id="bridge网络模式"><a href="#bridge网络模式" class="headerlink" title="bridge网络模式"></a>bridge网络模式</h4><blockquote><p>容器默认使用的网络类型</p><ul><li>宿主机上需要单独的bridge网卡，docker默认创建的是docker0</li><li>容器之间、容器与主机之间的网络通信是借助为每一个容器生成的一对veth pair虚拟网络设备进行通信的(一个在容器上，另一个在宿主机上)</li><li>每创建一个基于bridge网络的容器，都会自动在宿主机上创建一个veth*虚拟网络设备。 外部无法直接访问容器。需要建立端口映射才能访问</li><li>容器借由veth虚拟设备通过如docker0这种bridge网络设备进行通信</li><li>每一容器具有单独的IP</li><li>bridge网络模式下宿主机与容器服务使用的端口可以重复</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/0a6e4eb9b89cd14fb2741b5b6a671e8c.webp?x-oss-process=image/format,png" alt="img"></p><h5 id="查看宿主机网络信息"><a href="#查看宿主机网络信息" class="headerlink" title="查看宿主机网络信息"></a>查看宿主机网络信息</h5><p><img src="https://img-blog.csdnimg.cn/img_convert/75047e571a74402f528dda3d56ae08c5.png" alt="image-20220730005753492"></p><h5 id="创建桥接模式容器"><a href="#创建桥接模式容器" class="headerlink" title="创建桥接模式容器"></a>创建桥接模式容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos-net   #由于容器创建默认使用桥接模式，所以这里不需要使用--network指定</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a3de866165e449fdec1224153babf3e5.png" alt="image-20220730005943098"></p><blockquote><p>bridge网络模式下的端口映射：由于bridge网络模式的上述特点，访问bridge网络模式的设备时需要端口映射</p></blockquote><h5 id="端口映射格式"><a href="#端口映射格式" class="headerlink" title="端口映射格式"></a>端口映射格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/68dd303cc9d3ebbc898bc5d720b2806e.png" alt="image-20220730010611166"></p><h4 id="host网络模式"><a href="#host网络模式" class="headerlink" title="host网络模式"></a>host网络模式</h4><blockquote><p>容器完全共享宿主机的网络，网络没有隔离，可以说宿主机的网络就是容器的网络</p><ul><li>容器、宿主机上的应用所使用的端口不能重复</li><li>外部能够直接访问容器，不需要端口映射</li><li>容器ip就是宿主机的ip</li></ul></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/71940ccf7233f016e59b7a8d29428ca4.webp?x-oss-process=image/format,png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=host centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2d6d9e0c541b242deb12a5a8a1556c26.png" alt="image-20220730011055805"></p><h4 id="none网络模式"><a href="#none网络模式" class="headerlink" title="none网络模式"></a>none网络模式</h4><blockquote><p>容器上没有网络，无需任何网络设备，外部无法访问</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=none centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d541690715d041bbdc06f2e0c599c358.png" alt="image-20220730004641932"></p><blockquote><p>只有一个本地回环lo网络设备</p></blockquote><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><h4 id="创建网络-1"><a href="#创建网络-1" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge test</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b78fcb487b9ce0ef955268b5d6828b92.png" alt="image-20220730012139747"></p><h4 id="自定义网络创建容器"><a href="#自定义网络创建容器" class="headerlink" title="自定义网络创建容器"></a>自定义网络创建容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=test centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fa53f37df23a85247d151f5d783ad67b.png" alt="image-20220730012749262"></p><p>成功分配网络内的ip地址（注意不同的网络之间是隔离的）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3112346b7e835df793b05e0f5d4a04ab.png" alt="image-20220730014800371"></p><p>不同的网络是相互隔离的，无法进行通信</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06c3dcaec68c83c394369061b763dc33.png" alt="image-20220730013923962"></p><h4 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect test 881852a511a6</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7f7d9d7c1166d22cdd28d3e8719354d6.png" alt="image-20220730014615772"></p><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/020d377599638397befaeeeb9afdbd3f.png" alt="image-20220730020059128"></p><h3 id="容器通信"><a href="#容器通信" class="headerlink" title="容器通信"></a>容器通信</h3><h4 id="同一网络容器通信"><a href="#同一网络容器通信" class="headerlink" title="同一网络容器通信"></a>同一网络容器通信</h4><blockquote><p>创建两个容器使用同一个网络，在同一个子网分配ip地址，可以相互访问</p><p>因此只要保证两个容器处于同一个网络中，就可以直接通过容器的ip地址在容器间进行通信</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/1fb1cc1e6ce0c0f82ee37b028832dbd9.png" alt="image-20220730115943556"></p><h4 id="Docker域名解析服务器"><a href="#Docker域名解析服务器" class="headerlink" title="Docker域名解析服务器"></a>Docker域名解析服务器</h4><blockquote><p>在大多数场景下，容器部署的ip地址是自动分配的，因此无法提前知道ip地址</p><p>我们可以借助Docker提供的DNS服务器，将域名解析成对应容器的ip地址，这样就直接访问域名来实现通信（注意：域名解析只能在用户自定义网络下生效，默认网络是不行的）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=test01 --network=test centos-net </span><br><span class="line">docker run -it --name=test02 --network=test centos-net</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/img_convert/a180b2561bf774d950466a3ee52fd30c.png" alt="image-20220730121326930"></h4><h4 id="容器共享网络"><a href="#容器共享网络" class="headerlink" title="容器共享网络"></a>容器共享网络</h4><p>创建并运行一个新的容器，将其网络指定一个容器的网络，使得两个容器使用同一个网络</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=test03 --network=container:test01 centos-net</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/aa2597ff4391dd7ed108a12829927d7b.png" alt="image-20220730121726308"></p><h3 id="容器和外部通信"><a href="#容器和外部通信" class="headerlink" title="容器和外部通信"></a>容器和外部通信</h3><blockquote><p>容器创建默认使用桥接模式，桥接模式创建一个虚拟网络，让容器在虚拟网络中，通过桥接器与外界相连。其中，数据包从容器内部的网络搭到达宿主主机再发送网络的过程最关键的是依靠NATj将地址进行转换，再利用宿主机的ip地址将数据包转发出去。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/efa041e60beb97b4d37b5494d8e48446.png" alt="image-20220702232449520"></p><p>通过NAT，容器可以实现访问外界，但是当外部主动连接容器时，我们可以直接创建容器时配置端口映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><blockquote><p>-p：端口映射配置，将容器对外提供访问的端口映射搭到宿主机的端口上</p><p>-p 宿主端口:容器端口</p><p>当外部访问到宿主主机的对应端口时会直接转发给容器内</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba（二） Sentinel</title>
    <link href="http://example.com/2022/06/19/Spring%20Cloud%20Alibaba%EF%BC%88%E4%BA%8C%EF%BC%89Sentinel/"/>
    <id>http://example.com/2022/06/19/Spring%20Cloud%20Alibaba%EF%BC%88%E4%BA%8C%EF%BC%89Sentinel/</id>
    <published>2022-06-19T00:35:22.000Z</published>
    <updated>2022-06-25T14:58:00.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba（二）Sentinel"><a href="#Spring-Cloud-Alibaba（二）Sentinel" class="headerlink" title="Spring Cloud Alibaba（二）Sentinel"></a>Spring Cloud Alibaba（二）Sentinel</h1><h2 id="Sentinel介绍"><a href="#Sentinel介绍" class="headerlink" title="Sentinel介绍"></a>Sentinel介绍</h2><blockquote><p>随着微服务的流行，服务与服务之间的稳定性变得越来越重要。Sentinel以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p></blockquote><h2 id="Sentinel特征"><a href="#Sentinel特征" class="headerlink" title="Sentinel特征"></a>Sentinel特征</h2><blockquote><ul><li><strong>丰富的应用场景</strong>： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</li></ul></blockquote><h2 id="Sentinel安装与部署"><a href="#Sentinel安装与部署" class="headerlink" title="Sentinel安装与部署"></a>Sentinel安装与部署</h2><h3 id="Sentinel控制台安装"><a href="#Sentinel控制台安装" class="headerlink" title="Sentinel控制台安装"></a>Sentinel控制台安装</h3><blockquote><p>Sentinel控制台是一个轻量级的控制台应用，它可用于实时查看单机资源监控及集群资源的汇总，并提供一系列的规则管理功能，如流控规则、降级规则、热点规则等。</p></blockquote><p>与Nacos一样，Sentinel也是独立安装与部署的。</p><p>Sentinel下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="https://s2.loli.net/2022/06/22/61vKnDY4PoWRxHg.png" alt="image-20220622143732400"></p><h3 id="IDEA运行Sentinel"><a href="#IDEA运行Sentinel" class="headerlink" title="IDEA运行Sentinel"></a>IDEA运行Sentinel</h3><h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p><img src="https://s2.loli.net/2022/06/22/s5jNmy8HP2dokZl.png" alt="image-20220622144500793"></p><h4 id="导入Jar包"><a href="#导入Jar包" class="headerlink" title="导入Jar包"></a>导入Jar包</h4><p><img src="https://s2.loli.net/2022/06/22/IvnmcpJH5lsgEAW.png" alt="image-20220622144605589"></p><p><img src="https://s2.loli.net/2022/06/22/aoTy82nhLVrHWMI.png" alt="image-20220622144931169"></p><h4 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h4><p><img src="https://s2.loli.net/2022/06/22/9bOLcMDxuIE2QPB.png" alt="image-20220622144859856"></p><h4 id="运行Sentinel"><a href="#运行Sentinel" class="headerlink" title="运行Sentinel"></a>运行Sentinel</h4><p><img src="https://s2.loli.net/2022/06/22/Vyz5Dfb2AcBKgEC.png" alt="image-20220622145133735"></p><p>访问<a href="http://localhost:8858/">http://localhost:8858/</a></p><p><img src="https://s2.loli.net/2022/06/22/h9BoCXt2RdN6KH1.png" alt="image-20220622145412127"></p><p>用户和密码都是：sentinel</p><p><img src="https://s2.loli.net/2022/06/22/uXYdEr2HfTnG4Bl.png" alt="image-20220622150046689"></p><h2 id="Sentinel使用"><a href="#Sentinel使用" class="headerlink" title="Sentinel使用"></a>Sentinel使用</h2><blockquote><p>Sentinel Starter 默认为所有的 HTTP 服务提供了限流埋点，同时我们也可以通过使用@SentinelResource注解来自定义一些限流行为。</p></blockquote><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/22/CJnA9wlYMBWpdhK.png" alt="image-20220622171914457"></p><h4 id="编辑配置-1"><a href="#编辑配置-1" class="headerlink" title="编辑配置"></a>编辑配置</h4><p><img src="https://s2.loli.net/2022/06/22/TZJmqWIpnjC2FLh.png" alt="image-20220622172010394"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 是否是临时实例</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="number">68928803</span><span class="string">-bcbf-40a4-ba9a-1bb84ff12238</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><img src="https://s2.loli.net/2022/06/22/8ycGOIrz4Mhfk5m.png" alt="image-20220622234031959"></p><p>其他模块同理</p><p><img src="https://s2.loli.net/2022/06/22/CXEKJc2TiB89FM6.png" alt="image-20220622234737747"></p><h2 id="Sentinel流量控制"><a href="#Sentinel流量控制" class="headerlink" title="Sentinel流量控制"></a>Sentinel流量控制</h2><h3 id="限流的定义和意义"><a href="#限流的定义和意义" class="headerlink" title="限流的定义和意义"></a>限流的定义和意义</h3><blockquote><p>限流就是对于请求的速率进行限制，避免瞬时的大量请求击垮软件系统，在合理避免高比发请求的同时，也在一定程度上保护服务器不受恶意攻击</p><p>限流可能会导致用户的请求无法被正确处理，但它是权衡了软件系统的稳定性之后的最优解</p></blockquote><h3 id="常见的限流算法"><a href="#常见的限流算法" class="headerlink" title="常见的限流算法"></a>常见的限流算法</h3><h4 id="固定窗口计数器算法"><a href="#固定窗口计数器算法" class="headerlink" title="固定窗口计数器算法"></a>固定窗口计数器算法</h4><p>固定窗口就是时间窗口，固定窗口计数器算法规定了单位时间处理的请求数量。</p><p>固定窗口对某一个时间段内的请求进行计数和限制，假设规定系统中某个接口1分钟只能访问100词的话，使用固定窗口计数器算法的实现思路如下：</p><blockquote><ul><li>给定一个变量 counter 来记录当前接口处理的请求数量，初始值为0，代表接口当前1分钟内暂未处理请求</li><li>1分钟之内每处理一个请求之后就将 counter + 1，当 counter = 100之后，后续的请求就会被全部拒绝</li><li>等到1分钟结束后，将couter重置 0，重新开始计数</li></ul></blockquote><p>这种限流算法无法保证限流速率，无法避免突然激增的流量。</p><p><img src="https://s2.loli.net/2022/06/23/SpeHnFd4oYAPsTR.png" alt="固定窗口计数器算法"></p><h4 id="滑动窗口计数器算法"><a href="#滑动窗口计数器算法" class="headerlink" title="滑动窗口计数器算法"></a>滑动窗口计数器算法</h4><p>相对于固定窗口计数器算法，滑动时间窗口算法更加灵活，它可以动态移动窗口，重新进行计算</p><p>例如我们接口进行限流，每分钟处理60个请求，可以把1分钟分为60个窗口，每隔 1 秒移动一次，每个窗口一秒只能处理 不大于 <code>60(请求数)/60（窗口数）</code> 的请求，如果当前窗口的请求计数总和超过了限制的数量的话就不再处理其他请求。</p><p><img src="https://s2.loli.net/2022/06/23/QIOmVHajWYA9efE.png" alt="滑动窗口计数器算法"></p><p>当滑动窗口的格子划分的越多，滑动窗口的滚动就越平滑，限流的统计就会越精确。</p><p>虽然滑动时间窗口算法可以避免固定时间窗口的临界问题，但是它比固定窗口更加耗时。</p><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><p>我们可以把发请求的动作比作注水到桶中，处理请求的过程可以比喻为漏桶漏水。我们往桶中以任意速率流入水，以一定速率流出水。当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。</p><p>算法的实现可以通过一个队列来实现：准备一个队列保存请求，然后定期从队列中拿请求来执行</p><p><img src="https://s2.loli.net/2022/06/23/sSumaHXqJARvNZb.png" alt="漏桶算法"></p><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h4><p>和漏桶算法算法相似，但桶是用来存放令牌的，每隔一段时间向桶中丢入一个令牌，速度可以指定，请求在被处理之前需要拿到一个令牌，请求处理完毕之后将这个令牌丢弃。当桶中的令牌数量不足时，取不到的令牌请求将会被丢弃。我们可以根据限流大小，按照一定的速率往桶里添加令牌。此外，如果桶装满了，就不能继续往里面继续添加令牌了。</p><p><img src="https://s2.loli.net/2022/06/23/4jqicJoIr6LXVBw.png" alt="令牌桶算法"></p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><h4 id="簇点链路"><a href="#簇点链路" class="headerlink" title="簇点链路"></a>簇点链路</h4><p>打开Sentinel管理页面的簇点链路模块</p><p><img src="https://s2.loli.net/2022/06/23/qT5p6kfEOMDPjgS.png" alt="image-20220623231123397"></p><h5 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h5><blockquote><p>直联：只针对当前接口</p><p>关联：当被关联的接口超过阈值时，会导致当前接口被限流</p><p>链路：更细粒度的限流，能精确到具体的方法</p></blockquote><h6 id="直联模式"><a href="#直联模式" class="headerlink" title="直联模式"></a>直联模式</h6><p><img src="https://s2.loli.net/2022/06/23/hyzIHkUjwPJip97.png" alt="image-20220623231516165"></p><p><img src="https://s2.loli.net/2022/06/23/9eN6KiY1hlopSd3.png" alt="image-20220623231621772"></p><h6 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h6><p><img src="https://s2.loli.net/2022/06/23/34V7Fw9HYfuINX6.png" alt="image-20220623233146439"></p><p>Postman批量请求</p><p><img src="https://s2.loli.net/2022/06/23/UW3sfhAR1TJ8gMF.png" alt="                                                                                                                                                                    "></p><p><img src="https://s2.loli.net/2022/06/23/6d9sawUcOxBAkVi.png" alt="image-20220623233336646"></p><p><img src="https://s2.loli.net/2022/06/23/uAkvy87fRLFltc2.png" alt="image-20220623233348177"></p><h6 id="链路模式"><a href="#链路模式" class="headerlink" title="链路模式"></a>链路模式</h6><p>使用<code>@SentinelResource</code></p><p><img src="https://s2.loli.net/2022/06/23/xuVckNpdFEjBY5A.png" alt="image-20220623235059181"></p><p>编辑配置文件</p><p><img src="https://s2.loli.net/2022/06/23/RsOx5BNTAiI3UhW.png" alt="image-20220623235243139"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">  <span class="attr">transport:</span></span><br><span class="line">    <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br><span class="line">  <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭 context 收敛</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/24/NmFIACqYUe78PWz.png" alt="image-20220624000212443"></p><p><img src="https://s2.loli.net/2022/06/23/3OEaRLc6dNVTuly.png" alt="image-20220623235944923"></p><p><img src="https://s2.loli.net/2022/06/24/Gxy5ZQYtAKc97q6.png" alt="image-20220624000010412"></p><h5 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h5><blockquote><p>快速失败：请求在某一时刻高于阈值，不接受新的请求，直接返回一个拒绝信息</p><p>Warm up：基于方案一，缓慢的将阈值提高到指定阈值，形成一个缓存保护</p><p>排队等待：将请求进入队列，在规定时间内如果可以执行则执行，超时则放弃</p></blockquote><h4 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h4><blockquote><p>Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。<br>CPU usage：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0）<br>平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。<br>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。<br>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</p></blockquote><p><img src="https://s2.loli.net/2022/06/24/rNRfcuPAmC2DHQo.png" alt="image-20220624000732211"></p><p><img src="https://s2.loli.net/2022/06/24/irjoQvXtsnf4ZCh.png" alt="image-20220624000759729"></p><h4 id="自定义限流和异常处理"><a href="#自定义限流和异常处理" class="headerlink" title="自定义限流和异常处理"></a>自定义限流和异常处理</h4><h5 id="自定义限流处理Controller类"><a href="#自定义限流处理Controller类" class="headerlink" title="自定义限流处理Controller类"></a>自定义限流处理Controller类</h5><h6 id="定义请求映射"><a href="#定义请求映射" class="headerlink" title="定义请求映射"></a>定义请求映射</h6><p><img src="https://s2.loli.net/2022/06/24/MZnNOuISmlq3eDK.png" alt="image-20220624144520582"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/rateLimit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义通用的限流处理逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/customBlockHandler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">blockHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="string">&quot;限流成功&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="设定限流页面"><a href="#设定限流页面" class="headerlink" title="设定限流页面"></a>设定限流页面</h6><p><img src="https://s2.loli.net/2022/06/24/Acj6KwfDSWOTFdl.png" alt="image-20220624144643754"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sentinel:</span></span><br><span class="line">  <span class="attr">transport:</span></span><br><span class="line">    <span class="attr">dashboard:</span> <span class="string">localhost:8858</span></span><br><span class="line">  <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭 context 收敛</span></span><br><span class="line">  <span class="attr">block-page:</span> <span class="string">/rateLimit/customBlockHandler</span> <span class="comment"># 自定义限流映射页面</span></span><br></pre></td></tr></table></figure><h6 id="新增流控规则"><a href="#新增流控规则" class="headerlink" title="新增流控规则"></a>新增流控规则</h6><p><img src="https://s2.loli.net/2022/06/24/L75xUB1V8rEzRCc.png" alt="image-20220624144809125"></p><p><img src="https://s2.loli.net/2022/06/24/p9BjMvohrCAQIUt.png" alt="image-20220624144843223"></p><h5 id="自定义限流处理Handler类"><a href="#自定义限流处理Handler类" class="headerlink" title="自定义限流处理Handler类"></a>自定义限流处理Handler类</h5><h6 id="定义限流处理逻辑"><a href="#定义限流处理逻辑" class="headerlink" title="定义限流处理逻辑"></a>定义限流处理逻辑</h6><p><img src="https://s2.loli.net/2022/06/24/huKpDmYRAHy1elX.png" alt="image-20220624153735076"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;getBorrowByBook&quot;, blockHandler = &quot;handlerExceptionByMethod&quot;)</span><span class="comment">/*开启方法限流监控*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BookBorrowDetail <span class="title function_">getBorrowByBook</span><span class="params">(Long bid)</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(<span class="literal">null</span>,bid);</span><br><span class="line">    List&lt;User&gt; users = borrows.stream().map(borrow -&gt; userService.getUserById(borrow.getUid())).collect(Collectors.toList());</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getBookById(bid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookBorrowDetail</span>(users, book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BookBorrowDetail <span class="title function_">handlerExceptionByMethod</span><span class="params">(Long bid , BlockException exception)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookBorrowDetail</span>(Collections.emptyList(), <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/24/hGW1Lg9d348KQxr.png" alt="image-20220624153640058"></p><h4 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h4><h5 id="添加热点参数限流测试接口"><a href="#添加热点参数限流测试接口" class="headerlink" title="添加热点参数限流测试接口"></a>添加热点参数限流测试接口</h5><p><img src="https://s2.loli.net/2022/06/25/kDALKvEj9dxZVgX.png" alt="image-20220625121225907"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热点参数限流测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/param&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;param1&quot;, required = false)</span> String param1,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(value = &quot;param2&quot;, required = false)</span> String param2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;param1:&quot;</span> + param1 + <span class="string">&quot;,param2:&quot;</span> + param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/25/TpiLzJaXYr3ux2C.png" alt="image-20220625121536398"></p><h5 id="新增热点参数限流规则"><a href="#新增热点参数限流规则" class="headerlink" title="新增热点参数限流规则"></a>新增热点参数限流规则</h5><p><img src="https://s2.loli.net/2022/06/25/NnSPMpom4JbYDfH.png" alt="image-20220625121935694"></p><p><img src="https://s2.loli.net/2022/06/25/YQo7KE24lTuWPyt.png" alt="image-20220625122042115"></p><p><img src="https://s2.loli.net/2022/06/25/RfLT9oy57OuhJ6m.png" alt="image-20220625122055925"></p><h5 id="添加参数例外项"><a href="#添加参数例外项" class="headerlink" title="添加参数例外项"></a>添加参数例外项</h5><blockquote><p>对于请求的参数值进行限流操作</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/T3qWiGjwMVeZ5kD.png" alt="image-20220625123242671"></p><p><img src="https://s2.loli.net/2022/06/25/BNOwFJy9YSr6ogA.png" alt="image-20220625123057218"></p><p><img src="https://s2.loli.net/2022/06/25/5sMIcb43VDqgmhE.png" alt="image-20220625123421168"></p><p><img src="https://s2.loli.net/2022/06/25/O1dekB5HMynlArq.png" alt="image-20220625123433063"></p><h3 id="熔断和降级"><a href="#熔断和降级" class="headerlink" title="熔断和降级"></a>熔断和降级</h3><blockquote><p>Sentinel支持对服务间调用进行保护，对故障应用进行熔断操作</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/LDtTJqUhlMpS1Hk.jpg" alt="image-20220328124619289"></p><p><img src="https://s2.loli.net/2022/06/25/8Op3DWgnirFA4kS.png" alt="image-20220625201603610"></p><h4 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h4><p><img src="https://s2.loli.net/2022/06/25/UYZQlbnv93MzG2O.png" alt="image-20220625223846345"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/breaker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleBreakerController</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断策略：慢调用测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sleep&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 熔断策略：异常比例和异常数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">exception</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="慢调用："><a href="#慢调用：" class="headerlink" title="慢调用："></a>慢调用：</h5><blockquote><p>如果一次请求的处理时间超过了指定的RT即最大响应时间，那么就被判定为<code>慢调用</code>，在一个统计时长内，如果请求数目大于最小请求数目，并且被判定为<code>慢调用</code>的请求比例已经超过阈值，将触发熔断。经过熔断时长之后，将会进入到半开状态进行试探</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/8l5gwXdMA6foyOq.png" alt="image-20220625222808135"></p><h5 id="异常比例："><a href="#异常比例：" class="headerlink" title="异常比例："></a>异常比例：</h5><blockquote><p>判断出现异常次数的比例</p></blockquote><p><img src="https://s2.loli.net/2022/06/25/GFcOhS9RJIYiQHg.png" alt="image-20220625224826145"></p><h5 id="异常数："><a href="#异常数：" class="headerlink" title="异常数："></a>异常数：</h5><blockquote><p>判断出现异常的次数</p></blockquote><h4 id="使用RestTemplate"><a href="#使用RestTemplate" class="headerlink" title="使用RestTemplate"></a>使用RestTemplate</h4><h5 id="添加RestTemplate注册配置类并使用-SentinelRestTemplate包装"><a href="#添加RestTemplate注册配置类并使用-SentinelRestTemplate包装" class="headerlink" title="添加RestTemplate注册配置类并使用@SentinelRestTemplate包装"></a>添加RestTemplate注册配置类并使用@SentinelRestTemplate包装</h5><p><img src="https://s2.loli.net/2022/06/25/VuHWglk3FKBipoE.png" alt="image-20220625192729019"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RibbonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@SentinelRestTemplate</span><span class="comment">/*使用@SentinelRestTemplate包装RestTemplate实例*/</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="添加CircleBreakerController类"><a href="#添加CircleBreakerController类" class="headerlink" title="添加CircleBreakerController类"></a>添加CircleBreakerController类</h5><p><img src="https://s2.loli.net/2022/06/25/7xuOJehMwiZcbR3.png" alt="image-20220625192637561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/breaker&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleBreakerController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CircleBreakerController.class);</span><br><span class="line">    <span class="meta">@Resource(name = &quot;restTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fallback/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback = &quot;handleFallback&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long uid)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://user-service/user/&quot;</span> + uid, User.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fallbackException/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallbackException&quot;, fallback = &quot;handleFallbackException&quot;, exceptionsToIgnore = &#123;NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">fallbackException</span><span class="params">(<span class="meta">@PathVariable</span> Long uid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (uid == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uid == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + uid, User.class, uid));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">handleFallBack</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(defaultUser, <span class="string">&quot;服务降级返回&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">handleFallBackException</span><span class="params">(Long uid, Throwable e)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;handleFallBackException uid:&#123;&#125;,throwable class:&#123;&#125;&quot;</span>, uid, e.getClass());</span><br><span class="line">        <span class="type">User</span> <span class="variable">defaultUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(-<span class="number">2L</span>, <span class="string">&quot;defaultUser&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(defaultUser, <span class="string">&quot;服务降级返回&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/25/rg1QdyOslLmx6W7.png" alt="image-20220625195026590"></p><p><img src="https://s2.loli.net/2022/06/25/Z4bShpd1YGamr9i.png" alt="image-20220625195103109"></p><h4 id="与Fegin结合使用"><a href="#与Fegin结合使用" class="headerlink" title="与Fegin结合使用"></a>与Fegin结合使用</h4><blockquote><p>Sentinel可以适配Feign组件，使用Feign来进行服务间调用时，可以使用它进行熔断</p></blockquote><h5 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件开启Sentinel对Feign支持"><a href="#配置文件开启Sentinel对Feign支持" class="headerlink" title="配置文件开启Sentinel对Feign支持"></a>配置文件开启Sentinel对Feign支持</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 打开Sentinel对feign的支持</span></span><br></pre></td></tr></table></figure><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><p><img src="https://s2.loli.net/2022/06/25/Z9bE5WrexDGaBsn.png" alt="image-20220625224937819"></p><h5 id="Feign异常处理实现"><a href="#Feign异常处理实现" class="headerlink" title="Feign异常处理实现"></a>Feign异常处理实现</h5><p><img src="https://s2.loli.net/2022/06/25/AsK1xvdoyQmTEYb.png" alt="image-20220625225041440"></p><h2 id="使用Nacos存储流控规则"><a href="#使用Nacos存储流控规则" class="headerlink" title="使用Nacos存储流控规则"></a>使用Nacos存储流控规则</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Alibaba（二）Sentinel&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba（二）Sentinel&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba（二）Sentine</summary>
      
    
    
    
    
    <category term="Spring Cloud Alibaba" scheme="http://example.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba（一） Nacos</title>
    <link href="http://example.com/2022/06/10/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%80%EF%BC%89Nacos/"/>
    <id>http://example.com/2022/06/10/Spring%20Cloud%20Alibaba%EF%BC%88%E4%B8%80%EF%BC%89Nacos/</id>
    <published>2022-06-10T00:31:22.000Z</published>
    <updated>2022-07-31T15:37:46.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><h2 id="Spring-Cloud-Alibaba简介"><a href="#Spring-Cloud-Alibaba简介" class="headerlink" title="Spring Cloud Alibaba简介"></a>Spring Cloud Alibaba简介</h2><p>Spring Cloud Alibaba的官网：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/2021/zh-cn/">https://spring-cloud-alibaba-group.github.io/github-pages/2021/zh-cn/</a></p><p>Spring Cloud Alibaba致力于提供为微服务开发的一站式解决方案。Spring Cloud Alibaba包含开发分布式应用服务的必需组件，方便开发者通过Spring Cloud编程模型轻松使用这些组件来开发分布式应用服务。</p><p>基于Spring Cloud Alibaba，我们只需要添加一些注解和少量配置，就可以将Spring Cloud应用接入阿里分布式应用解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h2 id="Spring-Cloud-Alibaba功能"><a href="#Spring-Cloud-Alibaba功能" class="headerlink" title="Spring Cloud Alibaba功能"></a>Spring Cloud Alibaba功能</h2><ul><li><strong>服务限流降级</strong>：支持 WebServlet、WebFlux、OpenFeign、RestTemplate、Dubbo 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>Rpc服务</strong>：扩展 Spring Cloud 客户端 RestTemplate 和 OpenFeign，支持调用 Dubbo RPC 服务</li><li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><h1 id="Spring-Cloud-Alibaba-Nacos"><a href="#Spring-Cloud-Alibaba-Nacos" class="headerlink" title="Spring Cloud Alibaba Nacos"></a>Spring Cloud Alibaba Nacos</h1><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p>Nacos（Naming Configuration Service）是一款阿里巴巴开源的核心组件之一，可以作为注册中心和配置中心使用，是一个易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><h2 id="Spring-Cloud-Alibaba-Nacos-Discovery"><a href="#Spring-Cloud-Alibaba-Nacos-Discovery" class="headerlink" title="Spring Cloud Alibaba Nacos Discovery"></a>Spring Cloud Alibaba Nacos Discovery</h2><blockquote><p>使用 Spring Cloud Alibaba Nacos Discovery，可基于 Spring Cloud 的编程模型快速接入 Nacos 服务注册功能。</p></blockquote><p>本章即之后的章节项目将从微服务实战项目开始实现</p><h3 id="服务注册-发现：Nacos-Discovery"><a href="#服务注册-发现：Nacos-Discovery" class="headerlink" title="服务注册/发现：Nacos Discovery"></a>服务注册/发现：Nacos Discovery</h3><blockquote><p>传统手动的法师来给每一个客户端来配置所有服务提者的服务列表是一件非常困难的事，而且不利于服务的动态扩缩容。</p><p>Nacos Discovery帮助您将服务自动注册到Nacos服务端并且能够动态感知和刷新某个服务实例的服务列表。除此之外，Nacos Discovery 也将服务实例自身的一些元数据信息-例如 host，port, 健康检查URL，主页等内容注册到 Nacos</p></blockquote><h4 id="安装并运行Nacos"><a href="#安装并运行Nacos" class="headerlink" title="安装并运行Nacos"></a>安装并运行Nacos</h4><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><p>下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p>这里演示的是Release 1.4.3: <a href="https://github.com/alibaba/nacos/releases/tag/1.4.3">https://github.com/alibaba/nacos/releases/tag/1.4.3</a></p><p><img src="https://s2.loli.net/2022/06/08/8tACZwskQL5Heub.png" alt="image-20220608151022859"></p><h5 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h5><p><img src="https://s2.loli.net/2022/06/08/frndp5TaeJ7SOZD.png" alt="image-20220608151336675"></p><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><h6 id="方法一：直接运行bin目录下的startup-cmd"><a href="#方法一：直接运行bin目录下的startup-cmd" class="headerlink" title="方法一：直接运行bin目录下的startup.cmd"></a>方法一：直接运行<code>bin</code>目录下的<code>startup.cmd</code></h6><p><img src="https://s2.loli.net/2022/06/08/uWno7NgHjlAv1YQ.png" alt="image-20220608151621137"></p><h6 id="方法二：命令行方式启动"><a href="#方法二：命令行方式启动" class="headerlink" title="方法二：命令行方式启动"></a>方法二：命令行方式启动</h6><p><img src="https://s2.loli.net/2022/06/08/5DIOhpWov4kPBNL.png" alt="image-20220608152119250"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p>账号：nacos 密码：nacos</p><p><img src="https://s2.loli.net/2022/06/08/dl1P39XjEkAm5Ng.png" alt="image-20220608225920696"></p><p><img src="https://s2.loli.net/2022/06/08/OKRqkeBDhpwPNfL.png" alt="image-20220608225804004"></p><h5 id="IDEA运行Nacos"><a href="#IDEA运行Nacos" class="headerlink" title="IDEA运行Nacos"></a>IDEA运行Nacos</h5><h6 id="导入nacos文件夹"><a href="#导入nacos文件夹" class="headerlink" title="导入nacos文件夹"></a>导入nacos文件夹</h6><p><img src="https://s2.loli.net/2022/06/08/dDZYqMEV9tNWcmr.png" alt="image-20220608231129349"></p><h6 id="终端方式启动"><a href="#终端方式启动" class="headerlink" title="终端方式启动"></a>终端方式启动</h6><p><img src="https://s2.loli.net/2022/06/08/wzX2b8VWQRykMfq.png" alt="image-20220608231419442"></p><h6 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h6><p><img src="https://s2.loli.net/2022/06/08/fAzdYW28sNLPMpe.png" alt="image-20220608232132712"></p><p><img src="https://s2.loli.net/2022/06/08/BVs8lSHF1ZD2dXL.png" alt="image-20220608233248311"></p><h6 id="通过配置启动"><a href="#通过配置启动" class="headerlink" title="通过配置启动"></a>通过配置启动</h6><p><img src="https://s2.loli.net/2022/06/08/yRVKWxcu7sZU2kz.png" alt="image-20220608232058033"></p><p><img src="https://s2.loli.net/2022/06/08/r6iHNjoceKGankV.png" alt="image-20220608233607707"></p><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><h5 id="父项目添加配置"><a href="#父项目添加配置" class="headerlink" title="父项目添加配置"></a>父项目添加配置</h5><p><img src="https://s2.loli.net/2022/06/11/LIl8gtkdGxURpBi.png" alt="image-20220611020306806"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="子项目添加配置"><a href="#子项目添加配置" class="headerlink" title="子项目添加配置"></a>子项目添加配置</h5><p><img src="https://s2.loli.net/2022/06/11/lRvphiuBSd7wfaY.png" alt="image-20220611020723174"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p><img src="https://s2.loli.net/2022/06/11/ALlvrDuC5mVQgMW.png" alt="image-20220611021231105"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 配置Nacos地址</span></span><br></pre></td></tr></table></figure><p>其他微服务同样配置</p><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p><img src="https://s2.loli.net/2022/06/11/lnIpxQ9JEayjDvq.png" alt="image-20220611021949207"></p><p><img src="https://s2.loli.net/2022/06/11/NnVkXPtflOQUWYd.png" alt="image-20220611021927620"></p><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><p>基于OpenFeign实现服务发现调用以及负载均衡</p><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><p><img src="https://s2.loli.net/2022/06/11/yNjLUf183Eucp6n.png" alt="image-20220611022550859"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="添加服务绑定接口和服务降级实现类"><a href="#添加服务绑定接口和服务降级实现类" class="headerlink" title="添加服务绑定接口和服务降级实现类"></a>添加服务绑定接口和服务降级实现类</h5><p><img src="https://s2.loli.net/2022/06/11/OEimnYqFLwelMZ7.png" alt="image-20220611024104034"></p><h5 id="启动服务测试"><a href="#启动服务测试" class="headerlink" title="启动服务测试"></a>启动服务测试</h5><p><img src="https://s2.loli.net/2022/06/11/Mxo1qrJZSNjtK4V.png" alt="image-20220611130833755"></p><p>​                       <img src="https://s2.loli.net/2022/06/12/wj6JG7fOsYSLIXU.png" alt="imagep><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h5 id="编辑配置-1"><a href="#编辑配置-1" class="headerlink" title="编辑配置"></a>编辑配置</h5><p><img src="https://s2.loli.net/2022/06/12/EvKuoxNLlVwqRiy.png"></p><h5 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h5><p><img src="https://s2.loli.net/2022/06/12/lTUnKwx1SduasmJ.png" alt="image-20220612003248596"></p><h4 id="集群分区"><a href="#集群分区" class="headerlink" title="集群分区"></a>集群分区</h4><h5 id="拷贝配置文件"><a href="#拷贝配置文件" class="headerlink" title="拷贝配置文件"></a>拷贝配置文件</h5><p><img src="https://s2.loli.net/2022/06/12/EhunzVocyP6M1CS.png" alt="image-20220612124042870"></p><h5 id="编辑配置-2"><a href="#编辑配置-2" class="headerlink" title="编辑配置"></a>编辑配置</h5><p><img src="https://s2.loli.net/2022/06/12/YxV1I2DsBoEF4hl.png" alt="image-20220612124226242"></p><h5 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h5><p><img src="https://s2.loli.net/2022/06/12/ns4bIiGj3W5ydVu.png" alt="image-20220612124304898"></p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p><img src="C:\Users\YuanJW\AppData\Roaming\Typora\typora-user-images\image-20220612124621418.png" alt="image-20220612124621418"></p><p><img src="https://s2.loli.net/2022/06/12/UGdaPulTBXkr3Jt.png" alt="image-20220612124751157"></p><p>可以看到远程调用会优先调用同区域的服务</p><h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><h5 id="新建配置"><a href="#新建配置" class="headerlink" title="新建配置"></a>新建配置</h5><p><img src="https://s2.loli.net/2022/06/12/Ry2bVgdP1IoFZar.png" alt="image-20220612130208791"></p><p><img src="https://s2.loli.net/2022/06/12/wpOtfNlVsoGCrRd.png" alt="image-20220612130406018"></p><h5 id="模块导入依赖"><a href="#模块导入依赖" class="headerlink" title="模块导入依赖"></a>模块导入依赖</h5><p><img src="https://s2.loli.net/2022/06/12/JVXhSTP1DFaOd7G.png" alt="image-20220612130732290"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="添加bootstrap-yml文件"><a href="#添加bootstrap-yml文件" class="headerlink" title="添加bootstrap.yml文件"></a>添加bootstrap.yml文件</h5><p><img src="https://s2.loli.net/2022/06/12/2ZYdKlxQmgjJtE4.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 配置文件后缀名</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># 配置中心服务器地址</span></span><br></pre></td></tr></table></figure><h5 id="动态配置刷新"><a href="#动态配置刷新" class="headerlink" title="动态配置刷新"></a>动态配置刷新</h5><p><img src="https://s2.loli.net/2022/06/12/OqbusFDZzSiaved.png" alt="image-20220612131405795"></p><h6 id="添加测试接口"><a href="#添加测试接口" class="headerlink" title="添加测试接口"></a>添加测试接口</h6><blockquote><p>@RefreshScope开启配置热更新</p></blockquote><p><img src="https://s2.loli.net/2022/06/12/csGIkjSia1y6dxQ.png" alt="image-20220612131815556"></p><h6 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h6><p><img src="https://s2.loli.net/2022/06/12/Fob8w4xCkHZfrYR.png" alt="image-20220612132921114"></p><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><h5 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h5><p><img src="https://s2.loli.net/2022/06/12/NbDjJcxY6zTvPRA.png" alt="image-20220612160137591"></p><p><img src="https://s2.loli.net/2022/06/12/SinjsVObu3Y4wBN.png" alt="image-20220612160204606"></p><p><img src="https://s2.loli.net/2022/06/12/fl7od9eZ2JvtEB8.png" alt="image-20220612160223591"></p><h5 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p><img src="https://s2.loli.net/2022/06/12/8zqR4YNVnatEwhL.png" alt="image-20220612160411772"></p><p><img src="https://s2.loli.net/2022/06/12/7SYlMxaL4zGXkWZ.png" alt="image-20220612160925156"></p><h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><h5 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h5><p><img src="https://s2.loli.net/2022/07/31/eXbVgzS5jcG3Npt.png" alt="image-20220622134121856"></p><h5 id="Docker拉取Nacos镜像"><a href="#Docker拉取Nacos镜像" class="headerlink" title="Docker拉取Nacos镜像"></a>Docker拉取Nacos镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/CzrEQtHaGgqYVKf.png" alt="image-20220725133226976"></p><h5 id="导入镜像数据库"><a href="#导入镜像数据库" class="headerlink" title="导入镜像数据库"></a>导入镜像数据库</h5><p>新建数据库</p><p><img src="https://s2.loli.net/2022/07/25/3Y6ehc1SO4yNW59.png" alt="image-20220725154919101"></p><p>运行SQL文件</p><p><img src="https://s2.loli.net/2022/07/25/xwv8GmOYiCqf2er.png" alt="image-20220725154956057"></p><p><img src="https://s2.loli.net/2022/07/25/enTvLX4qCs6olWp.png" alt="image-20220725155021863"></p><p>创建用户</p><p><img src="https://s2.loli.net/2022/07/25/QsdtqWUFN1Agl72.png" alt="image-20220725155140678"></p><p>配置角色权限</p><p>  <img src="https://s2.loli.net/2022/07/25/MaQ792tduGOk4EL.png" alt="image-20220725155241752"></p><h5 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h5><blockquote><p>Docker集群部署Nacos时要注意，创建的Nacos容器填写的ip都是外部ip，但是创建的网段却是docker内部的网段，因此 我们需要只能在同一网段的ip</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line">docker network create --driver bridge --subnet=172.19.0.0/16 --gateway=172.19.0.1 mynetwork</span><br><span class="line">docker network inspect mynetwork</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/1pXnxgCGFUd9WsS.png" alt="image-20220725222721807"></p><p><img src="https://s2.loli.net/2022/07/26/MPa7SzwO2dHon8K.png" alt="image-20220726134000193"></p><h5 id="创建Nacos容器集群"><a href="#创建Nacos容器集群" class="headerlink" title="创建Nacos容器集群"></a>创建Nacos容器集群</h5><p>my-nacos1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_SERVER_IP=172.19.0.2 \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=&quot;172.19.0.2:8848 172.19.0.3:8848&quot; \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=服务器公网ip \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=13851176590++ \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--network=mynetwork \</span><br><span class="line">--name my-nacos1 \</span><br><span class="line">--ip 172.19.0.2 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p>my-nacos2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e PREFER_HOST_MODE=ip \</span><br><span class="line">-e MODE=cluster \</span><br><span class="line">-e NACOS_SERVER_IP=172.19.0.3 \</span><br><span class="line">-e NACOS_APPLICATION_PORT=8848 \</span><br><span class="line">-e NACOS_SERVERS=&quot;172.19.0.2:8848 172.19.0.3:8848&quot; \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=服务器公网ip \</span><br><span class="line">-e MYSQL_SERVICE_PORT=3306 \</span><br><span class="line">-e MYSQL_SERVICE_USER=root \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=13851176590++ \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-p 8849:8848 \</span><br><span class="line">--network=mynetwork \</span><br><span class="line">--name my-nacos2 \</span><br><span class="line">--ip 172.19.0.3 \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/31/Y3oWri2ygU6B7JV.png" alt="image-20220731222759572"></p><p>访问my-nacos1地址：http://{ip}:8848/nacos/index.html</p><p>访问my-nacos2地址：http://{ip}:8849/nacos/index.html</p><p>输入默认的账户密码nacos登录成功则说明集群部署成功</p><p><img src="https://s2.loli.net/2022/07/25/fSAHghq96xmItYj.png" alt="image-20220725162901216"></p><p><img src="https://s2.loli.net/2022/07/25/1exnlPqh4GCmr9i.png" alt="image-20220725162936386"></p><h5 id="使用Nginx反向代理Nacos集群"><a href="#使用Nginx反向代理Nacos集群" class="headerlink" title="使用Nginx反向代理Nacos集群"></a>使用Nginx反向代理Nacos集群</h5><p>拉取nginx镜像并创建nginx容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/27/pGgndqcEivYKoyM.png" alt="image-20220627213342836"></p><p>将容器中的nginx配置文件拷贝到宿主机/usr/local/nginx/conf目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx/conf/nginx.conf</span><br><span class="line">docker cp 53cf4d545507:/etc/nginx/nginx.conf /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>停止并删除之前的nginx容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop </span><br><span class="line">docker rm </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/25/DatLuxfVb12Bgeo.png" alt="image-20220725164656491"></p><p>修改nginx.conf配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    upstream cluster&#123;</span><br><span class="line">        server 172.19.0.2:8848;</span><br><span class="line">        server 172.19.0.3:8848;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://cluster;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据挂载运行docker容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx --network=mynetwork -v /usr/local/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro -p 8080:8080 -d nginx</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/31/pCx4qLs65zT3PoW.png" alt="image-20220731225828171"></p><p>访问：http://{ip}:8080/nacos/</p><p><img src="https://s2.loli.net/2022/07/31/rJb2SFCVuaqkP18.png" alt="image-20220731225909334"></p><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    discovery:</span><br><span class="line">      server-addr: &#123;ip&#125;:8080</span><br></pre></td></tr></table></figure><p>运行服务</p><p><img src="https://s2.loli.net/2022/07/31/Qd7fkcwBaPmTAxF.png" alt="image-20220731230040255"></p><p><img src="https://s2.loli.net/2022/07/31/m3Dkc8UijoB7uVz.png" alt="image-20220731230103903"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Alibaba&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Alibaba&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Alibaba&quot;&gt;&lt;/a&gt;Spring Cloud Alibaba&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Spring Cloud Alibaba" scheme="http://example.com/tags/Spring-Cloud-Alibaba/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（八） Config</title>
    <link href="http://example.com/2022/06/06/08.Spring%20Cloud%EF%BC%88%E5%85%AB%EF%BC%89Config/"/>
    <id>http://example.com/2022/06/06/08.Spring%20Cloud%EF%BC%88%E5%85%AB%EF%BC%89Config/</id>
    <published>2022-06-06T12:32:54.000Z</published>
    <updated>2022-06-24T01:06:52.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><p>对于传统的单体应用，使用配置文件管理所有配置。而在微服务架构中，微服务的配置管理一般有以下需求：</p><ul><li>集中管理配置</li><li>环境不同，配置不同</li><li>运行时可动态调整</li><li>配置修改后自动更新</li></ul><p>因此对于微服务架构而言，一个通用的配置管理机制必不可少，常见的做法时使用配置服务器管理配置。</p><h2 id="Spring-Cloud-Config简介"><a href="#Spring-Cloud-Config简介" class="headerlink" title="Spring Cloud Config简介"></a>Spring Cloud Config简介</h2><p>Spring Cloud Config为分布式系统提供了集中化的外部配置支持，它分为服务端和客户端两个部分即Config Server和Config Client两部分。由于Config Server和Config Client实现了对Spring Environment和PropertySource抽象的映射， 因此，Spring Cloud Config适合Spring应用程序。</p><p>Config Server是一个可横向扩展、集中式的配置服务器即分布式配置中心，它作为一个独立应用，用于集中管理应用程序各个环境下的配置，它可以从配置仓库获取配置信息并提供给客户端使用。</p><p>Config Client是Config Server的客户端，通过请求配置中心来获取配置信息，在启动时加载配置并缓存以提高性能。</p><p>Spring Cloud Config的配置中心默认采用Git来存储配置信息，因此可以方便地实现对配置的版本控制与内容审计。</p><p><img src="https://s2.loli.net/2022/06/06/hz19xyFDBeJOVRL.png" alt="image-20220606232213855"></p><h2 id="Git仓库准备配置信息"><a href="#Git仓库准备配置信息" class="headerlink" title="Git仓库准备配置信息"></a>Git仓库准备配置信息</h2><h3 id="新建repo"><a href="#新建repo" class="headerlink" title="新建repo"></a>新建repo</h3><p><img src="https://s2.loli.net/2022/06/07/oEt9WpbLNP2QmXc.png" alt="image-20220607001325420"></p><h3 id="导入本地"><a href="#导入本地" class="headerlink" title="导入本地"></a>导入本地</h3><p><img src="https://s2.loli.net/2022/06/06/3xurKjNWiDcIAE6.png" alt="image-20220606235624177"></p><p><img src="https://s2.loli.net/2022/06/07/dfiIQVpuzoYmlPe.png" alt="image-20220607001406544"></p><h3 id="创建borrowservice-dev-yml文件"><a href="#创建borrowservice-dev-yml文件" class="headerlink" title="创建borrowservice-dev.yml文件"></a>创建borrowservice-dev.yml文件</h3><p><img src="https://s2.loli.net/2022/06/06/4tPNfGJ7LTDAxz3.png" alt="image-20220606235609117"></p><h3 id="上传Gitee"><a href="#上传Gitee" class="headerlink" title="上传Gitee"></a>上传Gitee</h3><p><img src="https://s2.loli.net/2022/06/06/HsFrAyLu23Tf7Zh.png" alt="image-20220606235723615"></p><h2 id="创建Config服务端"><a href="#创建Config服务端" class="headerlink" title="创建Config服务端"></a>创建Config服务端</h2><h3 id="创建config-server模块"><a href="#创建config-server模块" class="headerlink" title="创建config-server模块"></a>创建config-server模块</h3><p><img src="https://s2.loli.net/2022/06/06/qb2T7JnK8Pi4EzB.png" alt="image-20220606233511777"></p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8601</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span> <span class="comment">#配置存储配置信息的Git仓库</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/YuanJianWei/springcloud-config.git</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">YuanJianWei</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">13851176590</span><span class="string">++</span></span><br><span class="line">          <span class="attr">default-label:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">clone-on-start:</span> <span class="literal">true</span> <span class="comment">#开启启动时直接从git获取配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   <span class="string">http://root:123456@replica2:8006/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span><span class="comment">/*启用配置中心功能*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取配置信息"><a href="#获取配置信息" class="headerlink" title="获取配置信息"></a>获取配置信息</h3><h4 id="获取配置文件信息的访问格式"><a href="#获取配置文件信息的访问格式" class="headerlink" title="获取配置文件信息的访问格式"></a>获取配置文件信息的访问格式</h4><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取配置信息</span></span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;</span><br><span class="line"><span class="comment"># 获取配置文件信息</span></span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br></pre></td></tr></table></figure></blockquote><p>访问<a href="http://localhost:8601/master/borrowservice-dev.yml">http://localhost:8601/master/borrowservice-dev.yml</a></p><p><img src="https://s2.loli.net/2022/06/07/xXTRL7leICF1zah.png" alt="image-20220607001222532"></p><h2 id="创建Config客户端"><a href="#创建Config客户端" class="headerlink" title="创建Config客户端"></a>创建Config客户端</h2><p><img src="https://s2.loli.net/2022/06/07/rzEuANgdV6KZf7b.png" alt="image-20220607002521755"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置文件bootstrap-yml"><a href="#添加配置文件bootstrap-yml" class="headerlink" title="添加配置文件bootstrap.yml"></a>添加配置文件bootstrap.yml</h3><p><img src="https://s2.loli.net/2022/06/07/9ZMSb4OG5nk8FH2.png" alt="image-20220607002856093"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">borrowservice</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8601</span> <span class="comment">#配置服务器地址</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">prod</span> <span class="comment">#环境</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/07/FnTrGmKMAlUNBsO.png" alt="image-20220607003453586"></p><h2 id="配置中心添加安全认证"><a href="#配置中心添加安全认证" class="headerlink" title="配置中心添加安全认证"></a>配置中心添加安全认证</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Config&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Config&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Config&quot;&gt;&lt;/a&gt;Spring Cloud Config&lt;/h1&gt;&lt;p&gt;对于</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（七） Gateway</title>
    <link href="http://example.com/2022/06/05/07.Spring%20Cloud%EF%BC%88%E4%B8%83%EF%BC%89Gateway/"/>
    <id>http://example.com/2022/06/05/07.Spring%20Cloud%EF%BC%88%E4%B8%83%EF%BC%89Gateway/</id>
    <published>2022-06-05T12:32:54.000Z</published>
    <updated>2022-06-06T02:05:01.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><h2 id="Gateway简介"><a href="#Gateway简介" class="headerlink" title="Gateway简介"></a>Gateway简介</h2><p>Gateway为SpringBoot应用提供了API网关支持，具有强大的智能路由与过滤器功能，是Spring Cloud的第二代网关组件。</p><blockquote><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5.0、Spring Boot 2和Project Reactor等技术。</p><p>Gateway旨在提供一种简单有效的方式来对API进行路由以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p><p>Gateway基于Spring 5.0的新特性WebFlux进行开发，底层网络通信框架使用的是Netty，所以其吞吐量高、性能强劲。</p></blockquote><h3 id="Gateway特性"><a href="#Gateway特性" class="headerlink" title="Gateway特性"></a>Gateway特性</h3><p>Spring Cloud Gateway具有如下特性：</p><ul><li>基于基于Spring 5、Spring Boot 2和Project Reactor进行构建；</li><li>动态路由：能够匹配任何请求属性；</li><li>集成Spring Cloud服务发现组件自动转发请求，默认集成Ribbon做负载均衡，默认集成Hystrix的断路器功能网关进行保护；</li><li>易于编写Predicate（断言）和Filter（过滤器）并对路由指定</li><li>请求限流，支持路径重写</li><li>性能强劲，功能强大，设计优雅，易于扩展。</li></ul><h3 id="Gateway核心概念"><a href="#Gateway核心概念" class="headerlink" title="Gateway核心概念"></a>Gateway核心概念</h3><h4 id="Route（路由）"><a href="#Route（路由）" class="headerlink" title="Route（路由）"></a>Route（路由）</h4><p>路由是构建网关的基本模块，它由ID、目标URL、一系列的断言和过滤器组成。如果断言为true，则匹配该路由。</p><h4 id="Predicate（断言）"><a href="#Predicate（断言）" class="headerlink" title="Predicate（断言）"></a>Predicate（断言）</h4><p>Java 8的Function Predicate。输入类型是Spring框架中ServerWebExchange。开发人员可以匹配HTTP请求中的所有内容，例如请求头或请求参数。如果请求与断言相匹配，则进行路由。</p><h4 id="Filter（过滤器）"><a href="#Filter（过滤器）" class="headerlink" title="Filter（过滤器）"></a>Filter（过滤器）</h4><p>指的是Spring框架中GatewayFilter的实例。使用过滤器，可以在请求被路由前后对请求以及响应数据进行修改，同时可以利用Filter实现授权、访问日志记录、接口耗时记录等功能。</p><h3 id="Spring-Cloud架构图"><a href="#Spring-Cloud架构图" class="headerlink" title="Spring Cloud架构图"></a>Spring Cloud架构图</h3><p><img src="https://s2.loli.net/2022/06/06/T2XrzdfAtqo9K7b.webp" alt="img"></p><p>Gateway  Client发送请求给Spring Cloud Gateway，Gateway Handler Mapping会判断请求路径是否匹配路由的配置，如果匹配则会进入Gateway Web Handler，Gateway Web Handler会读取路由上所有配置的过滤器，然后将该请求交给过滤器处理，最后转发到路由配置的微服务上。</p><h2 id="整合Gateway网关服务"><a href="#整合Gateway网关服务" class="headerlink" title="整合Gateway网关服务"></a>整合Gateway网关服务</h2><h3 id="创建api-gateway模块"><a href="#创建api-gateway模块" class="headerlink" title="创建api-gateway模块"></a>创建api-gateway模块</h3><p><img src="https://s2.loli.net/2022/06/05/qDz7pj6vEbOulfM.png" alt="image-20220605220825979"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p><img src="https://s2.loli.net/2022/06/05/Yx1iOJq3PbXy4rm.png" alt="image-20220605220610948"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8501</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: api-gateway</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   http:<span class="comment">//root:123456@replica2:8006/eureka</span></span><br></pre></td></tr></table></figure><h3 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置路由-两种不同的方式"><a href="#配置路由-两种不同的方式" class="headerlink" title="配置路由(两种不同的方式)"></a>配置路由(两种不同的方式)</h3><p>Gateway提供了两种不同方式用于路由的配置，一种是通过yml文件来配置，另一种是通过Java Bean来配置。</p><h4 id="使用yml文件配置"><a href="#使用yml文件配置" class="headerlink" title="使用yml文件配置"></a>使用yml文件配置</h4><h5 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h5><p><img src="https://s2.loli.net/2022/06/05/r4kbVZfiJ5tU3QH.png" alt="image-20220605224452034"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8501</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span> <span class="comment"># 配置路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">borrow-service</span> <span class="comment"># 路由ID</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://borrow-service</span> <span class="comment"># 匹配后路由地址 lb表示负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 断言，路径相匹配进行路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/borrow/**</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   <span class="string">http://root:123456@replica2:8006/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/05/Og8xt27sBWCD9Sq.png" alt="image-20220605232411324"></p><h4 id="使用Java-Bean配置"><a href="#使用Java-Bean配置" class="headerlink" title="使用Java Bean配置"></a>使用Java Bean配置</h4><p><img src="https://s2.loli.net/2022/06/05/ioLBp79xsMtrvnE.png" alt="image-20220605232458457"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(r -&gt; r.path(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://localhost:8101/user/**&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/05/t2CS3Wq19cXrMOA.png" alt="image-20220605232523491"></p><h3 id="路由过滤器"><a href="#路由过滤器" class="headerlink" title="路由过滤器"></a>路由过滤器</h3><h4 id="给请求添加请求头的过滤器"><a href="#给请求添加请求头的过滤器" class="headerlink" title="给请求添加请求头的过滤器"></a>给请求添加请求头的过滤器</h4><p><img src="https://s2.loli.net/2022/06/06/NzZf2bdg94rekMy.png" alt="image-20220606094937543"></p><h4 id="在BookController获取请求头并输出"><a href="#在BookController获取请求头并输出" class="headerlink" title="在BookController获取请求头并输出"></a>在BookController获取请求头并输出</h4><p><img src="https://s2.loli.net/2022/06/06/gmV7Ys18ARCIEiX.png" alt="image-20220606095201696"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://s2.loli.net/2022/06/06/YoedDxJR1I9Av3M.png" alt="image-20220606095224169"></p><p>控制打印</p><p><img src="https://s2.loli.net/2022/06/06/2I1H3YFoqgMpfQO.png" alt="image-20220606095302361"></p><h3 id="全局路由配置器"><a href="#全局路由配置器" class="headerlink" title="全局路由配置器"></a>全局路由配置器</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Gateway&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Gateway&quot;&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（六） OpenFegin</title>
    <link href="http://example.com/2022/06/05/06.Spring%20Cloud%EF%BC%88%E5%85%AD%EF%BC%89OpenFegin/"/>
    <id>http://example.com/2022/06/05/06.Spring%20Cloud%EF%BC%88%E5%85%AD%EF%BC%89OpenFegin/</id>
    <published>2022-06-04T17:55:21.000Z</published>
    <updated>2022-06-07T14:09:12.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-OpenFegin"><a href="#Spring-Cloud-OpenFegin" class="headerlink" title="Spring Cloud OpenFegin"></a>Spring Cloud OpenFegin</h1><p>RestTemplate可以实现REST API的远程调用，它的请求URL使用字符串拼接的方式，在应对URL中存在多个参数的情况时，这种方式会变得非常低效并且难以维护。</p><h2 id="Spring-Cloud-OpenFegin简介"><a href="#Spring-Cloud-OpenFegin简介" class="headerlink" title="Spring Cloud OpenFegin简介"></a>Spring Cloud OpenFegin简介</h2><p> Spring Cloud OpenFegin是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能。</p><blockquote><p>Fegin是声明式的服务调用工具，我们只需要创建一个接口并用注解的方式来配置它，就可以实现对某个服务接口的调用，简化了直接使用RestTemplate来调用服务接口的开发量。Fegin具备可插拔的注解支持，同时支持Fegin注解、JAX-RS注解及SpringMVC注解。</p></blockquote><h3 id="Fegin和OpenFegin的区别"><a href="#Fegin和OpenFegin的区别" class="headerlink" title="Fegin和OpenFegin的区别"></a>Fegin和OpenFegin的区别</h3><h4 id="Fegin"><a href="#Fegin" class="headerlink" title="Fegin"></a>Fegin</h4><p>Fegin是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端，Fegin内置Ribbon用来做客户端负载均衡，去调用服务注册中心的服务。</p><p>Fegin的使用方式：使用Fegin的注解定义接口，调用这个接口就可以调用服务注册中心的服务。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="OpenFegin"><a href="#OpenFegin" class="headerlink" title="OpenFegin"></a>OpenFegin</h4><p>OpenFegin是Spring Cloud在Fegin的基础上支持了SpringMVC的注解，如@RequestMapping等。OpenFegin的@FeginClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类。实现类中做负载均衡并调用其他服务。</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="整合OpenFeign实现负载均衡"><a href="#整合OpenFeign实现负载均衡" class="headerlink" title="整合OpenFeign实现负载均衡"></a>整合OpenFeign实现负载均衡</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动类添加-EnableFeignClients注解"><a href="#启动类添加-EnableFeignClients注解" class="headerlink" title="启动类添加@EnableFeignClients注解"></a>启动类添加@EnableFeignClients注解</h3><p><img src="https://s2.loli.net/2022/06/05/UDdStf3Qbz69eVZ.png" alt="image-20220605132039642"></p><h3 id="添加UserService接口完成对user-service服务的接口绑定"><a href="#添加UserService接口完成对user-service服务的接口绑定" class="headerlink" title="添加UserService接口完成对user-service服务的接口绑定"></a>添加UserService接口完成对user-service服务的接口绑定</h3><p><img src="https://s2.loli.net/2022/06/05/3dugCIv5k6wLcKN.png" alt="image-20220605132646831"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span><span class="comment">/*实现Feign客户端,value接口调用的服务名称*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，添加BookService接口完成对于book-service服务的接口绑定</p><p><img src="https://s2.loli.net/2022/06/05/14xQfTnyHFwRSvX.png" alt="image-20220605132956580"></p><h3 id="BorrowServiceImp调用UserService实现服务调用"><a href="#BorrowServiceImp调用UserService实现服务调用" class="headerlink" title="BorrowServiceImp调用UserService实现服务调用"></a>BorrowServiceImp调用UserService实现服务调用</h3><p><img src="https://s2.loli.net/2022/06/05/6whiYtgEzWMUjVy.png" alt="image-20220605132853381"></p><p><img src="https://s2.loli.net/2022/06/05/tMSd57zToAQI391.png" alt="image-20220605133038830"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> BorrowDetail <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid, bid);</span><br><span class="line">    List&lt;User&gt; users =  borrows.stream().map(borrow -&gt; userService.getUserById(borrow.getUid())).collect(Collectors.toList());</span><br><span class="line">    List&lt;Book&gt; books =  borrows.stream().map(borrow -&gt; bookService.getBookById(borrow.getBid())).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BorrowDetail</span>(users, books);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在user-service中的UserController打印日志"><a href="#在user-service中的UserController打印日志" class="headerlink" title="在user-service中的UserController打印日志"></a>在user-service中的UserController打印日志</h3><p><img src="https://s2.loli.net/2022/06/05/IPkiFTsR1YGBAcN.png" alt="image-20220605133900846"></p><h3 id="验证负载均衡"><a href="#验证负载均衡" class="headerlink" title="验证负载均衡"></a>验证负载均衡</h3><p><img src="https://s2.loli.net/2022/06/05/GPbwXkYHrVo8afR.png" alt="image-20220605134255080"></p><p><img src="https://s2.loli.net/2022/06/05/aK4OpjqlvUDEI1c.png" alt="image-20220605134410516"></p><h2 id="整合OpenFeign实现服务降级"><a href="#整合OpenFeign实现服务降级" class="headerlink" title="整合OpenFeign实现服务降级"></a>整合OpenFeign实现服务降级</h2><blockquote><p>OpenFegin客户端定义的接口添加一个服务降级处理的实现类即可实现OpenFegin的服务降级</p></blockquote><h3 id="添加服务降级实现类UserFallBackService"><a href="#添加服务降级实现类UserFallBackService" class="headerlink" title="添加服务降级实现类UserFallBackService"></a>添加服务降级实现类UserFallBackService</h3><p><img src="https://s2.loli.net/2022/06/05/A7yQXgGbRl3mPBO.png" alt="image-20220605151559717"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookFallBackService</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Book</span>(-<span class="number">1L</span>, <span class="string">&quot;defaultTitle&quot;</span>, <span class="string">&quot;defaultDesc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置UserService接口服务降级处理类"><a href="#设置UserService接口服务降级处理类" class="headerlink" title="设置UserService接口服务降级处理类"></a>设置UserService接口服务降级处理类</h3><p><img src="https://s2.loli.net/2022/06/05/hgX3uTofsO7zU4Z.png" alt="image-20220605165649334"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;book-service&quot;, fallback = BookFallBackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getBookById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件开启Fegin的Hystrix功能"><a href="#配置文件开启Fegin的Hystrix功能" class="headerlink" title="配置文件开启Fegin的Hystrix功能"></a>配置文件开启Fegin的Hystrix功能</h3><p><img src="https://s2.loli.net/2022/06/05/wAng5WdMf29LQsP.png" alt="image-20220605165946830"></p><p><img src="https://s2.loli.net/2022/06/05/VqtCTQgKr6h1S3d.png" alt="image-20220605170248889"></p><h2 id="整合OpenFegin实现日志打印"><a href="#整合OpenFegin实现日志打印" class="headerlink" title="整合OpenFegin实现日志打印"></a>整合OpenFegin实现日志打印</h2><blockquote><p>Fegin提供了日志打印功能，通过配置来调整日志级别，从而理解Fegin中HTTP请求的细节</p></blockquote><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>NONE：默认的，不显示任何日志</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</li></ul><h3 id="通过配置类开启日志功能"><a href="#通过配置类开启日志功能" class="headerlink" title="通过配置类开启日志功能"></a>通过配置类开启日志功能</h3><p><img src="https://s2.loli.net/2022/06/05/CxnPemj5FwgDbLT.png" alt="image-20220605171557899"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeginConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件开启日志的Fegin客户端"><a href="#配置文件开启日志的Fegin客户端" class="headerlink" title="配置文件开启日志的Fegin客户端"></a>配置文件开启日志的Fegin客户端</h3><p>设置UserService和BookService的日志级别为debug</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.test.service.UserService:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">com.test.service.BookService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>调用<a href="http://localhost:8301/borrow?uid=1&amp;bid=1%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A5%E5%BF%97%E5%A6%82%E4%B8%8B">http://localhost:8301/borrow?uid=1&amp;bid=1进行测试，控制台日志如下</a></p><p><img src="https://s2.loli.net/2022/06/05/kJbqoUnj5z2wExF.png" alt="image-20220605172131544"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-OpenFegin&quot;&gt;&lt;a href=&quot;#Spring-Cloud-OpenFegin&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud OpenFegin&quot;&gt;&lt;/a&gt;Spring Cloud OpenFeg</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（五） Hystrix</title>
    <link href="http://example.com/2022/06/04/05.Spring%20Cloud%EF%BC%88%E4%BA%94%EF%BC%89Hystrix/"/>
    <id>http://example.com/2022/06/04/05.Spring%20Cloud%EF%BC%88%E4%BA%94%EF%BC%89Hystrix/</id>
    <published>2022-06-04T07:16:22.000Z</published>
    <updated>2022-06-05T12:30:13.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h1><h2 id="Spring-Cloud-Hystrix简介"><a href="#Spring-Cloud-Hystrix简介" class="headerlink" title="Spring Cloud Hystrix简介"></a>Spring Cloud Hystrix简介</h2><p>Spring Cloud Hystrix是Spring Cloud Netflix子项目的核心组件之一，是一个用于处理分布式系统的延迟和容错的开源库，具有服务容错和线程隔离等一系列服务保护功能。</p><p>在微服务架构中，服务与服务之间通过远程调用的方式实现通信，一旦某个被调用的服务发生故障，其依赖服务也会发生故障，此时就会发生故障的蔓延，导致分布式的系统雪崩和瘫痪。</p><p><img src="https://s2.loli.net/2022/06/04/TanKqHZ7Ak9pi3U.jpg" alt="image-20220324141706946"></p><p>由于多种因素，例如网络响应、系统故障、硬件问题等，服务发生故障的情况是无法避免的。因此我们需要一个应对服务容错保护的解决方案。</p><p>Spring Cloud Hystrix实现了断路器模式，它相当于一种开关控制，通过断路器的故障监控即保险丝，当某个服务发生故障时，通过断路器监控，给服务的调用方返回一个服务于其的，可处理的备用响应响应（FallBack），而不是长时间的等待或者抛出异常，避免联级故障，这样就不会使得调用方由于长时间得不到响应而占用线程从而导致故障的蔓延，提高了分布式系统的弹性。</p><p><img src="https://s2.loli.net/2022/06/04/yOjCxY7dLbapvl3.webp" alt="img"></p><p>Hystrix具备服务降级、服务熔断、服务限流、线程隔离、请求缓存、请求合并及服务监控等强大的功能。</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><h3 id="服务降级定义"><a href="#服务降级定义" class="headerlink" title="服务降级定义"></a>服务降级定义</h3><p>服务降级：当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或作简单处理，从而释放服务器资源以保证核心业务正常运作或高效运作，即服务降级提供一个补救措施正常响应给请求者，保证服务可用的前提下，提高系统的可用性和安全性。如果在并发高峰期不做服务降级处理，不仅会影响整体服务的性能，甚至会导致宕机造成服务不可用。</p><h3 id="服务降级应用场景"><a href="#服务降级应用场景" class="headerlink" title="服务降级应用场景"></a>服务降级应用场景</h3><p>一般在高峰期，为了保证核心功能服务的可用性，要对某些服务降级处理。</p><blockquote><p>当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些不重要或不紧急的服务或任务进行服务 延迟使用或暂停使用。</p></blockquote><h3 id="服务降级实现"><a href="#服务降级实现" class="headerlink" title="服务降级实现"></a>服务降级实现</h3><h4 id="导入Hystrix依赖"><a href="#导入Hystrix依赖" class="headerlink" title="导入Hystrix依赖"></a>导入Hystrix依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动类添加注解-EnableHystrix"><a href="#启动类添加注解-EnableHystrix" class="headerlink" title="启动类添加注解@EnableHystrix"></a>启动类添加注解@EnableHystrix</h4><p><img src="https://s2.loli.net/2022/06/04/PdLg2ro1MDa9SJI.png" alt="image-20220604155829336"></p><h4 id="在服务实现层添加调用方法与服务降级方法并且添加-HystrixCommand注解"><a href="#在服务实现层添加调用方法与服务降级方法并且添加-HystrixCommand注解" class="headerlink" title="在服务实现层添加调用方法与服务降级方法并且添加@HystrixCommand注解"></a>在服务实现层添加调用方法与服务降级方法并且添加@HystrixCommand注解</h4><p><img src="https://s2.loli.net/2022/06/04/9hrHs1cifuelgbX.png" alt="image-20220604161405440"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowMapper borrowMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userServiceUrl;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.book-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;getDefaultUserBorrowDetail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + uid, User.class);</span><br><span class="line">        List&lt;Book&gt; books = borrows.stream().map(borrow -&gt; restTemplate.getForObject(bookServiceUrl + <span class="string">&quot;/book/&quot;</span> + borrow.getBid(), Book.class)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(user, books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getDefaultUserBorrowDetail</span><span class="params">(<span class="meta">@PathVariable</span> Long uid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(<span class="literal">null</span>, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://s2.loli.net/2022/06/04/fFxadkwDN13iuEY.png" alt="image-20220604161028821"></p><p><img src="https://s2.loli.net/2022/06/04/bBlswq6HIe1oSMk.png" alt="image-20220604161441837"></p><h3 id="HystrixCommand常用参数"><a href="#HystrixCommand常用参数" class="headerlink" title="@HystrixCommand常用参数"></a>@HystrixCommand常用参数</h3><blockquote><ul><li>fallbackMethod：指定服务降级处理方法</li><li>ignoreExceptions：忽略某些处理，不发生服务降级</li><li>commandKey：命令名称，用于区分不同的命令</li><li>groupKey：分组名称，Hystrix会根据不同的分组来统计命令的告警及仪表盘信息</li><li>threadPoolKey：线程池，名称，用于划分线程池</li></ul></blockquote><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><h3 id="服务熔断定义"><a href="#服务熔断定义" class="headerlink" title="服务熔断定义"></a>服务熔断定义</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。Hystrix会监控微服务调用的状况，默认当5秒内20次调用失败就会开启熔断机制，当检测出服务调用链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点的微服务调用，快速返回”错误”的响应信息。此外，在熔断后，Hystrix会定期检测该节点的微服务是否恢复正常响应，当检测到该节点微服务响应正常后，恢复调用链路。</p><h2 id="Hystrix请求缓存"><a href="#Hystrix请求缓存" class="headerlink" title="Hystrix请求缓存"></a>Hystrix请求缓存</h2><blockquote><p>当系统并发量越来越大时，我们可以使用缓存来优化系统，达到减轻并发请求线程数，提供响应速度的效果。</p></blockquote><h2 id="Hystrix-Dashboard"><a href="#Hystrix-Dashboard" class="headerlink" title="Hystrix Dashboard"></a>Hystrix Dashboard</h2><p>Hystrix Dashboard是Spring Cloud中查看Hystrix实例执行情况的一种仪表组件，支持查看单个实例和查看集群实例。</p><blockquote><p> Hystrix提供了Hystrix Dashboard来实时监控HystrixCommand方法的执行情况。 Hystrix Dashboard可以有效地反映出每个Hystrix实例的运行情况，帮助我们快速发现系统中的问题，从而采取对应措施。</p></blockquote><h3 id="Hystrix单个实例监控"><a href="#Hystrix单个实例监控" class="headerlink" title="Hystrix单个实例监控"></a>Hystrix单个实例监控</h3><p>使用Hystrix Dashboard监控单个Hystrix实例</p><h4 id="创建hystrix-dashboard模块"><a href="#创建hystrix-dashboard模块" class="headerlink" title="创建hystrix-dashboard模块"></a>创建hystrix-dashboard模块</h4><p>hystrix-dashboard用来监控hystrix实例的执行情况</p><p><img src="https://s2.loli.net/2022/06/05/SOfGwPjR7lVyDnm.png" alt="image-20220605174356650"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p><img src="https://s2.loli.net/2022/06/05/OY8MgibDVNCw6Wm.png" alt="image-20220605175849005"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8401</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: hystrix-dashboard</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://root:123456@replica1:8005/eureka,</span><br><span class="line">                   http://root:123456@replica2:8006/eureka</span><br><span class="line">hystrix:</span><br><span class="line">  dashboard:</span><br><span class="line">    proxy-stream-allow-list: &quot;localhost&quot;</span><br></pre></td></tr></table></figure><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><p><img src="https://s2.loli.net/2022/06/05/kDE3ZbLcGPOxR8Y.png" alt="image-20220605175413117"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixDashboardApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在被监控的服务添加Actuator依赖"><a href="#在被监控的服务添加Actuator依赖" class="headerlink" title="在被监控的服务添加Actuator依赖"></a>在被监控的服务添加Actuator依赖</h4><blockquote><p>Actuator是SpringBoot程序的监控系统，可以实现健康检查，记录信息等。</p></blockquote><p><img src="https://s2.loli.net/2022/06/05/ufa3zPFyjGw7q6B.png" alt="image-20220605200314158"></p><h4 id="在被监控的服务配置开启hystrix-stream监控端点"><a href="#在被监控的服务配置开启hystrix-stream监控端点" class="headerlink" title="在被监控的服务配置开启hystrix.stream监控端点"></a>在被监控的服务配置开启hystrix.stream监控端点</h4><p><img src="https://s2.loli.net/2022/06/05/8cbhMJS71vrVBiE.png" alt="image-20220605181613411"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;hystrix.stream&#x27;</span><br></pre></td></tr></table></figure><h4 id="Hystrix监控实例"><a href="#Hystrix监控实例" class="headerlink" title="Hystrix监控实例"></a>Hystrix监控实例</h4><p>访问Hystrix Dashboard：<a href="http://localhost:8401/hystrix">http://localhost:8401/hystrix</a></p><p><img src="https://s2.loli.net/2022/06/05/8SliT5JkqjKcrH3.png" alt="img"></p><p><img src="https://s2.loli.net/2022/06/05/7JmQjMbWFclp1ND.png" alt="image-20220605181313785"></p><ul><li><p>填入<a href="http://localhost:8301/actuator/hystrix.stream%EF%BC%8C%E7%82%B9%E5%87%BB%E7%9B%91%E6%8E%A7%E6%8C%89%E9%92%AE">http://localhost:8301/actuator/hystrix.stream，点击监控按钮</a></p><blockquote><p>由于本地不支持https，所以我们的地址需要填入的是http，否则会无法获取监控信息</p></blockquote><p><img src="https://s2.loli.net/2022/06/05/miQU2wXD4s3uZGl.png" alt="image-20220605200806896"></p><h3 id="Hystrix-Dashboard-图表解读"><a href="#Hystrix-Dashboard-图表解读" class="headerlink" title="Hystrix Dashboard 图表解读"></a>Hystrix Dashboard 图表解读</h3></li></ul><p><img src="https://s2.loli.net/2022/06/05/rLxDMgbQOBZSjzE.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud-Hystrix&quot;&gt;&lt;a href=&quot;#Spring-Cloud-Hystrix&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud Hystrix&quot;&gt;&lt;/a&gt;Spring Cloud Hystrix&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（四） 负载均衡</title>
    <link href="http://example.com/2022/05/31/04.Spring%20Cloud%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://example.com/2022/05/31/04.Spring%20Cloud%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2022-05-31T00:31:22.000Z</published>
    <updated>2022-06-04T07:07:59.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>微服务架构在生成环境中，各个微服务会部署多个实例，负载均衡就是将服务消费者的请求分摊到多个服务提供者实例的过程，它可以增加系统的可用性和扩展性。</p><p>当我们使用RestTemplate来调用其他服务时，Ribbon可以方便的是实现负载均衡，版本迭代之后由LoadBalancer替代。</p><p>LoadBalancer的优势主要在于支持响应式编程方式异步访问客户端，依赖Spring Web Flux实现客户端负载均衡调用。</p><h2 id="RestTemplate-HTTP客户端"><a href="#RestTemplate-HTTP客户端" class="headerlink" title="RestTemplate-HTTP客户端"></a>RestTemplate-HTTP客户端</h2><blockquote><p>RestTemplate是一个HTTP客户端，使用它我们可以方便的调用HTTP接口，支持GET、POST、PUT、DELETE等方法。</p></blockquote><p>这里以Get方法为例，说明RestTemplate远程调用，具体可查看RestOperations接口的方法声明。</p><h3 id="GET请求方法"><a href="#GET请求方法" class="headerlink" title="GET请求方法"></a>GET请求方法</h3><p><img src="https://s2.loli.net/2022/05/31/cAka7wFVt3dmnv1.png" alt="image-20220531145524762"></p><h4 id="getForObject方法"><a href="#getForObject方法" class="headerlink" title="getForObject方法"></a>getForObject方法</h4><p>返回对象为响应体中数据转化成对象</p><p><img src="https://s2.loli.net/2022/05/31/n9RcYBbxta1huEm.png" alt="image-20220531145953530"></p><h4 id="getForEntity方法"><a href="#getForEntity方法" class="headerlink" title="getForEntity方法"></a>getForEntity方法</h4><p>返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等。</p><p><img src="https://s2.loli.net/2022/05/31/6hyec7OT2JoNPzb.png" alt="image-20220531155322989"></p><p>调试运行可以看到ResponseEntity对象里的具体信息</p><p><img src="https://s2.loli.net/2022/05/31/HqZF7riKdmLEg4l.png" alt="image-20220531160107761"></p><h3 id="POST请求方法"><a href="#POST请求方法" class="headerlink" title="POST请求方法"></a>POST请求方法</h3><p><img src="https://s2.loli.net/2022/05/31/KBhko1qaprPNC53.png" alt="image-20220531161914683"></p><h3 id="PUT请求方法"><a href="#PUT请求方法" class="headerlink" title="PUT请求方法"></a>PUT请求方法</h3><p><img src="https://s2.loli.net/2022/05/31/Xqf3cVzpdlSxIgW.png" alt="image-20220531161923943"></p><h3 id="DELETE请求方法"><a href="#DELETE请求方法" class="headerlink" title="DELETE请求方法"></a>DELETE请求方法</h3><p><img src="https://s2.loli.net/2022/05/31/mR9GJfv8kMUpzuD.png" alt="image-20220531161936372"></p><h2 id="使用Ribbon实现客户端侧负载均衡"><a href="#使用Ribbon实现客户端侧负载均衡" class="headerlink" title="使用Ribbon实现客户端侧负载均衡"></a>使用Ribbon实现客户端侧负载均衡</h2><h3 id="Ribbon简介"><a href="#Ribbon简介" class="headerlink" title="Ribbon简介"></a>Ribbon简介</h3><p>Spring Cloud Ribbon 是Spring Cloud Netflix 子项目的核心组件之一，主要给服务间调用及API网关转发提供负载均衡的功能，有助于控制HTTP和TCP客户端的行为。在服务消费者拉取服务提供者地址列表后，Ribbon基于某种负载均衡算法，自动帮助服务消费者发起请求。</p><p>Ribbon提供了很多负载均衡算法，例如轮询、随机等，还支持自定义的负载均衡算法。</p><p>在Spring Cloud中，当Ribbon与Eureka配合使用时，Ribbon自动从Eureka Server获取服务提供者地址列表，并基于负载均衡算法，请求其中一个服务提供者实例。</p><p><img src="https://s2.loli.net/2022/05/31/3kn5YHRgswdcfUD.png" alt="image-20220531144624058"></p><h3 id="服务消费者整合Ribbon"><a href="#服务消费者整合Ribbon" class="headerlink" title="服务消费者整合Ribbon"></a>服务消费者整合Ribbon</h3><p>由于之前的项目使用的Spring Cloud Netflix版本已经弃用Ribbon，所有我们需要修改响应的版本信息，这里就不做过多的赘述。</p><h4 id="项目引入依赖"><a href="#项目引入依赖" class="headerlink" title="项目引入依赖"></a>项目引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><p>主要配置端口、注册中心地址以及服务调用路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8301</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/cloudstudy_borrow</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">13851176590</span><span class="string">++</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">borrow-service</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   <span class="string">http://root:123456@replica2:8006/eureka</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">user-service:</span> <span class="string">http://user-service</span></span><br><span class="line">  <span class="attr">book-service:</span> <span class="string">http://book-service</span></span><br></pre></td></tr></table></figure><h4 id="在RestTemplate注入方法上添加-LoadBalanced注解"><a href="#在RestTemplate注入方法上添加-LoadBalanced注解" class="headerlink" title="在RestTemplate注入方法上添加@LoadBalanced注解"></a>在RestTemplate注入方法上添加@LoadBalanced注解</h4><p>添加@LoadBalanced注解，就可为RestTemplate整合Ribbom，使其具备负载均衡的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注册RestTemplate对象*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口实现负载均衡的远程调用"><a href="#接口实现负载均衡的远程调用" class="headerlink" title="接口实现负载均衡的远程调用"></a>接口实现负载均衡的远程调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowMapper borrowMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userServiceUrl;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.book-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookServiceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + uid, User.class);</span><br><span class="line">        List&lt;Book&gt; books = borrows.stream().map(borrow -&gt; restTemplate.getForObject(bookServiceUrl + <span class="string">&quot;/book/&quot;</span> + borrow.getBid(), Book.class)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(user, books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BookBorrowDetail <span class="title function_">getBorrowByBook</span><span class="params">(Long bid)</span> &#123;</span><br><span class="line">        List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(<span class="literal">null</span>,bid);</span><br><span class="line">        List&lt;User&gt; users = borrows.stream().map(borrow -&gt; restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + borrow.getUid(), User.class)).collect(Collectors.toList());</span><br><span class="line">        ResponseEntity&lt;Book&gt; entity = restTemplate.getForEntity(bookServiceUrl + <span class="string">&quot;/book/&quot;</span>+bid, Book.class);</span><br><span class="line">        <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookBorrowDetail</span>(users, entity.getBody());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookBorrowDetail</span>(users, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BorrowDetail <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span> &#123;</span><br><span class="line">        List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid, bid);</span><br><span class="line">        List&lt;User&gt; users = borrows.stream().map(borrow -&gt; restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&quot;</span> + borrow.getUid(), User.class)).collect(Collectors.toList());</span><br><span class="line">        List&lt;Book&gt; books = borrows.stream().map(borrow -&gt; restTemplate.getForObject(bookServiceUrl + <span class="string">&quot;/book/&quot;</span> + borrow.getBid(), Book.class)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BorrowDetail</span>(users, books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowService borrowService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(BorrowController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/borrow/user/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span> Long uid)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrowService.getBorrowByUser(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/borrow/book/&#123;bid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BookBorrowDetail <span class="title function_">getBorrowByBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bid&quot;)</span> Long bid)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrowService.getBorrowByBook(bid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/borrow&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> BorrowDetail <span class="title function_">getBorrow</span><span class="params">(<span class="meta">@RequestParam(value = &quot;uid&quot;, required = true)</span> Long uid,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestParam(value = &quot;bid&quot;, required = true)</span> Long bid)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrowService.getBorrow(uid, bid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/log-instance&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logUserInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> <span class="built_in">this</span>.loadBalancerClient.choose(<span class="string">&quot;user-service&quot;</span>);</span><br><span class="line">        BorrowController.logger.info(<span class="string">&quot;&#123;&#125;:&#123;&#125;:&#123;&#125;&quot;</span>, serviceInstance.getServiceId(), serviceInstance.getHost(), serviceInstance.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ribbon原理"><a href="#Ribbon原理" class="headerlink" title="Ribbon原理"></a>Ribbon原理</h3><p>负载均衡拦截器在获取用户的请求地址后，会获取微服务的虚拟主机名，再从注册中心拉取微服务的网络地址列表，在服务列表进行负载均衡。</p><h3 id="LoadBalancerInterceptor方法"><a href="#LoadBalancerInterceptor方法" class="headerlink" title="LoadBalancerInterceptor方法"></a>LoadBalancerInterceptor方法</h3><p><img src="https://s2.loli.net/2022/06/04/5u8lHbiq2IwLsZK.png" alt="image-20220604011042764"></p><h4 id="ClientHttpRequestInterceptor接口"><a href="#ClientHttpRequestInterceptor接口" class="headerlink" title="ClientHttpRequestInterceptor接口"></a>ClientHttpRequestInterceptor接口</h4><p><img src="https://s2.loli.net/2022/06/04/hNT4dRpDCPGmKxo.png" alt="image-20220604011204139"></p><h4 id="接口方法具体实现"><a href="#接口方法具体实现" class="headerlink" title="接口方法具体实现"></a>接口方法具体实现</h4><p><img src="https://s2.loli.net/2022/06/04/N1i2zUhcSsEMZTG.png" alt="image-20220604011815218"></p><h4 id="负载均衡接口"><a href="#负载均衡接口" class="headerlink" title="负载均衡接口"></a>负载均衡接口</h4><p><img src="https://s2.loli.net/2022/06/04/IEDUkSawVr6Bo38.png" alt="image-20220604011927175"></p><h4 id="RibbonLoadBalancerClient"><a href="#RibbonLoadBalancerClient" class="headerlink" title="RibbonLoadBalancerClient"></a>RibbonLoadBalancerClient</h4><p><img src="https://s2.loli.net/2022/06/04/hS5IYyFbMdzEP93.png" alt="image-20220604012252580"></p><p><img src="https://s2.loli.net/2022/06/04/jxzdhaRfpMbri8g.png" alt="image-20220604013037564"></p><p><img src="https://s2.loli.net/2022/06/04/tNSx4zEI1PjUOHe.png" alt="image-20220604020317394"></p><h3 id="Ribbon负载均衡策略"><a href="#Ribbon负载均衡策略" class="headerlink" title="Ribbon负载均衡策略"></a>Ribbon负载均衡策略</h3><p>Ribbon的负载均衡规则是由IRule的接口定义，每一个子接口对应一种规则。</p><p><img src="https://s2.loli.net/2022/06/04/hnHiXkwaAFRm264.png" alt="image-20220604021231385"></p><blockquote><ul><li>com.netflix.loadbalancer.RandomRule：从提供服务的实例中以随机的方式；</li><li>com.netflix.loadbalancer.RoundRobinRule：以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过；</li><li>com.netflix.loadbalancer.RetryRule：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例；</li><li>com.netflix.loadbalancer.WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择；</li><li>com.netflix.loadbalancer.BestAvailableRule：选择并发较小的实例；</li><li>com.netflix.loadbalancer.AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例；</li><li>com.netflix.loadbalancer.ZoneAwareLoadBalancer：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例。</li></ul></blockquote><p>通过自定义定义IRule实现可以修改负载均衡规则，由以下两种方式实现：</p><ul><li><h5 id="配置类IRule注入-全局配置"><a href="#配置类IRule注入-全局配置" class="headerlink" title="配置类IRule注入(全局配置)"></a>配置类IRule注入(全局配置)</h5></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="配置文件方式-服务绑定"><a href="#配置文件方式-服务绑定" class="headerlink" title="配置文件方式(服务绑定)"></a>配置文件方式(服务绑定)</h5></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalanverRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><h3 id="Ribbon饥饿加载"><a href="#Ribbon饥饿加载" class="headerlink" title="Ribbon饥饿加载"></a>Ribbon饥饿加载</h3><p>Ribbon默认是采用懒加载，即第一次访问时会去创建LoadBalanceClient，请求时间很长</p><p>使用Ribbon的饥饿加载会在项目开启时创建，降低第一次访问的耗时</p><p>开启饥饿加载的方式，配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span></span><br><span class="line">      <span class="string">-user-service</span></span><br><span class="line">      <span class="string">-book-service</span></span><br></pre></td></tr></table></figure><h2 id="使用LoadBalancer实现客户端侧负载均衡"><a href="#使用LoadBalancer实现客户端侧负载均衡" class="headerlink" title="使用LoadBalancer实现客户端侧负载均衡"></a>使用LoadBalancer实现客户端侧负载均衡</h2><h3 id="服务消费者整合LoadBalancer"><a href="#服务消费者整合LoadBalancer" class="headerlink" title="服务消费者整合LoadBalancer"></a>服务消费者整合LoadBalancer</h3><p>整合步骤和Ribbon的整合步骤基本一致，只是依赖版本不同且无需引入Ribbon</p><p><img src="https://s2.loli.net/2022/06/04/FjU71SVsuKqReNJ.png" alt="image-20220604031524461"></p><h3 id="LoadBalancer原理"><a href="#LoadBalancer原理" class="headerlink" title="LoadBalancer原理"></a>LoadBalancer原理</h3><p><img src="https://s2.loli.net/2022/06/04/HntcLGT71OI8ezf.png" alt="img"></p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><p><img src="https://s2.loli.net/2022/06/04/souvc8PDjrLiEa9.jpg" alt="img"></p><h4 id="LoadBalanced注解开启负载均衡"><a href="#LoadBalanced注解开启负载均衡" class="headerlink" title="@LoadBalanced注解开启负载均衡"></a>@LoadBalanced注解开启负载均衡</h4><p><img src="https://s2.loli.net/2022/05/31/FVTlEocZC7dAgX4.png" alt="image-20220531102500703"></p><h4 id="客户端HTTP请求拦截器接口"><a href="#客户端HTTP请求拦截器接口" class="headerlink" title="客户端HTTP请求拦截器接口"></a>客户端HTTP请求拦截器接口</h4><p><img src="https://s2.loli.net/2022/05/31/NXIVysgG1m3f8Zn.png" alt="image-20220531102426240"></p><h4 id="负载均衡拦截器实现接口"><a href="#负载均衡拦截器实现接口" class="headerlink" title="负载均衡拦截器实现接口"></a>负载均衡拦截器实现接口</h4><p><img src="https://s2.loli.net/2022/05/31/EZq7PAYWDn6Nbmx.png" alt="image-20220531102336211"></p><h4 id="负载均衡客户端中execute接口方法"><a href="#负载均衡客户端中execute接口方法" class="headerlink" title="负载均衡客户端中execute接口方法"></a>负载均衡客户端中execute接口方法</h4><p><img src="https://s2.loli.net/2022/06/04/JwUVaTtpf26NiZK.png" alt="image-20220604031737840"></p><h4 id="BlockingLoadBalancerClient实现execute方法"><a href="#BlockingLoadBalancerClient实现execute方法" class="headerlink" title="BlockingLoadBalancerClient实现execute方法"></a>BlockingLoadBalancerClient实现execute方法</h4><p><img src="https://s2.loli.net/2022/06/04/JyHrIVhnLdkEN21.png" alt="image-20220604033125528"></p><h4 id="choose具体实现"><a href="#choose具体实现" class="headerlink" title="choose具体实现"></a>choose具体实现</h4><p><img src="https://s2.loli.net/2022/06/04/zrxKo9I2AJhQYEb.png" alt="image-20220604034427604"></p><h4 id="ReactiveLoadBalancer被不同规则的负载均衡器实现"><a href="#ReactiveLoadBalancer被不同规则的负载均衡器实现" class="headerlink" title="ReactiveLoadBalancer被不同规则的负载均衡器实现"></a>ReactiveLoadBalancer被不同规则的负载均衡器实现</h4><p><img src="https://s2.loli.net/2022/06/04/CifzRdGSx9UeF7v.png" alt="image-20220604034601307"></p><h4 id="默认由RoundRobinLoadBalancer即轮询负载均衡实现"><a href="#默认由RoundRobinLoadBalancer即轮询负载均衡实现" class="headerlink" title="默认由RoundRobinLoadBalancer即轮询负载均衡实现"></a>默认由RoundRobinLoadBalancer即轮询负载均衡实现</h4><p><img src="https://s2.loli.net/2022/06/04/P9qwhCGmdnS2oKJ.png" alt="image-20220604035134969"></p><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><h4 id="创建负载均衡配置类"><a href="#创建负载均衡配置类" class="headerlink" title="创建负载均衡配置类"></a>创建负载均衡配置类</h4><p><img src="https://s2.loli.net/2022/06/04/lHi542fqrPbzvwZ.png" alt="image-20220604041507416"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">randomLoadBalancer</span> <span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name)<span class="comment">/*随机负载均衡策略*/</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为指定服务指定负载均衡策略"><a href="#为指定服务指定负载均衡策略" class="headerlink" title="为指定服务指定负载均衡策略"></a>为指定服务指定负载均衡策略</h4><p><img src="https://s2.loli.net/2022/06/04/RTznUVK461PiZCo.png" alt="image-20220604125902447"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalancerClients(</span></span><br><span class="line"><span class="meta">        value = &#123;</span></span><br><span class="line"><span class="meta">                @LoadBalancerClient(value = &quot;user-service&quot;, configuration = LoadBalancerConfig.class),</span></span><br><span class="line"><span class="meta">                @LoadBalancerClient(value = &quot;book-service&quot;, configuration = LoadBalancerConfig.class)</span></span><br><span class="line"><span class="meta">        &#125;, defaultConfiguration = LoadBalancerClientConfiguration.class</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><p>我们发现远程调用user-service服务不在是通过轮询的方式，而是通过随机的负载均衡策略实现</p><p><img src="https://s2.loli.net/2022/06/04/67SJVhtDiTkIqNF.png" alt="image-20220604130204288"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h1&gt;&lt;p&gt;微服务架构在生成环境中，各个微服务会部署多个实例，负载均衡就是将服务消费者的请求分摊到多个服务提供者实例的过程，它可以增加系</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（三） Eureka</title>
    <link href="http://example.com/2022/05/30/03.Spring%20Cloud%EF%BC%88%E4%B8%89%EF%BC%89Eureka/"/>
    <id>http://example.com/2022/05/30/03.Spring%20Cloud%EF%BC%88%E4%B8%89%EF%BC%89Eureka/</id>
    <published>2022-05-30T00:31:22.000Z</published>
    <updated>2022-05-31T01:20:44.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务注册与发现-Spring-Cloud-Eureka"><a href="#服务注册与发现-Spring-Cloud-Eureka" class="headerlink" title="服务注册与发现-Spring Cloud Eureka"></a>服务注册与发现-Spring Cloud Eureka</h1><p>Spring Cloud Eureka是Spring Cloud Netflix子项目的核心组件之一。主要用于微服务架构中的<strong>服务治理</strong>。</p><p>本章主要介绍微服务远程调用的<strong>提供者</strong>和<strong>消费者</strong>、<strong>Eureka</strong>的简介、Eureka<strong>注册中心</strong>的搭建、Eureka<strong>客户端</strong>的搭建、Eureka<strong>集群</strong>的搭建以及Eureka注册中心<strong>添加登录认证</strong>的方法。</p><h2 id="微服务远程调用的提供者和消费者"><a href="#微服务远程调用的提供者和消费者" class="headerlink" title="微服务远程调用的提供者和消费者"></a>微服务远程调用的提供者和消费者</h2><p>服务提供者：暴露接口给其他微服务调用</p><p>服务消费者：调用其他微服务提供的接口</p><p>服务提供者和消费者角色是<strong>相对</strong>的，一个服务可以同时是服务提供者和服务消费者</p><h2 id="服务调用存在的问题"><a href="#服务调用存在的问题" class="headerlink" title="服务调用存在的问题"></a>服务调用存在的问题</h2><p>在上一个微服务项目中，借阅服务使用RestTemplate调用用户和书籍微服务中的RESTFUL API，但是我们是将服务提供者的请求网络地址（IP和端口等）硬编码在代码中，这样做存在一定的问题：</p><ul><li>使用场景局限性强。如果服务提供的网络地址发送改变，将影响整个服务消费者。</li><li>无法动态伸缩。在实际的生产环境中，每个微服务一般都会部署多个实例以实现容灾和负载均衡，此外系统还应具备自动伸缩的能力，例如动态增减节点等。显然硬编码的方式难以实现上述需求。</li></ul><p>需要解决的问题：</p><ul><li>服务消费者如何获取服务提供者的地址信息和健康状态</li><li>服务消费者如何在多个服务提供者中进行选择，从而实现负载均衡和容灾处理 </li></ul><h2 id="服务发现机制"><a href="#服务发现机制" class="headerlink" title="服务发现机制"></a>服务发现机制</h2><p>面对硬编码提供服务提供地址的方式所带来的诸多问题，服务消费者需要一个强大的服务发现机制，服务消费者基于这种机制获取服务提供者的网络信息。这种机制可以通过微服务架构中的服务发现组件实现。</p><p>微服务项目使用服务发现组件后，系统的架构图如下：</p><p><img src="https://s2.loli.net/2022/05/29/lV7JcfMqwuCXySo.png" alt="image-20220529162012664"></p><p>其中服务提供者、服务消费者、服务发现组件的关系如下：</p><ul><li>各个微服务将自己的网络地址等信息注册并存储到服务发现组件中，当微服务的网络地址发送变更时，会重新注册到服务发现组件。</li><li>服务消费者从服务发现组件查询服务提供者的网络地址并使用地址调用服务提供者的接口</li><li>各个微服务与服务发现组件使用一定机制通信（例如心跳），服务发现组件如长时间无法与某微服务实例通信即发现某微服务实例无法访问，该实例则会被注销。</li></ul><p>服务发现组件具备功能如下：</p><ul><li>服务注册表：作为服务发现组件的核心，用于记录各个微服务的信息（包括名称、IP、端口等）。服务注册表提供查询API和管理API，查询API用于查询可用的微服务实例，管理API用于服务的注册和注销。</li><li>服务注册：当微服务启动时，将自己的信息注册到服务发现组件的过程。</li><li>服务发现：查询可用微服务列表及其网络地址的机制。</li><li>服务检查：服务发现组件使用一定的机制定时检测已注册的服务。</li></ul><h2 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h2><p>Spring Cloud Eureka是Netflix开源的服务发现组件，是基于REST的服务。它包含Server和Client两部分来实现服务的注册与发现。</p><p>每个微服务启动时向注册中心注册组件自己的地址及端口信息，注册中心维护着服务名称与服务实例的对应关系。每个微服务会定时从注册中心拉去服务信息列表，同时通过发送心跳等方式定时汇报自己的运行状态。当服务调用其他服务时。可以从自己获取到的服务列表中获取实例地址来进行远程调用 。</p><p>在基于Eureka的架构中，微服务角色可以被分成两类：</p><ul><li>Eureka Server：Eureka服务端即注册中心<ul><li>记录服务信息</li><li>心跳状态监控</li></ul></li><li>Eureka Client：Eureka客户端<ul><li>Provide：服务提供者<ul><li>注册服务信息到Eureka Server即注册中心</li><li>定时发送心跳汇报自己的运行状态</li></ul></li><li>Comsumer：服务消费者<ul><li>根据服务名称从Eureka Server即注册中心拉取服务列表</li><li>基于服务列表，使用负载均衡选中一个微服务的网络地址发起远程调用</li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2022/05/29/Z54x8MlcA3JFjna.png" alt="image-20220529162224930"></p><h2 id="Eureka原理"><a href="#Eureka原理" class="headerlink" title="Eureka原理"></a>Eureka原理</h2><p>Eureka架构图如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7a7a226a66be550b3408854d90f1ef2e.png" alt="img"></p><ul><li>Application Service：服务提供者</li><li>Application Client：服务消费者</li><li>Make Remote Call：调用RESTful API的行为即远程调用</li></ul><p>Eureka包含两个组件：Eureka Server和Eureka Client</p><ul><li><p>Eureka Server：提供服务发现能力，各个微服务启动时，会向Eureka Server注册自己的信息（例如IP、端口、微服务名名名称等），Eureka Server会存储这些信息。</p></li><li><p>Eureka Client：是一个Java客户端，用于简化与Eureka Server的交互</p></li><li><p>心跳状态监控：当微服务启动后，微服务会周期性（默认30秒）地向Eureka Server发送心跳以及续约自己的”短租”，如果Eureka Server在一定时间内（默认90秒）没有接收到某个微服务实例的心跳，Eureka Server会注销该实例。</p></li><li><p>Eureka集群：在集群中，Eureka Server同样也是Eureka Client。多个Eureka Server实例，互相之间通过复制的方式来实现服务注册表中数据的同步。</p></li><li><p>Eureka Client缓存机制：Eureka Client会缓存服务注册表中的信息，微服务无须每次请求都查询Eureka Server，在降低Eureka Server压力的同时，即使Eureka Server所有节点宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者网络地址并完成远程调用。</p><p>综上，Eureka通过心跳检查、客户端缓存等机制，提高了系统的灵活性和可用性。</p></li></ul><h2 id="搭建Eureka-Server即注册中心"><a href="#搭建Eureka-Server即注册中心" class="headerlink" title="搭建Eureka Server即注册中心"></a>搭建Eureka Server即注册中心</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p><img src="https://s2.loli.net/2022/05/29/VlEBvsemphJWNAy.png" alt="image-20220529230825482"></p><p><img src="https://s2.loli.net/2022/05/29/y7BtOR1CTZJwbSv.png" alt="image-20220529230839199"></p><p><img src="https://s2.loli.net/2022/05/29/pyPvc6bijFMU7rD.png" alt="image-20220529230945601"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><h4 id="父项目中引入SpringCloud的依赖"><a href="#父项目中引入SpringCloud的依赖" class="headerlink" title="父项目中引入SpringCloud的依赖"></a>父项目中引入SpringCloud的依赖</h4><p><img src="https://s2.loli.net/2022/05/29/eiv41sVUwBCXjPg.png" alt="image-20220529233013558"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Eureka-Server项目添加依赖"><a href="#Eureka-Server项目添加依赖" class="headerlink" title="Eureka Server项目添加依赖"></a>Eureka Server项目添加依赖</h4><p><img src="https://s2.loli.net/2022/05/29/1b9porZfUy8Y4qJ.png" alt="image-20220529233048159"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写启动类并添加-EnableEurekaServer注解"><a href="#编写启动类并添加-EnableEurekaServer注解" class="headerlink" title="编写启动类并添加@EnableEurekaServer注解"></a>编写启动类并添加@EnableEurekaServer注解</h3><p><img src="https://s2.loli.net/2022/05/30/rLFcptg8yWd7qjG.png" alt="image-20220530090833112"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span><span class="comment">/*启用Euerka注册中心功能*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p><img src="https://s2.loli.net/2022/05/29/ui9QmqMoplUAg5J.png" alt="image-20220529234631910"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span> <span class="comment">#指定运行端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">#指定服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#指定主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#指定是否要从注册中心获取服务</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#指定是否要注册到注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka</span> <span class="comment">#Eureka Server交互地址,Eureka服务地址指向自己</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭保护模式</span></span><br></pre></td></tr></table></figure><h3 id="运行Eureka-Server应用"><a href="#运行Eureka-Server应用" class="headerlink" title="运行Eureka Server应用"></a>运行Eureka Server应用</h3><p><img src="https://s2.loli.net/2022/05/30/mupVIvriWRH2yAe.png" alt="image-20220530091057577"></p><h3 id="Eureka注册中心界面"><a href="#Eureka注册中心界面" class="headerlink" title="Eureka注册中心界面"></a>Eureka注册中心界面</h3><p>访问地址<a href="http://localhost:8001/">http://localhost:8001</a></p><p><img src="https://s2.loli.net/2022/05/30/CN8VoKwLfgvylqd.png" alt="image-20220530091231252"></p><h2 id="搭建Eureka-Client"><a href="#搭建Eureka-Client" class="headerlink" title="搭建Eureka Client"></a>搭建Eureka Client</h2><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><h4 id="在Eureka-Client模块添加依赖"><a href="#在Eureka-Client模块添加依赖" class="headerlink" title="在Eureka Client模块添加依赖"></a>在Eureka Client模块添加依赖</h4><p><img src="https://s2.loli.net/2022/05/30/KVRC3HctnaWQAGZ.png" alt="image-20220530092853838"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加Eureka客户端配置"><a href="#添加Eureka客户端配置" class="headerlink" title="添加Eureka客户端配置"></a>添加Eureka客户端配置</h4><p><img src="https://s2.loli.net/2022/05/30/uSjH3VkJynCpXdt.png" alt="image-20220530094314995"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8101</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/cloudstudy_user</span><br><span class="line">    username: root</span><br><span class="line">    password: 13851176590++</span><br><span class="line">  application:</span><br><span class="line">    name: user-service</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8001/eureka #配置注册中心地址</span><br></pre></td></tr></table></figure><h4 id="启动类添加-EnableDiscoveryClient注解"><a href="#启动类添加-EnableDiscoveryClient注解" class="headerlink" title="启动类添加@EnableDiscoveryClient注解"></a>启动类添加@EnableDiscoveryClient注解</h4><p><img src="https://s2.loli.net/2022/05/30/4179hFemiDjsCNU.png" alt="image-20220530094043696"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动Eureka-client"><a href="#启动Eureka-client" class="headerlink" title="启动Eureka-client"></a>启动Eureka-client</h4><p><img src="https://s2.loli.net/2022/05/30/AhjuavyoBYZpzxt.png" alt="image-20220530094828200"></p><h4 id="多实例注册"><a href="#多实例注册" class="headerlink" title="多实例注册"></a>多实例注册</h4><p><img src="https://s2.loli.net/2022/05/30/v6e9Dg3zK124CFZ.png" alt="image-20220530103422230"></p><p><img src="https://s2.loli.net/2022/05/30/wIiRWnvJZUKoBSP.png" alt="image-20220530103502163"></p><p><img src="https://s2.loli.net/2022/05/30/eKNQI9Oz6Mj57wF.png" alt="image-20220530103756735"></p><p><img src="https://s2.loli.net/2022/05/30/pbPG2DtsRF6ulZe.png" alt="image-20220530103833705"></p><p>多实例注册提高了微服务的可用性，保证系统的安全性</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>服务拉取是基于名称获取服务列表，再对服务列表做负载均衡</p><h4 id="服务名代替网络地址"><a href="#服务名代替网络地址" class="headerlink" title="服务名代替网络地址"></a>服务名代替网络地址</h4><p><img src="https://s2.loli.net/2022/05/30/JoEukZp3wLnlcKv.png" alt="image-20220530102056442"></p><h4 id="添加负载均衡注解"><a href="#添加负载均衡注解" class="headerlink" title="添加负载均衡注解"></a>添加负载均衡注解</h4><p><img src="https://s2.loli.net/2022/05/30/PItDYak79eC1ldz.png" alt="image-20220530102208990"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注册RestTemplate对象*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/30/A2TDOLv9s3Rh8Bt.png" alt="image-20220530103935690"></p><h2 id="搭建Eureka注册中心集群"><a href="#搭建Eureka注册中心集群" class="headerlink" title="搭建Eureka注册中心集群"></a>搭建Eureka注册中心集群</h2><p>搭建Eureka注册中心集群，实现注册中心的高可用</p><p>Eureka Client会定时连接Eureka Server获取服务注册表中的信息并缓存在本地，由于Eureka Client的缓存机制，微服务在远程调用时总是使用本地缓存中的数据，即使在Eureka Server发生宕机的情况，也不会影响服务之间的调用，但如果某些服务出现了不可用的情况，Eureka Client的缓存信息没有被更新，就会影响微服务的调用，甚至影响系统的可用性。因此，在现实的生产环境中我们需要部署一个多节点、高可用的Eureka Server集群。</p><p>Eureka Server可以通过运行多个实例以及相互注册的方式实现高可用的部署，Eureka Server实例会彼此增量地同步信息，从而确保所有节点数据的一致性。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/888d4743950f5566e914d44d5c12d435.png" alt="image-20220323205531185"></p><h3 id="搭建两个注册中心"><a href="#搭建两个注册中心" class="headerlink" title="搭建两个注册中心"></a>搭建两个注册中心</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在eureka-server添加配置文件application-replica1.yml配置第二个注册中心</p><p><img src="https://s2.loli.net/2022/05/30/lIAzOuCenGBqL1J.png" alt="image-20220530152133297"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span> <span class="comment">#指定运行端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">#指定服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">replica1</span> <span class="comment">#指定主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#指定是否要从注册中心获取服务</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#指定是否要注册到注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://replica2:8003/eureka</span> <span class="comment">#服务地址</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/30/VkUzIL3oQSuCcAN.png" alt="image-20220530152146152"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8003</span> <span class="comment">#指定运行端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">#指定服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">replica2</span> <span class="comment">#指定主机地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#指定是否要从注册中心获取服务</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#指定是否要注册到注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://replica1:8002/eureka</span> <span class="comment">#服务地址</span></span><br></pre></td></tr></table></figure><p>通过两个个注册中心的相互注册，搭建了注册中心的双节点集群</p><h4 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h4><p>由于defaultZone使用了自定义地址，需要配置系统的hosts文件</p><p>Mac下文件路径为<code>/etc/hosts</code>，Windows下为<code>C:\Windows\system32\drivers\etc\hosts</code>:</p><p><img src="https://s2.loli.net/2022/05/30/aROKhgqMjJYDBiN.png" alt="image-20220530135729704"></p><h3 id="运行Eureka注册中心集群"><a href="#运行Eureka注册中心集群" class="headerlink" title="运行Eureka注册中心集群"></a>运行Eureka注册中心集群</h3><p>通过不同的配置文件启动同一个Spring Boot应用</p><h4 id="添加启动配置"><a href="#添加启动配置" class="headerlink" title="添加启动配置"></a>添加启动配置</h4><p>分别以application-replica1.yml和application-replica2.yml为活动配置文件来启动eureka-server</p><p><img src="https://s2.loli.net/2022/05/30/nqYW8zxE5itGyml.png" alt="image-20220530153529543"></p><p><img src="https://s2.loli.net/2022/05/30/TkxSCoaQ9ndVFjg.png" alt="image-20220530153736918"></p><p><img src="https://s2.loli.net/2022/05/30/MVf6XPrvLiN3Jkn.png" alt="image-20220530153815504"></p><h4 id="启用两个eurake-server节点"><a href="#启用两个eurake-server节点" class="headerlink" title="启用两个eurake server节点"></a>启用两个eurake server节点</h4><p><img src="https://s2.loli.net/2022/05/30/E9UJgYLDir5Ipk6.png" alt="image-20220530154937885"></p><p>访问其中一个注册中心<a href="http://replica1:8002/">http://replica1:8002</a>发现另一个已经成为其备份</p><p><img src="https://s2.loli.net/2022/05/30/PGNCmWqEow7RJvp.png" alt="image-20220530155052338"></p><h3 id="应用注册到Eureka-Server集群"><a href="#应用注册到Eureka-Server集群" class="headerlink" title="应用注册到Eureka Server集群"></a>应用注册到Eureka Server集群</h3><p>配置多个Eureka Server地址，将其注册到多个Eureka Server集群中</p><p><img src="https://s2.loli.net/2022/05/30/A2pcj36ZWqMVQkC.png" alt="image-20220530155802325"></p><p>启动微服务</p><p><img src="https://s2.loli.net/2022/05/30/xN8cFTbfzDQJ3gK.png" alt="image-20220530163228042"></p><h2 id="Eureka-Server注册中心添加认证"><a href="#Eureka-Server注册中心添加认证" class="headerlink" title="Eureka Server注册中心添加认证"></a>Eureka Server注册中心添加认证</h2><p>Eureka Server是默认允许匿名访问，我们考研构建一个需要登录才可以访问的Eureka Server</p><h3 id="创建eureka-security-server模块"><a href="#创建eureka-security-server模块" class="headerlink" title="创建eureka-security-server模块"></a>创建eureka-security-server模块</h3><p><img src="https://s2.loli.net/2022/05/30/F4ObCNjRmPVAyrU.png" alt="image-20220530164447800"></p><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><p><img src="https://s2.loli.net/2022/05/30/RQF5eyD82L7izux.png" alt="image-20220530170636183"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加配置文件-1"><a href="#添加配置文件-1" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p>主要配置登录注册中心的用户名和密码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-security-server</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8004/eureka</span></span><br></pre></td></tr></table></figure><h4 id="添加启动类"><a href="#添加启动类" class="headerlink" title="添加启动类"></a>添加启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaSecurityServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EnableEurekaServer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加Java配置WebSecurityConfig"><a href="#添加Java配置WebSecurityConfig" class="headerlink" title="添加Java配置WebSecurityConfig"></a>添加Java配置WebSecurityConfig</h4><p>默认情况下，添加Spring  Security依赖的应用，每个请求需要添加CSRF token才可以访问。配置Eureka客户端注册时不用添加即配置/eureka/**路径不需要CSRF token</p><p><img src="https://s2.loli.net/2022/05/30/ehyfAtsCYO3UkTo.png" alt="image-20220530171701890"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.csrf().ignoringAntMatchers(<span class="string">&quot;/eureka/**&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行eureka-security-server"><a href="#运行eureka-security-server" class="headerlink" title="运行eureka-security-server"></a>运行eureka-security-server</h4><p>访问<a href="http://localhost:8004/%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81">http://localhost:8004/需要登录认证</a></p><p><img src="https://s2.loli.net/2022/05/30/TSlE5UI7ORMkdif.png" alt="image-20220530171039729"></p><p><img src="https://s2.loli.net/2022/05/30/daWvRHf7knqMP8L.png" alt="image-20220530171105097"></p><h3 id="注册服务到登录认证的注册中心"><a href="#注册服务到登录认证的注册中心" class="headerlink" title="注册服务到登录认证的注册中心"></a>注册服务到登录认证的注册中心</h3><h4 id="修改配置文件中注册中心地址格式"><a href="#修改配置文件中注册中心地址格式" class="headerlink" title="修改配置文件中注册中心地址格式"></a>修改配置文件中注册中心地址格式</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;username&#125;:$&#123;password&#125;@$&#123;hostname&#125;:$&#123;port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/30/gQmkXL1C9YshdlH.png" alt="image-20220530171734918"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@localhost:8004/eureka</span> <span class="comment">#配置注册中心地址</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p><img src="https://s2.loli.net/2022/05/30/wyqGXxbNBTVrj1A.png" alt="image-20220530171929036"></p><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><h4 id="创建两个配置文件"><a href="#创建两个配置文件" class="headerlink" title="创建两个配置文件"></a>创建两个配置文件</h4><p><img src="https://s2.loli.net/2022/05/31/RGXeISWEBv63hDQ.png" alt="image-20220531002656132"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8005</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-security-server</span><br><span class="line">  security:</span><br><span class="line">    user:</span><br><span class="line">      name: root</span><br><span class="line">      password: 123456</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: replica1</span><br><span class="line">  client:</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://root:123456@replica2:8006/eureka</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/31/HbkdMBzK6juVtQv.png" alt="image-20220531002750066"></p><h4 id="添加启动配置-1"><a href="#添加启动配置-1" class="headerlink" title="添加启动配置"></a>添加启动配置</h4><p><img src="https://s2.loli.net/2022/05/31/ZSb7uDLYAE319I6.png" alt="image-20220531002857225"></p><h4 id="服务实例注册集群"><a href="#服务实例注册集群" class="headerlink" title="服务实例注册集群"></a>服务实例注册集群</h4><p><img src="https://s2.loli.net/2022/05/31/YjLv6xli2ZysBOf.png" alt="image-20220531003217666"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:123456@replica1:8005/eureka,</span></span><br><span class="line">                   <span class="string">http://root:123456@replica2:8006/eureka</span></span><br></pre></td></tr></table></figure><h4 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h4><p><img src="https://s2.loli.net/2022/05/31/PtduxykDXIG2bi1.png" alt="image-20220531003451642"></p><p><img src="https://s2.loli.net/2022/05/31/2oHqwz1DRAyKCEh.png" alt="image-20220531003504170"></p><p><img src="https://s2.loli.net/2022/05/31/PjOv7SgFnuY826I.png" alt="image-20220531003553520"></p><h2 id="Eureka常用配置"><a href="#Eureka常用配置" class="headerlink" title="Eureka常用配置"></a>Eureka常用配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#eureka客户端配置</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#是否将自己注册到eureka服务器</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#是否获取eureka服务端上注册的服务列表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka</span> <span class="comment">#指定注册中心地址</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#启用eureka客户端</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span> <span class="comment">#定义从eureka服务端获取服务列表的时间间隔</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment">#定义服务注册中心续约的时间间隔</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment">#定义服务多久不去续约认为服务失效</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">zone:</span> <span class="string">jiangsu</span> <span class="comment">#所在区域</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span> <span class="comment">#是否优先使用ip来作为主机名</span></span><br><span class="line">  <span class="attr">server:</span> <span class="comment">#eureka服务端配置</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭eureka服务端的保护机制</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;服务注册与发现-Spring-Cloud-Eureka&quot;&gt;&lt;a href=&quot;#服务注册与发现-Spring-Cloud-Eureka&quot; class=&quot;headerlink&quot; title=&quot;服务注册与发现-Spring Cloud Eureka&quot;&gt;&lt;/a&gt;服务注册与</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（二）微服务实战</title>
    <link href="http://example.com/2022/05/28/02.Spring%20Cloud%EF%BC%88%E4%BA%8C%EF%BC%89%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2022/05/28/02.Spring%20Cloud%EF%BC%88%E4%BA%8C%EF%BC%89%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-05-28T12:10:10.000Z</published>
    <updated>2022-05-29T07:15:11.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务实战"><a href="#微服务实战" class="headerlink" title="微服务实战"></a>微服务实战</h1><p>本项目示例是一个图书借阅系统，本教程会更加注重于架构设计上的讲解，弱化业务功能和实现原理方面的研究。</p><h2 id="服务的拆分"><a href="#服务的拆分" class="headerlink" title="服务的拆分"></a>服务的拆分</h2><ul><li>单一职责：不同微服务开发不同的业务</li><li>数据独立：每个微服务拥有自己的数据库</li><li>面向服务：将业务暴露为接口，供其他微服务使用</li></ul><h2 id="微服务项目搭建"><a href="#微服务项目搭建" class="headerlink" title="微服务项目搭建"></a>微服务项目搭建</h2><h3 id="构建父项目"><a href="#构建父项目" class="headerlink" title="构建父项目"></a>构建父项目</h3><p><img src="https://s2.loli.net/2022/05/28/a72gwLiNPjVFeRH.png" alt="image-20220528192605703"></p><p><img src="https://s2.loli.net/2022/05/28/eCGT67JqZaKtNlU.png" alt="image-20220528192547239"></p><p><img src="https://s2.loli.net/2022/05/28/RNz2cU6XVTPt9fK.png" alt="image-20220528193009882"></p><p><img src="https://s2.loli.net/2022/05/28/USyIcn1vuzAXB9V.png" alt="image-20220528193030549"></p><p><img src="https://s2.loli.net/2022/05/28/zXlJeVg1QLt87B4.png" alt="image-20220528193137238"></p><p>父项目只负责依赖管理，删除无用文件</p><p><img src="https://s2.loli.net/2022/05/28/J7xueRdADkHwt5z.png" alt="image-20220528193644465"></p><p>导入通用依赖</p><p><img src="https://s2.loli.net/2022/05/28/ZzNhY5FTbKqHwtB.png" alt="image-20220528204437918"></p><h3 id="新建子模块"><a href="#新建子模块" class="headerlink" title="新建子模块"></a>新建子模块</h3><p><img src="https://s2.loli.net/2022/05/28/NXE49tnoBUPc3eq.png" alt="image-20220528201545755"></p><p><img src="https://s2.loli.net/2022/05/28/T5ZBHuAUWO9SGoQ.png" alt="image-20220528202339977"></p><p><img src="https://s2.loli.net/2022/05/28/8rnsHlRKtIfeEQ7.png" alt="image-20220528201719876"></p><p><img src="https://s2.loli.net/2022/05/28/YI56QSyDsnabFhO.png" alt="image-20220528202407207"></p><h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><p><img src="https://s2.loli.net/2022/05/28/N4ql57AQSXri1km.png" alt="image-20220528202711560"></p><p><img src="https://s2.loli.net/2022/05/28/QCdOZNnXKEcj6qT.png" alt="image-20220528202911977"></p><h4 id="创建配置文件-application-yml"><a href="#创建配置文件-application-yml" class="headerlink" title="创建配置文件-application.yml"></a>创建配置文件-application.yml</h4><p><img src="https://s2.loli.net/2022/05/28/gI9Uy7xrqkOhsVM.png" alt="image-20220528203410113"></p><h4 id="添加服务端口号"><a href="#添加服务端口号" class="headerlink" title="添加服务端口号"></a>添加服务端口号</h4><p><img src="https://s2.loli.net/2022/05/28/abqlzVI8JG2Otgm.png" alt="image-20220528203852132"></p><h4 id="导入spring-boot-starter-web依赖"><a href="#导入spring-boot-starter-web依赖" class="headerlink" title="导入spring-boot-starter-web依赖"></a>导入spring-boot-starter-web依赖</h4><p><img src="https://s2.loli.net/2022/05/28/KH85dGoLpMCzbDm.png" alt="image-20220528204039657"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>在实际的应用场景中，每个微服务都有自己的数据库服务器，按照单一职责的原则，每个微服务只会操作自己的数据库。</p><p><img src="https://s2.loli.net/2022/05/28/DYycWiIN8qjb4R6.png" alt="image-20220528234437570"></p><p><img src="https://s2.loli.net/2022/05/28/u3pVNGjP2XUcLns.png" alt="image-20220528235133900"></p><p><img src="https://s2.loli.net/2022/05/28/c78gVLrtkxBKeYT.png" alt="image-20220528235150408"></p><p><img src="https://s2.loli.net/2022/05/28/AE4pBzKDtfMalGU.png" alt="image-20220528235202429"></p><p><img src="https://s2.loli.net/2022/05/28/RBTK51ZW8McUnVS.png" alt="image-20220528235214185"></p><h4 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h4><p><img src="https://s2.loli.net/2022/05/29/horHEXnksBOu9vY.png" alt="image-20220529000109085"></p><p>在父项目引入MyBatis依赖进行版本管理</p><p><img src="https://s2.loli.net/2022/05/29/sjFcVO2AorpKDxf.png" alt="image-20220529001036883"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖版本号管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子项目中引入Mybatis依赖</p><p><img src="https://s2.loli.net/2022/05/29/ndfhVgvwGiZR41b.png" alt="image-20220529001154257"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据源信息配置</p><p><img src="https://s2.loli.net/2022/05/29/ge3VYPZcUAHqXrz.png" alt="image-20220529001617549"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/cloudstudy_user</span><br><span class="line">    username: root</span><br><span class="line">    password: 13851176590++</span><br></pre></td></tr></table></figure><h3 id="公共项目创建和引入"><a href="#公共项目创建和引入" class="headerlink" title="公共项目创建和引入"></a>公共项目创建和引入</h3><p>将服务需要用到的实体类单独放入一个项目模块中，将需要实体类的项目模块引用存放共用实体的项目，以保证每个微服务的实体类信息共用。</p><p><img src="https://s2.loli.net/2022/05/29/wpRF6obg1ZkrhM2.png" alt="image-20220529003014986"></p><p>在需要共用实体类的项目模块中引入</p><p><img src="https://s2.loli.net/2022/05/29/phz256BWgL8uCGy.png" alt="image-20220529003513439"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="书籍信息查询业务"><a href="#书籍信息查询业务" class="headerlink" title="书籍信息查询业务"></a>书籍信息查询业务</h3><p><img src="https://s2.loli.net/2022/05/29/AvF5qp8Oh1LPNyQ.png" alt="image-20220529005821372"></p><h4 id="创建Dao"><a href="#创建Dao" class="headerlink" title="创建Dao:"></a>创建Dao:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from book_info where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getBookById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service:"></a>创建Service:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    Book <span class="title function_">getBookById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.getBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller:"></a>创建Controller:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/book/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getBookById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/29/Bk2RXv7gut6r4Ld.png" alt="image-20220529011059566"></p><p>用户信息查询业务同理</p><h2 id="服务提供和消费"><a href="#服务提供和消费" class="headerlink" title="服务提供和消费"></a>服务提供和消费</h2><h3 id="借阅业务查询业务"><a href="#借阅业务查询业务" class="headerlink" title="借阅业务查询业务"></a>借阅业务查询业务</h3><p>微服务构建的是一个分布式系统，微服务之间通过网络进行通信，可以使用服务提供者与服务消费者来描述微服务之间的调用关系。</p><p><img src="https://s2.loli.net/2022/05/29/Dr5c9uHVUOaIQv7.png" alt="image-20220529150533296"></p><p>借阅服务是一个关联性比较强的服务，需要在查询出借阅信息的基础上，获取借阅用户和借阅书籍的详细信息。根据单一职责和数据独立的原则，我们可以让一个服务作为消费者调用另一个服务即提供者来获取信息。</p><p><img src="https://s2.loli.net/2022/05/29/UOwuHFY9t8M4g5J.jpg" alt="image-20220323140322502"></p><h3 id="RestTemplate-HTTP请求工具实现远程调用"><a href="#RestTemplate-HTTP请求工具实现远程调用" class="headerlink" title="RestTemplate-HTTP请求工具实现远程调用"></a>RestTemplate-HTTP请求工具实现远程调用</h3><p>这里先使用RestTemplate作为HTTP请求工具，它提供了常见的REST请求方案的模版，例如 GET 请求、POST 请求、PUT 请求、DELETE 请求以及一些通用的请求执行方法 exchange 以及 execute。</p><h4 id="注册RestTemplate"><a href="#注册RestTemplate" class="headerlink" title="注册RestTemplate"></a>注册RestTemplate</h4><p>由于启动类也是配置类，我们可以直接在启动类实现RestTemplate对象的创建和注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.test.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BorrowApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册RestTemplate对象*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里以查询用户借阅信息为例</p><p><img src="https://s2.loli.net/2022/05/29/s7FTxkGOK3jZVor.png" alt="image-20220529142333093"></p><h4 id="配置文件配置mybatis"><a href="#配置文件配置mybatis" class="headerlink" title="配置文件配置mybatis"></a>配置文件配置mybatis</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>在启动类添加@MapperScan</p><p><img src="https://s2.loli.net/2022/05/29/Zb5J6cEQU3xwjiV.png" alt="image-20220529142636511"></p><h4 id="业务处理"><a href="#业务处理" class="headerlink" title="业务处理"></a>业务处理</h4><h5 id="创建服务实体类"><a href="#创建服务实体类" class="headerlink" title="创建服务实体类:"></a>创建服务实体类:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBorrowDetail</span> &#123;</span><br><span class="line">    User user;</span><br><span class="line">    List&lt;Book&gt; books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建Dao-1"><a href="#创建Dao-1" class="headerlink" title="创建Dao:"></a>创建Dao:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BorrowMapper</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; <span class="title function_">getBorrow</span><span class="params">(Long uid, Long bid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建mapper-xml"><a href="#创建mapper-xml" class="headerlink" title="创建mapper.xml:"></a>创建mapper.xml:</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.dao.BorrowMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBorrow&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Borrow&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM borrow_info</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uid != null&quot;</span>&gt;</span> uid = #&#123;uid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bid != null&quot;</span>&gt;</span> and bid = #&#123;bid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建Service-1"><a href="#创建Service-1" class="headerlink" title="创建Service:"></a>创建Service:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用RestTemplate服务远程调用"><a href="#使用RestTemplate服务远程调用" class="headerlink" title="使用RestTemplate服务远程调用"></a>使用RestTemplate服务远程调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BorrowService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowMapper borrowMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        List&lt;Borrow&gt; borrows = borrowMapper.getBorrow(uid,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8101/user/&quot;</span> + uid, User.class);</span><br><span class="line">        List&lt;Book&gt; books = borrows.stream().map(borrow -&gt; restTemplate.getForObject(<span class="string">&quot;http://localhost:8201/book/&quot;</span> + borrow.getBid(), Book.class)).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(user, books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h5 id="创建Controller-1"><a href="#创建Controller-1" class="headerlink" title="创建Controller:"></a>创建Controller:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BorrowController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BorrowService borrowService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/borrow/user/&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserBorrowDetail <span class="title function_">getBorrowByUser</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span> Long uid)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> borrowService.getBorrowByUser(uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/29/CsgT2OHu9ZGbVcN.png" alt="image-20220529143045741"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微服务实战&quot;&gt;&lt;a href=&quot;#微服务实战&quot; class=&quot;headerlink&quot; title=&quot;微服务实战&quot;&gt;&lt;/a&gt;微服务实战&lt;/h1&gt;&lt;p&gt;本项目示例是一个图书借阅系统，本教程会更加注重于架构设计上的讲解，弱化业务功能和实现原理方面的研究。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud（一）前言和简介</title>
    <link href="http://example.com/2022/05/26/01.Spring%20Cloud%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80%E5%92%8C%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2022/05/26/01.Spring%20Cloud%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80%E5%92%8C%E7%AE%80%E4%BB%8B/</id>
    <published>2022-05-26T14:30:55.000Z</published>
    <updated>2022-05-29T06:57:20.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h3><p>基于SpringBoot框架，我们可以轻松的完成一个单体应用的搭建，单体应用是一个归档包包含整个系统所有功能的应用程序，它将系统的各项功能融于一体。</p><p><img src="https://s2.loli.net/2022/05/25/cCfj24EezbqaPQM.png" alt="image-20220525104057057"></p><p>单体应用容易搭建、部署和测试等，然而随着需求、功能和用户的不断增加，单体应用出现了复杂性高、技术债务、部署频率低、可靠性差、扩展能力受限、阻碍技术创新等问题，因此如今单体应用很难满足互联网时代业务快速变化的需要。</p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>如何解决单体应用架构存在的问题，<strong>微服务</strong>是一种全新架构模式，它有助于解决这些问题。Martin Fowler在2014年提出了“微服务”架构，他对于“微服务”的描述如下：</p><blockquote><p> In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.</p></blockquote><p>用中文表述就是,微服务架构风格是一种将一个单一应用程序开发为-一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制(通常用HTTP资源API)。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发,使用不同的数据存储技术。</p><p>因此微服务架构具备以下特点：</p><ul><li>微服务将单体应用拆分为一个个微服务,每个微服务为独立的业务开发,一个微服务只关注某个特定功能</li><li>每个微服务可以在自己的进程中独立运行,一系列独立运行的微服务共同构建整个系统</li><li>微服务之间通过一些轻量级的通信机制进行通信和数据交互,可以实现不同的微服务使用不同的语言和数据存储技术</li><li>支持全自动的部署机制，一个微服务可以部署在多个服务器，保证微服务的高可用。</li></ul><p><img src="https://s2.loli.net/2022/05/25/9KHi6WZlPpTgD4t.png" alt="image-20220525110414340"></p><p>整个应用被分解为多个微服务，各个微服务独立运行在自己的进程中，并分别有自己的数据库、微服务之间使用REST或者其他通信协议。</p><h3 id="微服务架构的优点"><a href="#微服务架构的优点" class="headerlink" title="微服务架构的优点"></a>微服务架构的优点</h3><p>相比于单体应用架构，微服务架构具有如下优点：</p><ul><li>业务模块划分清晰、易于开发和维护</li><li>局部修改，易于部署</li><li>技术栈不受限</li><li>伸缩性强，高可用</li></ul><h3 id="微服务架构面临的挑战"><a href="#微服务架构面临的挑战" class="headerlink" title="微服务架构面临的挑战"></a>微服务架构面临的挑战</h3><ul><li>通信接口调整和运维成本提高</li><li>系统复杂性提高，分布式系统需要考虑系统管理和监控、容错、网络延迟、分布式事务等问题</li></ul><h3 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h3><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p>单一职责原则是指一个单元（类、方法或服务等）只应关注整个系统功能中单独、有界限的一部分。这一原则可以帮助我们更加优雅地开发、更便捷地交付。</p><h4 id="服务自治原则"><a href="#服务自治原则" class="headerlink" title="服务自治原则"></a>服务自治原则</h4><p>服务自治是指每个微服务应具备独立的业务能力、依赖与运行环境。在微服务架构中，服务是独立的业务单元，与其他服务高度解耦。每个微服务从 构建、开发、测试、部署都可以独立运行，不依赖于其他服务。</p><h4 id="轻量级通信机制"><a href="#轻量级通信机制" class="headerlink" title="轻量级通信机制"></a>轻量级通信机制</h4><p>微服务之间应该通过轻量级的通信机制进行交互。轻量级的通信机制应具备体量小、跨语言跨平台的特点。常用的协议有REST、AMQP、STOMP、MQTT等。</p><h4 id="微服务粒度"><a href="#微服务粒度" class="headerlink" title="微服务粒度"></a>微服务粒度</h4><p>在微服务的设计阶段，使用合适的粒度划分微服务，确定其边界，保证微服务之间相对独立并保持松耦合。</p><p>领域驱动设计（Domain Driven Design）中的“界限上下文”可作为划分微服务边界、确定微服务粒度的重要依据。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>微服务架构的演进是一个循序渐进的过程，系统会根据需求业务的变化，对微服务进行重构，甚至重新划分，让架构更加合理，最终实现微服务的开发、部署、测试以及运维效率高的目的。</p><h3 id="微服务架构的实现"><a href="#微服务架构的实现" class="headerlink" title="微服务架构的实现"></a>微服务架构的实现</h3><p>微服务应用的实现相较于单体架构，需要开发框架的支持、一些自动化部署的工具、以及Iaas、PaaS或CaaS等的支持。</p><h4 id="开发框架选择：Spring-Cloud"><a href="#开发框架选择：Spring-Cloud" class="headerlink" title="开发框架选择：Spring Cloud"></a>开发框架选择：Spring Cloud</h4><p>Spring Cloud基于Spring框架一套分布式解决方案，具备开箱即用的生产特性，提升开发效率。</p><h4 id="运行平台"><a href="#运行平台" class="headerlink" title="运行平台"></a>运行平台</h4><p>微服务可以部署在PC Server、阿里云、AWS等云计算平台。处于轻量、灵活、应用支撑等方面考虑，本文将微服务署在Docker上。</p><h3 id="架构图及常用组件"><a href="#架构图及常用组件" class="headerlink" title="架构图及常用组件"></a>架构图及常用组件</h3><p><img src="https://s2.loli.net/2022/05/26/tnqRixhw4N26M8T.png" alt="image-20220526215843868"></p><p><img src="https://s2.loli.net/2022/05/27/k6LUTyzKMbm7fHS.png" alt="image-20220527234509921"></p><h3 id="微服务常用技术栈"><a href="#微服务常用技术栈" class="headerlink" title="微服务常用技术栈"></a>微服务常用技术栈</h3><p><img src="https://s2.loli.net/2022/05/28/ufzmh8rXIe2wdyN.png" alt="image-20220528041614896"></p><h2 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h2><h3 id="Spring-Cloud的介绍"><a href="#Spring-Cloud的介绍" class="headerlink" title="Spring Cloud的介绍"></a>Spring Cloud的介绍</h3><p>Spring Cloud是Spring提供的一套<strong>分布式解决方案</strong>，用于快速构建分布式系统的通用模式的工具集 。目的是<strong>协调任何服务</strong>，<strong>简化分布式系统开发</strong>。</p><p>Spring Cloud对常见的分布式系统模式提供了简单易用的<strong>编程模型</strong>，帮助开发者构建弹性、可靠、协调的应用程序。</p><p>Spring Cloud<strong>提供</strong>了<strong>快速构建分布式协调架构</strong>的<strong>组件</strong>，例如服务发现、配置管理、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁定、领导选举、分布式会话、集群状态等。</p><p><img src="https://s2.loli.net/2022/05/25/ETdZKgP2Lzuxm5D.png" alt="来自Spring官网"></p><h3 id="Spring-Cloud的特点"><a href="#Spring-Cloud的特点" class="headerlink" title="Spring Cloud的特点"></a>Spring Cloud的特点</h3><ul><li>基于Spring框架，具备约定优于配置、开箱即用和快速启动等特性</li><li>适用于各种环境。开发和部署在PC Server或各种云环境等</li><li>隐藏组件的复杂性、提供声明式、无xml的配置方式</li><li>组件丰富、功能齐全且轻量级，选型中立，灵活，各个组件解耦。</li></ul><h3 id="Spring-Cloud组件概述"><a href="#Spring-Cloud组件概述" class="headerlink" title="Spring Cloud组件概述"></a>Spring Cloud组件概述</h3><h4 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h4><p><strong>服务治理</strong>组件，包括服务端的<strong>服务注册</strong>中心和客户端的<strong>服务发现</strong>机制。</p><h4 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h4><p><strong>负载均衡的服务调用</strong>组件，具有多种负载均衡调用策略。</p><h4 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h4><p><strong>服务容错</strong>组件，实现了<strong>断路器</strong>模式，为依赖服务的出错和延迟提供了容错能力。</p><h4 id="Spring-Cloud-Feign"><a href="#Spring-Cloud-Feign" class="headerlink" title="Spring Cloud Feign"></a>Spring Cloud Feign</h4><p>基于Ribbon和Hystrix的<strong>声明式服务调用</strong>组件。</p><h4 id="Spring-Cloud-Zuul"><a href="#Spring-Cloud-Zuul" class="headerlink" title="Spring Cloud Zuul"></a>Spring Cloud Zuul</h4><p><strong>API网关</strong>组件，对请求提供<strong>路由</strong>及<strong>过滤</strong>功能。</p><h4 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h4><p>用于<strong>传播集群状态变化</strong>的<strong>消息总线</strong>，使用轻量级<strong>消息代理链接分布式系统中的节点</strong>，可以用来<strong>动态刷新集群中的服务配置</strong>。</p><h4 id="Spring-Cloud-config"><a href="#Spring-Cloud-config" class="headerlink" title="Spring Cloud config"></a>Spring Cloud config</h4><p>集中<strong>配置管理</strong>工具，分布式系统中统一的<strong>外部配置管理</strong>，默认<strong>使用Git</strong>来<strong>存储配置</strong>，支持<strong>客户端配置的刷新</strong>及加密、<strong>解密</strong>操作。</p><h4 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h4><p>基于Hashicorp Consul的<strong>服务治理</strong>组件。</p><h4 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a>Spring Cloud Security</h4><p>安全工具包，对Zuul代理中的负载均衡<strong>OAuth2客户端</strong>及<strong>登录认证</strong>进行支持。</p><h4 id="Spring-Cloud-Bus-1"><a href="#Spring-Cloud-Bus-1" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h4><p>使用轻量级的消息代理来连接微服务架构中的各个服务，主要用于广播状态更改或其他管理指令。</p><h4 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h4><p>Spring Cloud应用程序的<strong>分布式请求链路跟踪</strong>，支持使用Zipkin、HTrace和基于日志（例如ELK）的跟踪。</p><h4 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h4><p>轻量级<strong>事件驱动微服务</strong>框架，可以使用简单的<strong>声明式模型</strong>来<strong>发送及接收消息</strong>，主要实现为Apache Kafka及RabbitMQ。</p><h4 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h4><p>用于<strong>快速构建短暂</strong>、<strong>有限数据处理任务</strong>的微服务框架，用于向应用中添加功能性和非功能性的特征。</p><h4 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h4><p>基于Apache Zookeeper的服务治理组件。</p><h4 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h4><p><strong>API网关组件</strong>，<strong>对请求提供路由及过滤</strong>功能。</p><h4 id="Spring-Cloud-OpenFegin"><a href="#Spring-Cloud-OpenFegin" class="headerlink" title="Spring Cloud OpenFegin"></a>Spring Cloud OpenFegin</h4><p>基于Ribbon和Hystrix的<strong>声明式服务调用</strong>组件，可以<strong>动态创建基于Spring MVC注解的接口实现</strong>，用于<strong>服务调用</strong>，在Spring Cloud2.0中已经取代Feign。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-Cloud&quot;&gt;&lt;a href=&quot;#Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud&quot;&gt;&lt;/a&gt;Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="Spring Cloud" scheme="http://example.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Docsify</title>
    <link href="http://example.com/2022/05/22/Docsify/"/>
    <id>http://example.com/2022/05/22/Docsify/</id>
    <published>2022-05-22T09:18:55.000Z</published>
    <updated>2022-05-22T15:00:21.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h1><h2 id="Docsify简介"><a href="#Docsify简介" class="headerlink" title="Docsify简介"></a>Docsify简介</h2><p>Docsify是一个动态生成的文档网站的工具，Docsify不会生成静态的HTML文件，它会在运行时完成对Markdown文件的加载和解析。</p><p>本文将主要介绍如何使用Docsify快速搭建一个快捷、轻量级的个人&amp;团队文档。</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Node.js是JavaScript运行环境，支持JavaScript运行在服务端的开发平台</p><p>Node.js官网地址：<a href="https://nodejs.org/">https://nodejs.org/</a></p><p><img src="https://s2.loli.net/2022/05/21/TOC8w2ZSvfdFgJN.png" alt="202205201211462"></p><p><img src="https://s2.loli.net/2022/05/21/GIvEb4esqrDlFTy.png" alt="202205201226136"></p><h3 id="安装docsify-cli工具"><a href="#安装docsify-cli工具" class="headerlink" title="安装docsify-cli工具"></a>安装docsify-cli工具</h3><p>docsify-cli进行本地初始化和实时预览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i docsify-cli -g</span><br><span class="line">//推荐使用图内镜像</span><br><span class="line">cnpm i docsify-cli -g</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/22/3ty5M4Lz1g2VlKN.png" alt="image-20220522173914010"></p><h3 id="初始化项目结构"><a href="#初始化项目结构" class="headerlink" title="初始化项目结构"></a>初始化项目结构</h3><p>新建一个docs文件夹，通过init初始化项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify init ./docs</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/22/HBorcbEiqQXhdS8.png" alt="image-20220522174002177"></p><p><img src="https://s2.loli.net/2022/05/22/DPrEomUQW5nuMZt.png" alt="image-20220522174024315"></p><p><img src="https://s2.loli.net/2022/05/22/GbMueCUpT1ZSrDs.png" alt="image-20220522180143594"></p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docsify serve docs</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/22/A24lQ35SWLxprsO.png" alt="image-20220522174218091"></p><p><img src="https://s2.loli.net/2022/05/22/zgjxPEOnU1WFCBR.png" alt="image-20220522174156828"></p><h3 id="基础配置文件"><a href="#基础配置文件" class="headerlink" title="基础配置文件"></a>基础配置文件</h3><h4 id="基础配置项-index-html"><a href="#基础配置项-index-html" class="headerlink" title="基础配置项-index.html"></a>基础配置项-index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Docsify By XiaoYuanJW<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Description&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable = no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置图标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认主题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加载中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">$docsify</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;Docsify By XiaoYuanJW&#x27;</span>,<span class="comment">//项目名称</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">repo</span>: <span class="string">&#x27;https://github.com/XiaoYuanJW&#x27;</span>,<span class="comment">//仓库地址</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">loadSidebar</span>: <span class="literal">true</span>,<span class="comment">//侧边框支持</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">loadNavbar</span>: <span class="literal">true</span>,<span class="comment">//导航栏支持</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">coverpage</span>: <span class="literal">true</span>,<span class="comment">//封面支持</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">maxLevel</span>: <span class="number">5</span>,<span class="comment">//设置最大支持渲染的标题层级</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">subMaxLevel</span>: <span class="number">4</span>,<span class="comment">//设置生成目录的最大层级</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">mergeNavbar</span>: <span class="literal">true</span>,<span class="comment">//小屏设备合并导航栏到侧边栏</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">alias</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;/.*/_sidebar.md&#x27;</span>: <span class="string">&#x27;/_sidebar.md&#x27;</span><span class="comment">//防止意外回退</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">alias</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;/.*/_navbar.md&#x27;</span>: <span class="string">&#x27;/_navbar.md&#x27;</span><span class="comment">//防止意外回退</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;  </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 搜索配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">$docsify</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">search</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">maxAge</span>: <span class="number">86400000</span>,<span class="comment">//过期时间，单位毫秒，默认一天</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">paths</span>: auto,<span class="comment">//注意：仅适用于paths: &#x27;auto&#x27;模式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 支持本地化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">placeholder</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/zh-cn/&#x27;</span>: <span class="string">&#x27;搜索&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;Type to search&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">noData</span>: <span class="string">&#x27;can not find results&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">depth</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hideOtherSidebarContent</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">namespace</span>: <span class="string">&#x27;Docsify By XiaoYuanJW&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Docsify v4 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify@4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- docsify的js依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- emoji表情支持 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/emoji.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 图片放大缩小支持 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/zoom-image.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 搜索功能支持 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Click to copy支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/docsify-copy-code/dist/docsify-copy-code.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 代码高亮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/prismjs/components/prism-bash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/prismjs/components/prism-java.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/prismjs/components/prism-sql.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="封面配置文件-coverpage-md"><a href="#封面配置文件-coverpage-md" class="headerlink" title="封面配置文件-_coverpage.md"></a>封面配置文件-_coverpage.md</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Java学习记录</span></span><br><span class="line"><span class="quote">&gt; Notes of Java Created by XiaoYuanJW</span></span><br><span class="line"></span><br><span class="line">Java学习过程和记录</span><br><span class="line"></span><br><span class="line">[<span class="string">GitHub</span>](<span class="link">https://github.com/XiaoYuanJW</span>)</span><br><span class="line">[<span class="string">Get Started</span>](<span class="link">README.md</span>)</span><br></pre></td></tr></table></figure><h4 id="侧边栏配置文件-sidebar-md"><a href="#侧边栏配置文件-sidebar-md" class="headerlink" title="侧边栏配置文件-_sidebar.md"></a>侧边栏配置文件-_sidebar.md</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 基础篇</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">MySQL</span>](<span class="link">basic/MySQL.md</span>)</span><br><span class="line"><span class="bullet">*</span> 架构篇</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">SpringBoot</span>](<span class="link">architect/SpringBoot.md</span>)</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">MyBatis</span>](<span class="link">architect/MyBatis.md</span>)</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">SpringCloud</span>](<span class="link">architect/SpringCloud.md</span>)</span><br></pre></td></tr></table></figure><h4 id="导航栏配置文件-navbar-md"><a href="#导航栏配置文件-navbar-md" class="headerlink" title="导航栏配置文件-_navbar.md"></a>导航栏配置文件-_navbar.md</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 网站</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">myBlog</span>](<span class="link">https://xiaoyuanjw.github.io/</span>)</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">Leetcode</span>](<span class="link">https://leetcode.cn/u/xiaoyuanjw/</span>)</span><br><span class="line"><span class="bullet">*</span> 项目地址</span><br><span class="line"><span class="bullet">  *</span> [<span class="string">myMall</span>](<span class="link">https://github.com/XiaoYuanJW/mymall_pro</span>)</span><br></pre></td></tr></table></figure><h3 id="部署远端-Github"><a href="#部署远端-Github" class="headerlink" title="部署远端-Github"></a>部署远端-Github</h3><h4 id="新建代码仓库"><a href="#新建代码仓库" class="headerlink" title="新建代码仓库"></a>新建代码仓库</h4><p><img src="https://pic3.zhimg.com/80/v2-aa77dbcb386e9a433d0a37aaba306876_720w.png" alt="img"></p><h4 id="提交仓库"><a href="#提交仓库" class="headerlink" title="提交仓库"></a>提交仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/XiaoYuanJW/Docsify.git</span><br><span class="line">git add *</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/22/tk1vo6yR4FnIT9V.png" alt="image-20220522215447029"></p><h4 id="开启GitHub-Pages服务"><a href="#开启GitHub-Pages服务" class="headerlink" title="开启GitHub Pages服务"></a>开启GitHub Pages服务</h4><p><img src="https://s2.loli.net/2022/05/22/PGOi2RDIUQEo6A1.png" alt="image-20220522224557192"></p><p><img src="https://s2.loli.net/2022/05/22/HYZlx8MC7qWXfjS.png" alt="image-20220522224450431"></p><p><img src="https://s2.loli.net/2022/05/22/SyUNLaZ9TjEHWJV.png" alt="image-20220522225032813"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docsify&quot;&gt;&lt;a href=&quot;#Docsify&quot; class=&quot;headerlink&quot; title=&quot;Docsify&quot;&gt;&lt;/a&gt;Docsify&lt;/h1&gt;&lt;h2 id=&quot;Docsify简介&quot;&gt;&lt;a href=&quot;#Docsify简介&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Others" scheme="http://example.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://example.com/2022/05/21/Hexo/"/>
    <id>http://example.com/2022/05/21/Hexo/</id>
    <published>2022-05-20T18:13:55.000Z</published>
    <updated>2022-05-20T18:55:11.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>Node.js是JavaScript运行环境，支持JavaScript运行在服务端的开发平台</p><p>Node.js官网地址：<a href="https://nodejs.org/">https://nodejs.org/</a></p><p><img src="https://s2.loli.net/2022/05/21/TOC8w2ZSvfdFgJN.png" alt="202205201211462"></p><p><img src="https://s2.loli.net/2022/05/21/GIvEb4esqrDlFTy.png" alt="202205201226136"></p><h4 id="查看node和npm版本"><a href="#查看node和npm版本" class="headerlink" title="查看node和npm版本"></a>查看node和npm版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/rgEyeiRcdTj7kFq.png" alt="202205201230549"></p><h4 id="安装淘宝镜像源的cnpm管理器"><a href="#安装淘宝镜像源的cnpm管理器" class="headerlink" title="安装淘宝镜像源的cnpm管理器"></a>安装淘宝镜像源的cnpm管理器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/NCnrHDb2Fw8qjIa.png" alt="202205201235464"></p><h4 id="使用cnpm安装hexo"><a href="#使用cnpm安装hexo" class="headerlink" title="使用cnpm安装hexo"></a>使用cnpm安装hexo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/NrPBRmnvYGF1i8J.png" alt="202205201237355"></p><p><img src="https://s2.loli.net/2022/05/21/5Vc2yJ4APoKEn9L.png" alt="202205202055699"></p><h3 id="新建本地博客服务"><a href="#新建本地博客服务" class="headerlink" title="新建本地博客服务"></a>新建本地博客服务</h3><h4 id="新建文件夹并进入该目录"><a href="#新建文件夹并进入该目录" class="headerlink" title="新建文件夹并进入该目录"></a>新建文件夹并进入该目录</h4><p><img src="https://s2.loli.net/2022/05/21/uOWaGfYP7FiMvJx.png" alt="202205202328578"></p><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/rIjyqmQtHoZ65XK.png" alt="202205202357848"></p><p><img src="https://s2.loli.net/2022/05/21/EYILBe5Gz1sKmpv.png" alt="202205202357655"></p><h4 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/pB3Sgz4Rl1nAsrY.png" alt="202205202359271"></p><h4 id="本地访问地址"><a href="#本地访问地址" class="headerlink" title="本地访问地址"></a>本地访问地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/8MDVjfRg9UadxHo.png" alt="202205210000921"></p><h4 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/HgeRZyahA3jP5fd.png" alt="202205210005873"></p><h4 id="清理并生成"><a href="#清理并生成" class="headerlink" title="清理并生成"></a>清理并生成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/7t8aARp25ns4zYF.png" alt="202205210008839"></p><h3 id="远端部署Github"><a href="#远端部署Github" class="headerlink" title="远端部署Github"></a>远端部署Github</h3><h4 id="创建一个新的仓库"><a href="#创建一个新的仓库" class="headerlink" title="创建一个新的仓库"></a>创建一个新的仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YourGithubName.github.io</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/lZNmv2BaRI3zOow.png" alt="image-20220521013933355"></p><h4 id="在Blog目录下安装git部署插件"><a href="#在Blog目录下安装git部署插件" class="headerlink" title="在Blog目录下安装git部署插件"></a>在Blog目录下安装git部署插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/pX61UCDBTFakeKS.png" alt="image-20220521014255050"></p><h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h4><p><img src="https://s2.loli.net/2022/05/21/7xKjgYCRUXvMfOQ.png" alt="image-20220521014451812"></p><p><img src="https://s2.loli.net/2022/05/21/NcFBdCJlhGkyeVY.png" alt="image-20220521015324639"></p><h4 id="部署到Github远端"><a href="#部署到Github远端" class="headerlink" title="部署到Github远端"></a>部署到Github远端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/TGDAKj5SauzUpOB.png" alt="image-20220521015431257"></p><h4 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://YourGithubName.github.io/ </span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/UHpLAeJX9bYqNa1.png" alt="image-20220521015704706"></p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><h4 id="选择主题-Butterfly"><a href="#选择主题-Butterfly" class="headerlink" title="选择主题-Butterfly"></a>选择主题-Butterfly</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//官网</span><br><span class="line">https://butterfly.js.org/</span><br><span class="line">//Git仓库</span><br><span class="line">https://github.com/jerryc127/hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h4 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//克隆到themes目录下的butterfly文件夹</span><br><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly themes/butterfly</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/CPYofTxe8DmQ5iU.png" alt="image-20220521023716102"></p><h4 id="修改配置-config-yml"><a href="#修改配置-config-yml" class="headerlink" title="修改配置_config.yml"></a>修改配置_config.yml</h4><p><img src="https://s2.loli.net/2022/05/21/zf4Wja2liQxqhZc.png" alt="image-20220521023849882"></p><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/XutWCqQwcRKzpJP.png" alt="image-20220521024656434"></p><h4 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="运行本地服务"><a href="#运行本地服务" class="headerlink" title="运行本地服务"></a>运行本地服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="部署远端"><a href="#部署远端" class="headerlink" title="部署远端"></a>部署远端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/21/wUDJId1PV7ZLHvh.png" alt="image-20220521025504184"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h1&gt;&lt;h2 id=&quot;初始化项目&quot;&gt;&lt;a href=&quot;#初始化项目&quot; class=&quot;headerlink&quot; title=&quot;初始化项目&quot;&gt;</summary>
      
    
    
    
    
    <category term="Others" scheme="http://example.com/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/05/20/hello-world/"/>
    <id>http://example.com/2022/05/20/hello-world/</id>
    <published>2022-05-20T15:44:47.696Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
